<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jefflike&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-25T12:05:01.016Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jefflike</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Interface实现多继承</title>
    <link href="http://yoursite.com/2018/05/25/Interface%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2018/05/25/Interface实现多继承/</id>
    <published>2018-05-25T10:10:21.000Z</published>
    <updated>2018-05-25T12:05:01.016Z</updated>
    
    <content type="html"><![CDATA[<h3 id="接口的概念"><a href="#接口的概念" class="headerlink" title="接口的概念"></a>接口的概念</h3><p>在Java的面向对象里，类的继承关系是单继承的，与python的多继承不同，单继承的概念比较狭隘，在实际的环境里单继承的设计<br>也不适用，Son不仅会继承father的属性，同时son也会继承mother的属性，而这种情况下，单继承就做不到让两个父类的属性都被子类继承了。<br>不仅如此，在类抽象父类的过程中，鸭子可以水中游，船也可以水中游，但是鸭子和船却不能很好的抽象出一个合理的父类来。</p><p>接口使得很多没有父子类关系的类型对象，可以通过某个接口（标准）的类型，实现统一管理。<br>简单的来说，我认为Java设计出接口的概念是实现多继承的一种方式，同时也是实现鸭子类型的一种方式。</p><h3 id="接口的定义与继承"><a href="#接口的定义与继承" class="headerlink" title="接口的定义与继承"></a>接口的定义与继承</h3><p>接口和类是同一个级别的概念。可以理解为特殊的类，特殊的抽象类。<br>调用的语法与声明class基本一致，只是将class关键字换成了interface。</p><p>定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] interface 接口名&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>继承：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] class 实现类   implements 父接口名&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[修饰符] class 实现类   implements 父接口名1，父接口名2，...&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[修饰符] class 实现类  extends 父类   implements 父接口名1，父接口名2，...&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="接口的特点"><a href="#接口的特点" class="headerlink" title="接口的特点"></a>接口的特点</h3><ol><li>接口不能直接实例化，即不能直接创建对象(与抽象类类似);</li><li><p>接口中的成员：</p><p> JDK1.8之前：接口中的成员只有三类：</p><ul><li>（1）公共的静态的常量：public static final，这几个修饰符可以省略</li><li>（2）公共的抽象的方法：public abstract，这两个修饰符可以省略</li><li>（3）公共的内部接口</li></ul></li><li>设计接口的目的就是用来被实现的。<ul><li>一个类实现了接口，就要求这个类必须重写（实现）接口的抽象方法，否则这个类也得是个抽象类。</li></ul></li><li>一个类可以同时实现很多个接口(类似于多继承)。</li><li>一个类可以同时继承父类，又实现接口们。如果继承和实现同时存在，继承优先级更高。</li><li>接口与实现类的对象之间构成多态引用。</li><li>接口可以继承接口，而且可以继承多个接口。</li></ol><h3 id="coding理解interface的作用"><a href="#coding理解interface的作用" class="headerlink" title="coding理解interface的作用"></a>coding理解interface的作用</h3><p>我现在想写一个可以为任意数组排序的一个工具，但是不同类型的数组的排序要怎么来完成是一个问题，假设我有一个学生对象的数组，那么对于这个<br>学生对象的数组排序，我是按照年龄排序还是按照学号排序，再或者我下一次放入一个全是整形的数组进行排序，那么我们如何让我的这个工具类<br>都可以正常的运行呢。<br>定义一个接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 我们定义的这个接口定义了一个规范，实现我们的这个接口的类都必须实现自己的一套排序方式</span></span><br><span class="line"><span class="comment">* 并且大小顺序按照此规则来定</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SortAble</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 规定：当前对象this 和 指定对象obj比较大小时，</span></span><br><span class="line"><span class="comment">     * 当 this “大于” obj时，返回正整数</span></span><br><span class="line"><span class="comment">     * 当 this “小于” obj时，返回负整数</span></span><br><span class="line"><span class="comment">     * 当 this “等于” obj时，返回零</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object obj)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定义一个学生类，按照接口定义的要求实现比较的细节：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Sortable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Student [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现接口，标准的抽象方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="comment">//this的学生对象和obj的学生对象进行比较大小，按照学号比较</span></span><br><span class="line">Student other = (Student) obj;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.id &gt; other.id)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.id &lt; other.id)&#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现排序的细节：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArrays</span> </span>&#123;</span><br><span class="line"><span class="comment">//功能：为任意类型的数组进行从小到大排序</span></span><br><span class="line"><span class="comment">//参数：Object[]</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Object[] arr)</span></span>&#123;</span><br><span class="line"><span class="comment">//冒泡排序：从小到大</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length-i; j++) &#123;</span><br><span class="line"><span class="comment">//如果arr[j]和arr[j+1]两个对象符合Sortable标准</span></span><br><span class="line"><span class="comment">//那么，我们就可以把arr[j]转成Sortable类型</span></span><br><span class="line">Student s = (Student) arr[j];<span class="comment">//这两种转换都可以</span></span><br><span class="line"><span class="comment">//Sortable s = (Sortable) arr[j];</span></span><br><span class="line"><span class="comment">//if(arr[j] &gt; arr[j+1])&#123;//if(前面的元素 》 后面的元素)&#123;</span></span><br><span class="line"><span class="keyword">if</span>(s.compare(arr[j+<span class="number">1</span>]) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">Object temp = arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后我们可以进行测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMyArrays</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student[] students = <span class="keyword">new</span> Student[<span class="number">3</span>];</span><br><span class="line">        students[<span class="number">0</span>] = <span class="keyword">new</span> Student(<span class="number">4</span>,<span class="string">"张三"</span>);</span><br><span class="line">        students[<span class="number">1</span>] = <span class="keyword">new</span> Student(<span class="number">1</span>,<span class="string">"李四"</span>);</span><br><span class="line">        students[<span class="number">2</span>] = <span class="keyword">new</span> Student(<span class="number">5</span>,<span class="string">"丁杰"</span>);</span><br><span class="line"></span><br><span class="line">        MyArrays.sort(students);</span><br><span class="line">        <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Student [id=1, name=李四]</span><br><span class="line">Student [id=4, name=张三]</span><br><span class="line">Student [id=5, name=丁杰]</span><br></pre></td></tr></table></figure></p><p>通过上面的例子我们可以的出结论，只要是我们实现了接口定义的compare()方法，那么我们的类实例出的对象就可以进行排序输出了。</p><h3 id="JDK8后的接口特性"><a href="#JDK8后的接口特性" class="headerlink" title="JDK8后的接口特性"></a>JDK8后的接口特性</h3><p>接口成员除了公共的静态的常量：public static final，公共的抽象的方法：public abstract，公共内部接口以外又增加了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">interface MyInter&#123;</span><br><span class="line">//静态方法,通过接口名进行调用。</span><br><span class="line">public static void method()&#123;</span><br><span class="line">System.out.println(&quot;接口中允许有静态方法&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//默认方法,通过实现类的对象调用。子类可以不实现就直接调用，子类也可以进行重写</span><br><span class="line">public default void test()&#123;</span><br><span class="line">System.out.println(&quot;接口的默认方法&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//抽象方法</span><br><span class="line">public abstract void fangFa();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>默认方法：当接口的多个实现类关于某个抽象方法的实现是一样的，那么可以在接口中给出默认实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInterface</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyInter.method();</span><br><span class="line"></span><br><span class="line">MyImpl my = <span class="keyword">new</span> MyImpl();</span><br><span class="line">my.fangFa();</span><br><span class="line">my.test();</span><br><span class="line"></span><br><span class="line">OtherImpl other = <span class="keyword">new</span> OtherImpl();</span><br><span class="line">other.test();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInter</span></span>&#123;</span><br><span class="line"><span class="comment">//静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"接口中允许有静态方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认方法,</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"接口的默认方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fangFa</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyImpl</span> <span class="keyword">implements</span> <span class="title">MyInter</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fangFa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"实现类重写接口的抽象方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OtherImpl</span> <span class="keyword">implements</span> <span class="title">MyInter</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写接口中的默认方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"重写接口的默认方法......"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fangFa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"实现类重写接口的抽象方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">接口中允许有静态方法</span><br><span class="line">实现类重写接口的抽象方法</span><br><span class="line">接口的默认方法</span><br><span class="line">重写接口的默认方法......</span><br></pre></td></tr></table></figure></p><h3 id="继承类与接口时遇到的冲突"><a href="#继承类与接口时遇到的冲突" class="headerlink" title="继承类与接口时遇到的冲突"></a>继承类与接口时遇到的冲突</h3><h4 id="一个类同时实现的多个接口都有一个一样的默认方法"><a href="#一个类同时实现的多个接口都有一个一样的默认方法" class="headerlink" title="一个类同时实现的多个接口都有一个一样的默认方法"></a>一个类同时实现的多个接口都有一个一样的默认方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProblem1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MySub m = <span class="keyword">new</span> MySub();</span><br><span class="line">m.method();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"A接口的默认方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"B接口的默认方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现了A和B，A和B都有自己的默认方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySub</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public void method() &#123;</span></span><br><span class="line"><span class="comment">A.super.method();//保留A的方法实现</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public void method() &#123;</span></span><br><span class="line"><span class="comment">B.super.method();//保留B的方法实现</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public void method() &#123;</span></span><br><span class="line"><span class="comment">A.super.method();//保留A的方法实现</span></span><br><span class="line"><span class="comment">B.super.method();//也保留B的方法实现</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//选择C</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我选择其他"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承的父类与实现接口中的默认方法一样"><a href="#继承的父类与实现接口中的默认方法一样" class="headerlink" title="继承的父类与实现接口中的默认方法一样"></a>继承的父类与实现接口中的默认方法一样</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProblem2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Sub sub = <span class="keyword">new</span> Sub();</span><br><span class="line">sub.method();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">myInter</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"接口中的默认方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"父类和接口的默认方法一样的方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Father</span> <span class="keyword">implements</span> <span class="title">myInter</span></span>&#123;</span><br><span class="line"><span class="comment">//(1)默认保留的是父类</span></span><br><span class="line"><span class="comment">//(2)明确保留父类的</span></span><br><span class="line"><span class="comment">/*public void method()&#123;</span></span><br><span class="line"><span class="comment">super.method();</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(3)明确保留接口的</span></span><br><span class="line"><span class="comment">/*public void method()&#123;</span></span><br><span class="line"><span class="comment">myInter.super.method();</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(4)两者都不要，其他</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"其他"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;接口的概念&quot;&gt;&lt;a href=&quot;#接口的概念&quot; class=&quot;headerlink&quot; title=&quot;接口的概念&quot;&gt;&lt;/a&gt;接口的概念&lt;/h3&gt;&lt;p&gt;在Java的面向对象里，类的继承关系是单继承的，与python的多继承不同，单继承的概念比较狭隘，在实际的环境里单继
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java程序初始化的顺序（二）</title>
    <link href="http://yoursite.com/2018/05/23/Java%E7%A8%8B%E5%BA%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E9%A1%BA%E5%BA%8F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2018/05/23/Java程序初始化的顺序（二）/</id>
    <published>2018-05-23T15:42:54.000Z</published>
    <updated>2018-05-24T03:51:08.504Z</updated>
    
    <content type="html"><![CDATA[<p>之前的一篇博客里我写了关于在一个类中的程序初始化顺序，但是在Java的面向对象里，类之间还存在着继承的关系。所以关于程序的初始化顺序，我们可以<br>再细划分为：父类静态变量，父类的静态代码块，父类构造器，父类非静态变量，父类非静态代码块，子类静态变量，子类静态代码块，子类构造器，子类非静态代码块<br>和子类非静态代码块。本篇博客我们讨论的就是关于程序初始化的过程中，上述的成员在初始化加载先后顺序。</p><p>在此前我们讨论得出的结论：在一个类中，Java程序加载的顺序是：静态变量–&gt;静态代码块–&gt;非静态变量–&gt;非静态代码块–&gt;构造器.<br>父类的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">    <span class="comment">//父类与子类都在一个包中，这里我们就使用default修饰符</span></span><br><span class="line">    <span class="comment">//这是一个父类的静态变量,此时还是初始化的默认值null</span></span><br><span class="line">    <span class="keyword">static</span> String superStaticVariale;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块，给String赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        superStaticVariale = <span class="string">"父类静态代码块赋值成功"</span>;</span><br><span class="line">        System.out.println(<span class="string">"此时运行的是父类的静态代码块："</span>+superStaticVariale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造，覆盖静态代码块的值</span></span><br><span class="line">    SuperClass()&#123;</span><br><span class="line">        superStaticVariale = <span class="string">"父类构造器赋值成功"</span>;</span><br><span class="line">        System.out.println(<span class="string">"此时运行的是父类的构造器："</span>+superStaticVariale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个非静态变量</span></span><br><span class="line">    String superVariale;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        superVariale = <span class="string">"父类非静态代码块赋值"</span>;</span><br><span class="line">        System.out.println(<span class="string">"此时运行的是父类的非静态代码块："</span>+superVariale);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>子类的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> String subStaticVariale;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块，给String赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        subStaticVariale = <span class="string">"子类静态代码块赋值成功"</span>;</span><br><span class="line">        System.out.println(<span class="string">"此时运行的是子类的静态代码块："</span>+subStaticVariale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造，覆盖静态代码块的值</span></span><br><span class="line">    SubClass()&#123;</span><br><span class="line">        superStaticVariale = <span class="string">"子类构造器赋值成功"</span>;</span><br><span class="line">        System.out.println(<span class="string">"此时运行的是子类的构造器："</span>+superStaticVariale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个非静态变量</span></span><br><span class="line">    String subVariale;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        subVariale = <span class="string">"子类非静态代码块赋值"</span>;</span><br><span class="line">        System.out.println(<span class="string">"此时运行的是子类非静态代码块："</span>+subVariale);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SubClass s = <span class="keyword">new</span> SubClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">此时运行的是父类的静态代码块：父类静态代码块赋值成功</span><br><span class="line">此时运行的是子类的静态代码块：子类静态代码块赋值成功</span><br><span class="line">此时运行的是父类的非静态代码块：父类非静态代码块赋值</span><br><span class="line">此时运行的是父类的构造器：父类构造器赋值成功</span><br><span class="line">此时运行的是子类非静态代码块：子类非静态代码块赋值</span><br><span class="line">此时运行的是子类的构造器：子类构造器赋值成功</span><br></pre></td></tr></table></figure></p><p>很显然，在继承关系中，代码的加载顺序是：父类的静态变量–&gt;父类的静态代码块–&gt;子类静态变量–&gt;子类的静态代码块–&gt;父类非静态变量–&gt;父类的非静态代码块–&gt;父类的构造器<br>–&gt;子类非静态变量–&gt;子类非静态代码块–&gt;子类构造器</p><p>进一步测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SubClass s = <span class="keyword">new</span> SubClass();</span><br><span class="line">        SubClass s1 = <span class="keyword">new</span> SubClass();</span><br><span class="line">        SubClass s2 = <span class="keyword">new</span> SubClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">此时运行的是父类的静态代码块：父类静态代码块赋值成功</span><br><span class="line">此时运行的是子类的静态代码块：子类静态代码块赋值成功</span><br><span class="line">此时运行的是父类的非静态代码块：父类非静态代码块赋值</span><br><span class="line">此时运行的是父类的构造器：父类构造器赋值成功</span><br><span class="line">此时运行的是子类非静态代码块：子类非静态代码块赋值</span><br><span class="line">此时运行的是子类的构造器：子类构造器赋值成功</span><br><span class="line">此时运行的是父类的非静态代码块：父类非静态代码块赋值</span><br><span class="line">此时运行的是父类的构造器：父类构造器赋值成功</span><br><span class="line">此时运行的是子类非静态代码块：子类非静态代码块赋值</span><br><span class="line">此时运行的是子类的构造器：子类构造器赋值成功</span><br><span class="line">此时运行的是父类的非静态代码块：父类非静态代码块赋值</span><br><span class="line">此时运行的是父类的构造器：父类构造器赋值成功</span><br><span class="line">此时运行的是子类非静态代码块：子类非静态代码块赋值</span><br><span class="line">此时运行的是子类的构造器：子类构造器赋值成功</span><br></pre></td></tr></table></figure></p><p>得出结论：<br>父类与子类的静态代码都只执行一次，然后非静态代码块与构造器是组合出现的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前的一篇博客里我写了关于在一个类中的程序初始化顺序，但是在Java的面向对象里，类之间还存在着继承的关系。所以关于程序的初始化顺序，我们可以&lt;br&gt;再细划分为：父类静态变量，父类的静态代码块，父类构造器，父类非静态变量，父类非静态代码块，子类静态变量，子类静态代码块，子类
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Go语言Array与Slice</title>
    <link href="http://yoursite.com/2018/05/21/Go%E8%AF%AD%E8%A8%80Array%E4%B8%8ESlice/"/>
    <id>http://yoursite.com/2018/05/21/Go语言Array与Slice/</id>
    <published>2018-05-21T14:35:12.000Z</published>
    <updated>2018-05-25T10:25:03.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组基础"><a href="#数组基础" class="headerlink" title="数组基础"></a>数组基础</h2><h3 id="为什么要讨论Go语言的数组"><a href="#为什么要讨论Go语言的数组" class="headerlink" title="为什么要讨论Go语言的数组"></a>为什么要讨论Go语言的数组</h3><p>在其他语言里，比如Java和python里数组(列表)，都是引用传递，但是到了Go语言里，数组的传递方式依然是值传递。那么值传递的数组是怎么使用的呢？<br>这篇文章里简单的整理一下Go语言的数组的使用与其配合的Slice的工作原理。</p><h3 id="数组定义的三种方式"><a href="#数组定义的三种方式" class="headerlink" title="数组定义的三种方式"></a>数组定义的三种方式</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.定义一个数组，并赋值</span></span><br><span class="line"><span class="keyword">var</span> arr1 [<span class="number">5</span>]<span class="keyword">int</span><span class="comment">//[0 0 0 0 0]</span></span><br><span class="line"><span class="comment">//var arr1 = [5]int&#123;1,2,3,4,5&#125;//[1 2 3 4 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.:=要给数组赋初值</span></span><br><span class="line">arr2 := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;<span class="comment">//[1 2 3]</span></span><br><span class="line">fmt.Println(arr1, arr2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.奇葩的赋值方式，但是好用，不确定数组的长度</span></span><br><span class="line">arr3 := [...]<span class="keyword">int</span>&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">10</span>&#125;<span class="comment">//[2 4 6 7 10]</span></span><br><span class="line">fmt.Println(arr3)</span><br></pre></td></tr></table></figure><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.数组的遍历,长度为len()</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(arr2);i++&#123;</span><br><span class="line">fmt.Println(arr2[i])<span class="comment">//1   2    3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.range获取数组的下标，遍历数组</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="keyword">range</span> arr2&#123;</span><br><span class="line">fmt.Println(arr2[i])<span class="comment">//1   2    3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.range还可以获得数组的值</span></span><br><span class="line"><span class="keyword">for</span> i, v:=<span class="keyword">range</span> arr2&#123;</span><br><span class="line">fmt.Println(i, v)<span class="comment">//1   2    3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.只要v的情况,_在Go语言中是一种通用方法</span></span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> arr2&#123;</span><br><span class="line">sum += v</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数内传入数组"><a href="#函数内传入数组" class="headerlink" title="函数内传入数组"></a>函数内传入数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go语言的数组是值类型的，也就是说，在函数内是不会改变函数外调用的数组的值的</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">array2</span><span class="params">( arr [3]<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"><span class="keyword">for</span> _,v :=<span class="keyword">range</span> arr&#123;</span><br><span class="line">fmt.Println(v)<span class="comment">//100,3,4,此处相当于将复制得来的数组改变了，但是外层的数组并没有改变</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//var arr1 [5]int</span></span><br><span class="line">arr2 := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">array1()</span><br><span class="line"><span class="comment">//array2(arr1)//这里是会报错的，array2函数需要传入一个长度为3的数组，go语言里认为长度为3和长度为5的数组不是一个类型的，所以会飘红</span></span><br><span class="line">array2(arr2)</span><br><span class="line">fmt.Println(arr2)<span class="comment">//[2 3 4]</span></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>func内传入的形参是一个固定长度的数组，并且传递实参的时候只能传递一个相同长度的数组作为实参传递，否则程序会报错；</li><li>在函数中修改了数组的值，但是实际作为实参的数组的值却没有发生变化，这说明了数组只是传递了值，而不是将整个对象引用过去。<br>形参copy了一个新的数组加以修改，而不是在原有的数组上进行修改。<h3 id="数组的“引用传递”"><a href="#数组的“引用传递”" class="headerlink" title="数组的“引用传递”"></a>数组的“引用传递”</h3>Java与python中的数组本质上是一个对象，在引用传递的过程中，实际赋值操作时是将对象指向堆空间的内存地址进行传递，那么被赋值对象<br>实际上与原对象指向的是同一块堆内存。修改其中的一个，另外一个也会相应的发生变化，这就是引用传递。<br>Go实现类似应用传递的本质与上述的方法理论基本一致。Go指针在此处的作用大抵就是完成了上述的操作。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">array3</span><span class="params">( arr *[3]<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"><span class="keyword">for</span> _,v :=<span class="keyword">range</span> arr&#123;</span><br><span class="line">fmt.Println(v)<span class="comment">//100,3,4,此处相当于将复制得来的数组改变了，但是外层的数组并没有改变</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//array3接收的是一个数组的指针，所以我们传一个arr的地址值进去</span></span><br><span class="line">array3(&amp;arr2)</span><br><span class="line">fmt.Println(arr2)<span class="comment">//[100 3 4]，此时是相当于引用传递的，所以会改变数组的值</span></span><br></pre></td></tr></table></figure></li></ol><p>注意：从某种程度上来讲，Go语言是一门值传递语言，引入指针的概念后，更确切的说就是，Go语言的参数传递是值传递与指针传递的结合使用。</p><h2 id="Slice"><a href="#Slice" class="headerlink" title="Slice"></a>Slice</h2><p>我们一般翻译过来叫做切片。和其他语言的数组切片非常的相似，包括中括号取索引，半开半闭等，但是实际上Go语言的数组slice与他们相比<br>又有很多独特的地方。</p><h3 id="Slice切片的基本形式"><a href="#Slice切片的基本形式" class="headerlink" title="Slice切片的基本形式"></a>Slice切片的基本形式</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>&#125;</span><br><span class="line"><span class="comment">//两端都有</span></span><br><span class="line">s := arr[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">fmt.Println(s)<span class="comment">//[4 6 8]</span></span><br><span class="line"><span class="comment">//有前无后</span></span><br><span class="line">fmt.Println(arr[<span class="number">2</span>:])<span class="comment">//[6 8 10]</span></span><br><span class="line"><span class="comment">//有后无前</span></span><br><span class="line">fmt.Println(arr[:<span class="number">4</span>])<span class="comment">//[2 4 6 8]</span></span><br><span class="line"><span class="comment">//全切</span></span><br><span class="line">fmt.Println(arr[:])<span class="comment">//[2 4 6 8 10]</span></span><br></pre></td></tr></table></figure><h3 id="Go语言数组的正确打开方式"><a href="#Go语言数组的正确打开方式" class="headerlink" title="Go语言数组的正确打开方式"></a>Go语言数组的正确打开方式</h3><p>其实通过上面的demo可以看出，不论是值引用方式还是指针引用方式，用起来都极为不便，func函数里的数组长度必须要求实参与之长度相同。<br>这样用起来是十分麻烦的，这与Go语言所追求的极简的概念也有着冲突。其实我们平时使用的数组都是Slice方式的，这种方式使用数组是极为简便的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中括号不加数字就是一个切片</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">slice1</span><span class="params">(arr []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"><span class="comment">//改动切片的数值</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">slice1(arr[:])</span><br><span class="line">fmt.Println(arr)<span class="comment">//[100 4 6 8 10]</span></span><br></pre></td></tr></table></figure><p>Go语言在使用数组类似引用传递的操作时一般是不使用指针的，而是上述操作的切片的方式。go文档里说，slice是对数组的一个视图（view），只看我要看的这一小段。</p><h3 id="reSlice"><a href="#reSlice" class="headerlink" title="reSlice"></a>reSlice</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reslice操作,每次的下标都是针对自己的slice</span></span><br><span class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>&#125;</span><br><span class="line">a := arr[:]</span><br><span class="line">a = a[:<span class="number">3</span>]</span><br><span class="line">a = a[<span class="number">1</span>:]</span><br><span class="line">fmt.Println(a)<span class="comment">//[4,6]</span></span><br></pre></td></tr></table></figure><p>reSlice理解起来并不难，但是要是想进一步理解Go语言的切片需要理解Extending Slice.的概念。</p><h3 id="Extending-Slice"><a href="#Extending-Slice" class="headerlink" title="Extending Slice"></a>Extending Slice</h3><p>下面的一段代码：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr1 := [...]<span class="keyword">int</span>&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;</span><br><span class="line">s1 := arr1[<span class="number">2</span>:<span class="number">6</span>]</span><br><span class="line"><span class="comment">//很明显此时s1的长度是4，即下标是0-3，那么此时的s2会不会报错，答案是不会报错</span></span><br><span class="line">s2 := s1[<span class="number">3</span>:<span class="number">5</span>]</span><br><span class="line">fmt.Println(s2)<span class="comment">//[5 6]</span></span><br><span class="line">s3 := s1[<span class="number">3</span>:]</span><br><span class="line">fmt.Println(s3)<span class="comment">//[5],默认是看不到cap()的值的</span></span><br></pre></td></tr></table></figure></p><p>compare:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">s1 = arr[<span class="number">2</span>:<span class="number">6</span>] <span class="comment"># [2, 3, 4, 5]</span></span><br><span class="line">s2 = s1[<span class="number">3</span>:<span class="number">5</span>] <span class="comment"># [5]</span></span><br><span class="line">print(s1, s2)</span><br></pre></td></tr></table></figure></p><p>Go在s2切片的时候下标已经超出s1的索引范围了，但是结果不仅没有报错，而且还正确的切到了下一个正确值6.</p><p>待续。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数组基础&quot;&gt;&lt;a href=&quot;#数组基础&quot; class=&quot;headerlink&quot; title=&quot;数组基础&quot;&gt;&lt;/a&gt;数组基础&lt;/h2&gt;&lt;h3 id=&quot;为什么要讨论Go语言的数组&quot;&gt;&lt;a href=&quot;#为什么要讨论Go语言的数组&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="Go" scheme="http://yoursite.com/categories/Go/"/>
    
    
      <category term="Go" scheme="http://yoursite.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Java程序初始化的顺序（一）</title>
    <link href="http://yoursite.com/2018/05/20/Java%E7%A8%8B%E5%BA%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E9%A1%BA%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/05/20/Java程序初始化的顺序/</id>
    <published>2018-05-20T14:23:26.000Z</published>
    <updated>2018-05-24T06:27:49.495Z</updated>
    
    <content type="html"><![CDATA[<p>今天在写构造器方法的时候，遇到了一个小问题，由这个问题引发了一连串的思考，在一个Java类中变量与类的初始化执行顺序是什么样的呢？</p><h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student()&#123;</span><br><span class="line"><span class="comment">//this(this.name);</span></span><br><span class="line"><span class="keyword">this</span>(name);</span><br><span class="line">System.out.println(<span class="string">"题目要求写一个无参的构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student(String name)&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Student stu1 = <span class="keyword">new</span> Student();</span><br><span class="line">System.out.print(stu1.getName());</span><br><span class="line">Student stu2 = <span class="keyword">new</span> Student(<span class="string">"老大"</span>);</span><br><span class="line">System.out.println(stu2.getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时会报错：无法在调用超类型构造器之前引用name.</p><p>在使用构造器创建对象时，构造器此时还无法使用类的成员变量name.由此我们需要知道，一个类创建对象时到底做了哪些事。</p><h2 id="思考问题"><a href="#思考问题" class="headerlink" title="思考问题"></a>思考问题</h2><p>首先，对于一个类来说加载分为五个部分，分别是静态变量，静态代码块，非静态变量，非静态代码块以及构造器。</p><h3 id="单个类加载顺序"><a href="#单个类加载顺序" class="headerlink" title="单个类加载顺序"></a>单个类加载顺序</h3><p>测试代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">static</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"刚运行到静态代码块时的静态变量值："</span>+name);</span><br><span class="line">        name = <span class="string">"静态name值"</span>;</span><br><span class="line">        System.out.println(<span class="string">"静态代码块结束时的静态变量值："</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个无参构造器</span></span><br><span class="line">    Student()&#123;</span><br><span class="line">        System.out.println(<span class="string">"刚运行到构造器时的静态变量值："</span>+name);</span><br><span class="line">        name = <span class="string">"这是一个无参的构造器"</span>;</span><br><span class="line">        System.out.println(<span class="string">"构造器结束时的静态变量值："</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个非静态变量</span></span><br><span class="line">    String name2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"刚运行到非静态代码块时的非静态变量值："</span>+name2);</span><br><span class="line">        name2 = <span class="string">"非静态name值"</span>;</span><br><span class="line">        System.out.println(<span class="string">"非静态代码块结束时的非静态变量值："</span>+name2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时编译代码执行的结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">刚运行到静态代码块时的静态变量值：null</span><br><span class="line">静态代码块结束时的静态变量值：静态name值</span><br><span class="line">刚运行到非静态代码块时的非静态变量值：null</span><br><span class="line">非静态代码块结束时的非静态变量值：非静态name值</span><br><span class="line">刚运行到构造器时的静态变量值：静态name值</span><br><span class="line">构造器结束时的静态变量值：这是一个无参的构造器</span><br></pre></td></tr></table></figure></p><p>由此可以看出，当我们声明的类成员变量是一个静态成员变量的时候，在调用构造器之前，我们的静态成员变量已经生成并初始化成相应的数据类型的默认值(即此处String对象的默认值位null)。<br>然后在静态代码块中，我们将静态变量赋值，然后程序跳转到非静态变量声明与赋值。再执行非静态代码块，最后直行到程序的无参构造器。</p><p>所以，通过此程序代码，我们得出结论：单个类的程序加载顺序是：静态变量–&gt;静态代码块–&gt;非静态变量–&gt;非静态代码块–&gt;构造器</p><h3 id="深入思考"><a href="#深入思考" class="headerlink" title="深入思考"></a>深入思考</h3><p>关于变量与代码块之间的的的关系，或者说根据我们上面的这段代码得出这个初步的结论我们还有待商榷，因为，我们的程序加载的顺序是自上而下的，<br>也就是说，我们的得到的这个结论有可能是因为我们习惯性的排版导致的，我们声明各部分的顺序偶可能影响我们得出的结论。为了确定我们程序的严谨性，<br>我们需要进一步的调整代码的顺序，来加强验证我们代码实验的逻辑严谨性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student2</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 静态代码块放到前面，此时name还未声明，所以会报错</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"刚运行到静态代码块时的静态变量值："</span>+name);</span><br><span class="line">        name = <span class="string">"静态name值"</span>;</span><br><span class="line">        System.out.println(<span class="string">"静态代码块结束时的静态变量值："</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">static</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个无参构造器</span></span><br><span class="line">    Student2()&#123;</span><br><span class="line">        System.out.println(<span class="string">"刚运行到构造器时的静态变量值："</span>+name);</span><br><span class="line">        name = <span class="string">"这是一个无参的构造器"</span>;</span><br><span class="line">        System.out.println(<span class="string">"构造器结束时的静态变量值："</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"刚运行到非静态代码块时的非静态变量值："</span>+name2);</span><br><span class="line">        name2 = <span class="string">"非静态name值"</span>;</span><br><span class="line">        System.out.println(<span class="string">"非静态代码块结束时的非静态变量值："</span>+name2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个非静态变量</span></span><br><span class="line">    String name2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        Student2 stu2 = <span class="keyword">new</span> Student2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码运行的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error:(6, 48) java: 非法前向引用</span><br></pre></td></tr></table></figure></p><p>此时将代码块拿到变量声明的前面我们的代码出现了错误提示，这说明了我们一开始得到的结论并不严谨，我们这里可以得出代码块的执行<br>是在变量声明之前的。所以，我们可以根据常识大胆的猜想，单个类程序加载的顺序是静态–&gt;非静态–&gt;构造器，其中变量声明与代码块的<br>执行顺序与代码前后位置有关，并没有严格的前后之分，程序员将代码写在前边的的先执行。</p><h3 id="验证猜想"><a href="#验证猜想" class="headerlink" title="验证猜想"></a>验证猜想</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student3</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个无参构造器</span></span><br><span class="line">    Student3()&#123;</span><br><span class="line">        System.out.println(<span class="string">"刚运行到构造器时的静态变量值："</span>+name);</span><br><span class="line">        name = <span class="string">"这是一个无参的构造器"</span>;</span><br><span class="line">        System.out.println(<span class="string">"构造器结束时的静态变量值："</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        name2 = <span class="string">"非静态name值"</span>;</span><br><span class="line">        System.out.println(<span class="string">"非静态代码块结束时的静态变量值："</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个非静态变量</span></span><br><span class="line">    String name2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"运行到静态代码块"</span>);</span><br><span class="line"><span class="comment">//        name = "静态代码块里赋的值";</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">static</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student3 stu3 = <span class="keyword">new</span> Student3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码执行的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">运行到静态代码块</span><br><span class="line">非静态代码块结束时的静态变量值：null</span><br><span class="line">刚运行到构造器时的静态变量值：null</span><br><span class="line">构造器结束时的静态变量值：这是一个无参的构造器</span><br></pre></td></tr></table></figure></p><p>基本验证了我们的猜想是正确的，但是在结尾我又做了一个有趣的测试。</p><p>###<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student3</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个无参构造器</span></span><br><span class="line">    Student3()&#123;</span><br><span class="line">        System.out.println(<span class="string">"刚运行到构造器时的静态变量值："</span>+name);</span><br><span class="line">        name = <span class="string">"这是一个无参的构造器"</span>;</span><br><span class="line">        System.out.println(<span class="string">"构造器结束时的静态变量值："</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        name2 = <span class="string">"非静态name值"</span>;</span><br><span class="line">        System.out.println(<span class="string">"非静态代码块结束时的静态变量值："</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个非静态变量</span></span><br><span class="line">    String name2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"运行到静态代码块"</span>);</span><br><span class="line">        name = <span class="string">"静态代码块里赋的值"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">static</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student3 stu3 = <span class="keyword">new</span> Student3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面代码执行的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">运行到静态代码块</span><br><span class="line">非静态代码块结束时的静态变量值：静态代码块里赋的值</span><br><span class="line">刚运行到构造器时的静态变量值：静态代码块里赋的值</span><br><span class="line">构造器结束时的静态变量值：这是一个无参的构造器</span><br></pre></td></tr></table></figure></p><p>也就是说在静态代码块里，我们无法引用后面的静态变量，但是我们可以对他进行赋值，并且在后面的非静态代码块里我们还可以取到里面的值，<br>再次做出假设，这是java虚拟机在编译时不让向前引用，此时的变量其实已经完成了声明初始化等一系列操作，只是通过不了编译而已。<br>所以我认为，我们最早得到的结论应该才是正确的Java程序整个加载流程的顺序。</p><h2 id="得出结论"><a href="#得出结论" class="headerlink" title="得出结论"></a>得出结论</h2><p>总结：在一个类中，初始化顺序为：</p><ol><li>静态变量，静态变量初始化；</li><li>静态代码块；</li><li>非静态变量初始化；</li><li>非静态代码块；</li><li>构造器。</li></ol><p>##最后<br>我得出的结论是，在构造器中不能使用使用非静态变量name的原因不是因为name此时未完成初始化，而是name其实是有值的，只不过编译时未发现赋值<br>的过程，这样的调用看似毫无意义（事实上我们应该不会这样调用，之所以研究这个纯属偶然），事实上在执行到这里的时候name是有值的（值为null）。<br>最后的代码验证：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line">Student()&#123;</span><br><span class="line">System.out.println(name);<span class="comment">//null</span></span><br><span class="line"><span class="comment">//this(name);</span></span><br><span class="line">System.out.println(<span class="string">"题目要求写一个无参的构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student(String name)&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Student stu1 = <span class="keyword">new</span> Student();</span><br><span class="line">Student stu2 = <span class="keyword">new</span> Student(<span class="string">"老大"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">null</span></span><br><span class="line">题目要求写一个无参的构造器</span><br></pre></td></tr></table></figure></p><p>果然，name的值是null。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">name = <span class="string">"老大"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student()&#123;</span><br><span class="line"><span class="comment">//System.out.println(name);//老大</span></span><br><span class="line">    <span class="comment">// this(name);//这样会报错</span></span><br><span class="line"><span class="keyword">this</span>(<span class="string">"老大"</span>);<span class="comment">//这样运行成功</span></span><br><span class="line"><span class="comment">//System.out.println("题目要求写一个无参的构造器");</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student(String name)&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Student stu1 = <span class="keyword">new</span> Student();</span><br><span class="line">System.out.print(stu1.name);</span><br><span class="line"><span class="comment">//Student stu2 = new Student("老大");</span></span><br><span class="line"><span class="comment">//System.out.println(stu2.getName());</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>综上所述：不要在无参构造里传进去一个参数，这样是不对的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在写构造器方法的时候，遇到了一个小问题，由这个问题引发了一连串的思考，在一个Java类中变量与类的初始化执行顺序是什么样的呢？&lt;/p&gt;
&lt;h2 id=&quot;发现问题&quot;&gt;&lt;a href=&quot;#发现问题&quot; class=&quot;headerlink&quot; title=&quot;发现问题&quot;&gt;&lt;/a&gt;发
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
</feed>
