<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jefflike&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-31T09:17:52.565Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jefflike</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java包装类</title>
    <link href="http://yoursite.com/2018/05/30/Java%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    <id>http://yoursite.com/2018/05/30/Java包装类/</id>
    <published>2018-05-30T12:44:21.000Z</published>
    <updated>2018-05-31T09:17:52.565Z</updated>
    
    <content type="html"><![CDATA[<h3 id="包装类的由来"><a href="#包装类的由来" class="headerlink" title="包装类的由来"></a>包装类的由来</h3><p>Java发明时正遇上C语言盛行的时候，因此Java保留/延续/借鉴了C语言中八种基本数据类型。<br><a id="more"></a><br>但是Java是一门面向对象的语言，<br>而八种基本数据类型不属于面向对象的范畴，但是因为基本数据类型有它的优势：（1）长度确定（2）计算效率高。<br>所以Java还是选择保留了基本数据类型。所以Java和python不同的是，Java里并不是“一切皆对象”的。<br>Java绝大部分的特性是为对象而设计的，例如：泛型，集合等，这些特性是不支持基本数据类型的。为了解决这样的矛盾，<br>Java为八种基本数据类型设计了对应的包装类型。</p><h4 id="基本数据类型与其对应的包装类"><a href="#基本数据类型与其对应的包装类" class="headerlink" title="基本数据类型与其对应的包装类"></a>基本数据类型与其对应的包装类</h4><ul><li>byte：Byte</li><li>short：Short</li><li>int：Integer</li><li>long：Long</li><li>float：Float</li><li>double：Double</li><li>char：Character</li><li><p>boolean：Boolean</p><p>这些包装类型定义在java.lang包下，所以我们可以直接调用。</p><h3 id="装箱与拆箱"><a href="#装箱与拆箱" class="headerlink" title="装箱与拆箱"></a>装箱与拆箱</h3><p>装箱就是把基本数据类型的数据装箱为包装类的对象。</p><ul><li>Integer num = new Integer(int的变量或值);<br>拆箱反过来把包装类型的对象，拆箱为基本数据类型的数据。</li><li>int m = Integer的对象.intValue();</li></ul></li><li>JDK1.5之前，只能用刚才的形式进行手动装箱和手动拆箱。</li><li>JDK1.5之后，开始支持自动装箱与自动拆箱.<br>JDK之前的手动装箱拆箱的操作：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1、创建一个包装类的对象</span></span><br><span class="line">        Integer i = <span class="keyword">new</span> Integer(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、手动装箱操作</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//需要把变量a的值存储到集合，或传给引用数据类型的形参时，那么就需要把a变成包装类对象</span></span><br><span class="line">        Integer num = <span class="keyword">new</span> Integer(a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、手动拆箱操作</span></span><br><span class="line">        Integer n1 = <span class="keyword">new</span> Integer(<span class="number">10</span>);</span><br><span class="line">        Integer n2 = <span class="keyword">new</span> Integer(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//例如：求和，对象不能直接相加,拆箱成基本数据类型</span></span><br><span class="line">        <span class="keyword">int</span> m1 = n1.intValue();</span><br><span class="line">        <span class="keyword">int</span> m2 = n2.intValue();</span><br><span class="line">        System.out.println(m1 + m2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>JDK1.5之后，自动拆箱，装箱<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//自动装箱，自动拆箱</span></span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">        Integer bNum = b;<span class="comment">//自动装箱//等价于 Integer bNum = new Integer(b);</span></span><br><span class="line"></span><br><span class="line">        Integer cNum = <span class="keyword">new</span> Integer(<span class="number">23</span>);</span><br><span class="line">        <span class="keyword">int</span> c = cNum;<span class="comment">//自动拆箱//等价于  int c = cNum.intValue();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5、演示错误</span></span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">12</span>;<span class="comment">//整型的值是可以赋值给double型的变量，自动类型转换</span></span><br><span class="line"><span class="comment">//Double dNUm = 12;//错误的  int类型的值和变量只能自动装箱为Integer</span></span><br><span class="line"><span class="comment">//Double dNUm = 12.0F;//错误的，12.0F只能自动装箱为Float</span></span><br><span class="line">        Double dNum = <span class="number">12.0</span>;<span class="comment">//可以</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意：装箱与拆箱的操作，只能与自己对应的基本数据类型和包装类进行。</p><h3 id="缓存的常量对象"><a href="#缓存的常量对象" class="headerlink" title="缓存的常量对象"></a>缓存的常量对象</h3><p>在python中也存在着一个维持的小数池，对于-128到127的值，引用的是同一个对象，按道理说，每new一个包装类的对象，那他就会在堆中<br>创建一个新的包装类对象，但是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 在堆中创建了两个Integer包装类对象，那么他们的地址肯定不同，比较一定是false</span></span><br><span class="line">        Integer i1 = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        Integer i2 = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        System.out.println(i1 == i2);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.比较的是基本数据类型的大小，不是比较内存地址了，大小相等</span></span><br><span class="line">        <span class="keyword">int</span> i3 = <span class="number">128</span>;</span><br><span class="line">        <span class="keyword">int</span> i4 = <span class="number">128</span>;</span><br><span class="line">        System.out.println(i3 == i4);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 不过是基本数据类型进行了自动装箱，本质上还是创建了两个包装类的对象，地址不同</span></span><br><span class="line">        Integer i5 = <span class="number">128</span>;</span><br><span class="line">        Integer i6 = <span class="number">128</span>;</span><br><span class="line">        System.out.println(i5 == i6);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 小于128的整型在方法区（暂且这么说）有一个常量池，都指向的是这个常量池对象，所以是同一个对象</span></span><br><span class="line">        <span class="keyword">int</span> i7 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i8 = <span class="number">1</span>;</span><br><span class="line">        System.out.println(i7 == i8);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 由于浮点数的存储机制不同，没有那么大的空间可以存常量，也不精确，所以覅浮点型是没有常量池的</span></span><br><span class="line">        Double d1 = <span class="number">2.0</span>;</span><br><span class="line">        Double d2 = <span class="number">2.0</span>;</span><br><span class="line">        System.out.println(d1 == d2);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        Boolean b1 = <span class="keyword">true</span>;</span><br><span class="line">        Boolean b2 = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(b1 == b2);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        Character c1 = <span class="string">'a'</span>;</span><br><span class="line">        Character c2 = <span class="string">'a'</span>;</span><br><span class="line">        System.out.println(c1 == c2);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 中文字符也是没有常量池的，字数太多了</span></span><br><span class="line">        Character c3 = <span class="string">'中'</span>;</span><br><span class="line">        Character c4 = <span class="string">'中'</span>;</span><br><span class="line">        System.out.println(c3 == c4);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>包装类对象可能存储缓存的常量对象：</li><li>Byte,Short,Integer,Long：-128~127</li><li>float，double：不缓存</li><li>Character：0~127</li><li>Boolean：true,false</li></ul><p>Integer 类除了在对象中包装了一个基本类型 int 的值，该类提供了多个方法，能在 int 类型和 String 类型之间互相转换。</p><p>基本数据类型与字符串类型之间的转换：</p><ul><li>（1）int与String</li><li>int i = Integer.parseInt(字符串);</li><li>int i = Integer.valueOf(str1);//隐含了自动拆箱</li><li>int j = new Integer(str1);//隐含了自动拆箱</li><li></li><li>（2）double与字符串</li><li>double d = Double.parseDouble(str3);</li></ul><p>包装类还提供了处理 类型时非常有用的其他一些常量。<br>  例如：</p><ul><li>(1)Integer</li><li>Integer.MAX_VALUE</li><li>Integer.MIN_VALUE</li><li>(2)Double</li><li>Double.MAX_VALUE</li><li>Double.MIN_VALUE等</li></ul><p>包装类还提供了处理 int 类型时非常有用的其他一些方法</p><pre><code>* Integer* （1）static String toBinaryString(int i) //转换为二进制* （2）static String toHexString(int i)  //转换为十六进制* （3）static String toOctalString(int i)  //转换为八进制* * Character* (1)Character.toUpperCase(c)* (2)Character.toLowerCase(c)</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;包装类的由来&quot;&gt;&lt;a href=&quot;#包装类的由来&quot; class=&quot;headerlink&quot; title=&quot;包装类的由来&quot;&gt;&lt;/a&gt;包装类的由来&lt;/h3&gt;&lt;p&gt;Java发明时正遇上C语言盛行的时候，因此Java保留/延续/借鉴了C语言中八种基本数据类型。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java异常处理</title>
    <link href="http://yoursite.com/2018/05/30/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2018/05/30/Java异常处理/</id>
    <published>2018-05-30T07:15:25.000Z</published>
    <updated>2018-05-30T12:39:43.730Z</updated>
    
    <content type="html"><![CDATA[<p>异常处理机制的目的是为了当程序发生异常时，使得程序不要崩溃，还能继续运行，可以通过提示用户等方式解决。</p><p>Java的异常处理机制的过程，原理：Java程序当某一句代码发生异常时，JVM会在该句代码的位置暂停下来，然后会根据异常的情况，<br>创建一个对象，这个对象会包含异常的类型、错误的信息等，然后JVM会抛出这个异常的对象。JVM会在这句代码的外围搜索有没有异常的处理的代码（例如：try…catch），<br>如果有对应的catch可以捕获这个异常的对象，那么就相当于这个异常被处理了。程序继续从try..catch下面继续运行。如果没有对应的catch可以捕获它，<br>那么当前代码的方法就会把这个异常对象，抛给上级（调用者），上级继续按照刚才的逻辑，先找是否有catch，如果有就捕获，从catch后继续运行，如果没有，<br>继续往上级抛异常直到main都没有能够catch它，那么程序就崩溃了。</p><h3 id="异常的超级父类"><a href="#异常的超级父类" class="headerlink" title="异常的超级父类"></a>异常的超级父类</h3><p>异常的超级父类是java.lang.Throwable。Throwable 类是 Java 语言中所有错误或异常的超类。只有当对象是此类（或其子类之一）的实例时，<br>才能通过 Java 虚拟机或者 Java throw 语句抛出。只有此类或其子类之一才可以是 catch 子句中的参数类型。 </p><h3 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h3><h4 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h4><p>重大错误：此类错误，不建议用try..catch等代码处理的，而是应该停下来，重新修正代码。</p><p>比较常见的有：VirtualMachineError(OutOfMemoryError堆内存溢出, StackOverflowError栈内存溢出)</p><p>OOM错误<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个内存特别大的数组，此时数组所占内存的长度就大于内存会报超出内存的错误</span></span><br><span class="line">        <span class="comment">// Exception in thread "main" java.lang.OutOfMemoryError: Requested array size exceeds VM limit</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[Integer.MAX_VALUE];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>栈溢出错误<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Exception in thread "main" java.lang.StackOverflowError</span></span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h4><p>异常，它指出了合理的应用程序想要捕获的条件。</p><p>异常也分为两种：</p><p>(1) 受检异常，也称为编译时异常</p><p>即在编译时必须throws或者try..catch处理，否则编译不通过。</p><p>(2) 非受检异常，也称为运行时异常</p><p>编译时不提示，运行过程中可能发生的异常，例如：NullPointerException、ArrayIndexOutOfBoundsException，ClassCastException等。</p><p>异常处理的两个动作：抓（try…catch），抛（throws）。</p><h4 id="try…catch"><a href="#try…catch" class="headerlink" title="try…catch"></a>try…catch</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">  可能发生异常的代码</span><br><span class="line">&#125;catch(异常的类型1   异常名e)&#123;</span><br><span class="line">  抓住该异常后处理的代码</span><br><span class="line">&#125;catch(异常的类型2   异常名e)&#123;</span><br><span class="line">   抓住该异常后处理的代码</span><br><span class="line">&#125;</span><br><span class="line"> ...</span><br><span class="line">finally&#123;</span><br><span class="line">无论是否发生异常，都要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(1) 如果try中没有异常，那么catch中的不会执行;</p><p>(2) 如果try中有异常，在发生异常的那句代码停下来，JVM会自动new一个异常的对象，抛出来，从上到下找对应的catch，如果类型匹配，<br>就进入到catch中，如果所有catch的类都不匹配，就相当于没有抓住异常，默认抛出上一级。其中catch的关系应该是一层大于一层的，否则<br>父类在前，子类在后，那么父类总会把子类的异常处理掉，那么默认子类异常毫无意义。</p><p>（3）finally块中的代码是不管try中是否发生异常，而且不管异常是否被catch，都要执行的代码。</p><p>关于finally不论什么情况都会在最后执行，相关练习：<br>练习1：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = test(<span class="number">4</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(a&lt;<span class="number">0</span> || b&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                result = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            result = a/b;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            result = a + b;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            result ++;</span><br><span class="line"><span class="keyword">return</span> result;<span class="comment">// 3</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一般函数在return后就结束了，但是在这里即使try中没有发生异常，并且执行到return，但是依然要执行完finally的内容才可以return，<br>reuturn的是finally返回的result值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = test(<span class="number">4</span>,<span class="number">0</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(a&lt;<span class="number">0</span> || b&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                result = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            result = a/b;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            result = a + b;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            result ++;</span><br><span class="line"><span class="keyword">return</span> result;<span class="comment">// 5</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，在catch中有return但是实际的return的结果还是会返回finally的result结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = test(<span class="number">4</span>,<span class="number">0</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(a&lt;<span class="number">0</span> || b&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                result = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            result = a/b;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            result = a + b;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            result ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果finally中没有return的值，那么返回的result要看有没有异常被捕获了。即使如此finnaly的值还是被执行了的，只是在执行++之前，return的<br>值已经在catch中返回了catch中的result的值了。</p><h4 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h4><p>与try…catch不同，try…catch相当于捕获到异常自己就处理了，类比一些编程学习人员，遇到问题自己就解决了。而throws则是发现问题即时上报，<br>相应的一部分人在学习编程时，只要一遇到任何问题，第一时间就抛出问题，不假思索的在学习群，社区或是论坛发出问题。一般的底层<br>的也就是小白可以拥有throws的权利，但是到了最上层的大佬（main）他必须要使用try…catch方法解决问题。大佬也解决不了的问题，<br>那一定是大问题，系统就崩了。</p><p>throws的语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 abstract 返回值类型  方法名（【形参列表】）【throws 异常列表】;</span><br><span class="line"></span><br><span class="line">【修饰符】 返回值类型  方法名（【形参列表】）【throws 异常列表】&#123;</span><br><span class="line">方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中RuntimeException及其子类可以不写【throws 异常列表】。其他类需要写【throws 异常列表】，异常列表可以是多个，顺序没有影响。</p><p>注意：在方法重写的时候，子类的重写的方法throws异常的类型 &lt;= 父类被重写的方法throws的异常类型。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> RuntimeException </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果子类的异常类型大于父类的异常类型，那么子类可能会抛出一个异常，这个异常的类型大于父类的异常的类型，父类则无法接受此异常，<br>就是类型转换异常了。</p><h4 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h4><p>除了jvm会抛异常以外，程序员也可以在代码中手动抛异常。抛异常的工具就是throw。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThrow</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"请输入被除数："</span>);</span><br><span class="line"><span class="keyword">int</span> a = input.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"请输入除数："</span>);</span><br><span class="line"><span class="keyword">int</span> b = input.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"除数不能为0"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">//e.printStackTrace();//标准的异常信息打印形式，包含异常类型、异常的错误信息，堆栈跟踪信息等，底层其实用的是System.err打印</span></span><br><span class="line">System.out.println(e);<span class="comment">//把异常对象当做普通对象打印，只包含异常类型、异常的错误信息。</span></span><br><span class="line">System.err.println(e);<span class="comment">//把异常对象红色打印，包含异常的类型和错误信息</span></span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out和System.err两个线程负责的，因此谁先出来，不一定。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="自定义Exception"><a href="#自定义Exception" class="headerlink" title="自定义Exception"></a>自定义Exception</h4><p>Java核心类库中无法涵盖所有的异常情况。某些异常情况，我也想要通过类型去说明问题，那么这个时候就可以自定义异常。</p><p>（1）必须继承Throwable或它的子类，我们写的一般是继承Exception或RuntimeException比较多。</p><p>（2）一般自定义异常需要实现java.io.Serializble接口（IO用），因为异常对象可能被记录日志中。</p><p>（3）自定义异常类型保留两个构造器：无参构造，另一个是为父类的message赋值的构造器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"用户名："</span>);</span><br><span class="line">String user = input.next();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"密码："</span>);</span><br><span class="line">String pwd = input.next();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">boolean</span> flag = login(user,pwd);</span><br><span class="line">System.out.println(<span class="string">"登录成功"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(<span class="string">"登录失败，原因是："</span> + e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String user, String pwd)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"jefflike"</span>.equals(user) &amp;&amp; <span class="string">"123"</span>.equals(pwd)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//用户名不存在，用户名和密码错误，服务器的问题等</span></span><br><span class="line"><span class="comment">//return false;</span></span><br><span class="line"><span class="comment">//用throw语句代替return 语句</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="string">"jefflike"</span>.equals(user))&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotExistException(<span class="string">"用户名不存在"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UsernameOrPasswordErrorException(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsernameNotExistException</span>  <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UsernameNotExistException</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UsernameNotExistException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsernameOrPasswordErrorException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UsernameOrPasswordErrorException</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UsernameOrPasswordErrorException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;异常处理机制的目的是为了当程序发生异常时，使得程序不要崩溃，还能继续运行，可以通过提示用户等方式解决。&lt;/p&gt;
&lt;p&gt;Java的异常处理机制的过程，原理：Java程序当某一句代码发生异常时，JVM会在该句代码的位置暂停下来，然后会根据异常的情况，&lt;br&gt;创建一个对象，这个对
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java注解</title>
    <link href="http://yoursite.com/2018/05/29/Java%E6%B3%A8%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/05/29/Java注解/</id>
    <published>2018-05-29T10:26:55.000Z</published>
    <updated>2018-05-29T12:00:29.264Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇博客提到了Java的枚举类型，Java的枚举类型从本质上实现是Java的类，所以可以看作是一个特殊的Java类。本篇博客要说的是Java里的注解，<br>注解（Annotation），此处说的注解与我们之前所说的单行注释，多行注释不是一类对象，单行注释，多行注释是编程人员将代码结构进行注释<br>方便日后代码维护所添加的对机器无用的代码块，而Annotation指的是，在代码中会起到相应的作用。</p><h3 id="注解三要素"><a href="#注解三要素" class="headerlink" title="注解三要素"></a>注解三要素</h3><ol><li>声明（一般是框架或者核心类库等声明了注解，我们自己也可以声明注解）；</li><li>使用注解（在程序的相应位置，按照一定的格式声明注解）；</li><li>读取注解（读取注解的程序一般声明注解的人写好的，我们不需要重复操作）。<h3 id="最基本的三个注解"><a href="#最基本的三个注解" class="headerlink" title="最基本的三个注解"></a>最基本的三个注解</h3>一、 @Override</li></ol><ul><li>声明：系统预定义的，JRE核心类库已经声明好了。在java.lang.Override中；</li><li>使用：在重写的方法上加注解，表示这个方法是重写的方法；</li><li>读取它：javac.exe读取它。</li></ul><p>作用：编译时会对这个方法进行格式检查，看这个方法是否复合重写的要求。</p><p>二、@SuppressWarnings</p><ul><li>声明：系统预定义的，JRE核心类库已经声明好了。在java.lang.SuppressWarnings中；</li><li>使用：在相应位置表示抑制xx警告；</li><li>读取：javac.exe读取它。</li></ul><p>三、@Deprecated</p><ul><li>声明：系统预定义的，JRE核心类库已经声明好了。在java.lang.Deprecated中；</li><li>使用：在相应位置使用，表示这个类、方法、属性（看使用的位置在哪）已经过时了，不再建议程序员使用它，以弹出警告的方式告知程序员这个xx已经过时了。</li><li>读取：javac.exe读取它。</li></ul><p>注意：已过时的一般来说，就是设计有问题，或者有重大bug，不建议程序员使用的。</p><h3 id="文档注解"><a href="#文档注解" class="headerlink" title="文档注解"></a>文档注解</h3><ul><li>声明：JRE核心类库已经声明好了。</li><li>使用：<br>通用：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 作者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>    另请参阅</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>  从xx版本开始</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 当前版本</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><p>方法上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 这是一个求两个整数的商的方法</span><br><span class="line"> * @param a int 被除数</span><br><span class="line"> * @param b int 除数</span><br><span class="line"> * @return int 返回a/b的商，只保留整数部分</span><br><span class="line"> * @throws ArithmeticException 当b=0时，会报算术异常</span><br><span class="line"> */</span><br><span class="line">public static int divide(int a, int b)throws ArithmeticException&#123;</span><br><span class="line">    return a/b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>读取：javadoc.exe读取。<h4 id="跟踪代码依赖性，替代原来-xml配置文件"><a href="#跟踪代码依赖性，替代原来-xml配置文件" class="headerlink" title="跟踪代码依赖性，替代原来.xml配置文件"></a>跟踪代码依赖性，替代原来.xml配置文件</h4>类似flask装饰器指向路由的使用，后续框架部分详细介绍。<h3 id="JUnit框架的注解"><a href="#JUnit框架的注解" class="headerlink" title="JUnit框架的注解"></a>JUnit框架的注解</h3></li><li>@Test </li></ul><p>声明：不是JRE提供的，而是有JUnit框架提供的；</p><p>使用：使用的方法必须是公共的、无参、void、非静态的；</p><ul><li>@BeforeClass</li></ul><p>静态方法上，在所有测试方法之前运行，而且一个类只运行一次。</p><ul><li>@AfterClass</li></ul><p>静态方法上，在所有测试方法之后运行，而且一个类只运行一次。</p><ul><li><p>@Before</p><p>非静态方法上，在所有的测试方法之前运行，一个测试方法运行一次。</p><ul><li>@After</li></ul><p>非静态方法上，在所有的测试方法之后运行，一个测试方法运行一次。</p><ul><li>@Ignore</li></ul><p>非静态方法上和静态方法上都可以，表示本次测试忽略本方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJUnit</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"helloworld"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">sum += i;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"sum = "</span> + sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@BeforeClass</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bc</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在所有测试方法之前运行，而且一个类只运行一次"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@AfterClass</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ac</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在所有测试方法之后运行，而且一个类只运行一次"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"每一个测试方法之前运行"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@After</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"每一个测试方法之后运行"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Ignore</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">c</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"不参与测试"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">TestJUnit t = <span class="keyword">new</span> TestJUnit();</span><br><span class="line">t.test();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>###自定义注解<br>注解三步走，声明，使用，读取，生成一个我们自己的注解也需要编写这三部分。</p><p>声明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 @interface 注解名&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><p> 给注解加的注解叫元注解，简称为注解的注解。用来注解我们自定义的注解的一些基本信息的。一共有四个。</p><ul><li><p>@Target：目标位置，用来指明某个注解将来可以加在哪些位置。这个目标位置存放在ElementType枚举类型的常量对象中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ElementType &#123;</span><br><span class="line">    <span class="comment">/** Class, interface (including annotation type), or enum declaration */</span></span><br><span class="line">    TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Field declaration (includes enum constants) */</span></span><br><span class="line">    FIELD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Method declaration */</span></span><br><span class="line">    METHOD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Formal parameter declaration */</span></span><br><span class="line">    PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Constructor declaration */</span></span><br><span class="line">    CONSTRUCTOR,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Local variable declaration */</span></span><br><span class="line">    LOCAL_VARIABLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Annotation type declaration */</span></span><br><span class="line">    ANNOTATION_TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Package declaration */</span></span><br><span class="line">    PACKAGE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Type parameter declaration</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Use of a type</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_USE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：TYPE（类型上，例如：类、接口等），FIELD（属性上），METHOD（方法上）等。</p></li><li><p>@Retention：生命周期，用来指明某个注解被使用后，可以保留到什么阶段。<br>三个阶段：RetentionPolicy枚举类型的三个常量对象：<br>SOURCE：源代码阶段  –&gt; CLASS：字节码阶段–&gt;RUNTIME：运行时阶段(只有这个阶段的注解，才能被反射代码读取到).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 源代码 ---&gt;.class --&gt;Class ---&gt; 运行时</span><br><span class="line">*    SOURCE     CLASS     RUNTIME</span><br><span class="line">*   javac.exe   类加载器            反射</span><br></pre></td></tr></table></figure></li><li><p>@Inherited：该注解是否可以被子类继承。</p></li><li>@Documented：该注解是否可以被javadoc.exe文档读取到API中。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDefineAnnotation</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//读取一个注解，我们自定义注解只能在运行时读取它，读取注解需要用到反射</span></span><br><span class="line">Class&lt;MyClass&gt; clazz = MyClass.class;</span><br><span class="line">MyAnnotation my = clazz.getAnnotation(MyAnnotation.class);</span><br><span class="line">System.out.println(my);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用一个注解</span></span><br><span class="line"><span class="meta">@MyAnnotation</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line"><span class="meta">@MyAnnotation</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义注解，声明一个注解</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="注解的配置参数"><a href="#注解的配置参数" class="headerlink" title="注解的配置参数"></a>注解的配置参数</h4><p>在注解中往往还需要传入参数。<br>声明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 @interface 注解名&#123;</span><br><span class="line">数据类型   配置参数名() 【default 默认值】;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>赋值:</p><ul><li>（1）如果一个注解声明了配置参数，而且没有默认值，那么在使用注解时必须手动给它赋值,赋值的标准格式：( 参数名 = 参数值);</li><li>（2）如果一个注解它的配置参数只有一个，而且参数名是value，那么可以在赋值的时候省略value=;</li><li><p>（3）配置参数的类型只能是八种基本数据类型、String类型、Class类型、enum类型、Annotation类型、以上所有类型的数组.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDefineAnnotation2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3、读取注解</span></span><br><span class="line">        Class&lt;YourClass&gt; c = YourClass.class;</span><br><span class="line">        YourAnnotation y = c.getAnnotation(YourAnnotation.class);</span><br><span class="line">        String value = y.value();</span><br><span class="line">        System.out.println(value);</span><br><span class="line"></span><br><span class="line">        Class&lt;OtherClass&gt; c2 = OtherClass.class;</span><br><span class="line">        YourAnnotation y2 = c2.getAnnotation(YourAnnotation.class);</span><br><span class="line">        String value2 = y2.value();</span><br><span class="line">        System.out.println(value2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2、使用</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@YourAnnotation</span>(<span class="string">"dingjie"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YourClass</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里因为@YourAnnotation的配置参数有默认值，可以不赋值</span></span><br><span class="line"><span class="meta">@YourAnnotation</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OtherClass</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、声明</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@interface</span> YourAnnotation&#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "jefflike"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇博客提到了Java的枚举类型，Java的枚举类型从本质上实现是Java的类，所以可以看作是一个特殊的Java类。本篇博客要说的是Java里的注解，&lt;br&gt;注解（Annotation），此处说的注解与我们之前所说的单行注释，多行注释不是一类对象，单行注释，多行注释是编程
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java的Enum数据类型</title>
    <link href="http://yoursite.com/2018/05/29/Java%E7%9A%84Enum%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/05/29/Java的Enum数据类型/</id>
    <published>2018-05-29T03:10:29.000Z</published>
    <updated>2018-05-31T06:38:57.717Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么使用枚举"><a href="#为什么使用枚举" class="headerlink" title="为什么使用枚举"></a>为什么使用枚举</h3><p>当某个类型的对象是固定有限的几个，而不是随意new时，那么这样的类型建议声明为枚举类型。这意味着：</p><ol><li>枚举类型的对象是public（别人可以访问的）静态final的Java对象；</li><li>枚举类型的对象的个数是固定个数；</li><li>不能随意的new对象，说明生成对象的类的构造器被私有化了。<a id="more"></a></li></ol><h3 id="JDK1-5之前的枚举"><a href="#JDK1-5之前的枚举" class="headerlink" title="JDK1.5之前的枚举"></a>JDK1.5之前的枚举</h3><p>值得一提的是，在JDK1.5之前并没有枚举类型，那么当时的枚举类型的实现就是使用的类的构造器私有化和枚举类型的固定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestEnumType</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Season s = Season.SPRING;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Season</span></span>&#123;</span><br><span class="line">    <span class="comment">//2、预先创建好固定的几个对象供外界使用,就是类似实现了枚举的类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SPRING = <span class="keyword">new</span> Season(<span class="string">"春天"</span>);<span class="comment">//调用私有的构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SUMMER = <span class="keyword">new</span> Season(<span class="string">"夏天"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season FALL = <span class="keyword">new</span> Season();<span class="comment">//调用私有的无参构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season WINTER = <span class="keyword">new</span> Season();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、构造器私有化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season</span><span class="params">(String description)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"SPRING:"</span> + description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】  enum 枚举类名&#123;</span><br><span class="line">常量对象列表【;</span><br><span class="line">其他成员</span><br><span class="line">】</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="枚举中的其他成员"><a href="#枚举中的其他成员" class="headerlink" title="枚举中的其他成员"></a>枚举中的其他成员</h4><p>枚举中的其他成员包括了：属性、方法、构造器、代码块、内部类，枚举就像是一个类一样，只是类的构造器私有化，不能够所以在类的外面<br>生成实例对象。<br>注意：枚举类型有默认的toString()，默认的实现是返回常量对象名。当然你可以选择重写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> enumTest&#123;</span><br><span class="line">    SPRING(Season.SPRING),<span class="comment">//调用有参构造器</span></span><br><span class="line">    SUMMER,<span class="comment">//调用的无参构造器</span></span><br><span class="line">    FALL;</span><br><span class="line">    <span class="keyword">private</span> Season seson;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、构造器私有化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">enumTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seson = Season.SPRING;</span><br><span class="line">        System.out.println(Season.SPRING);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">enumTest</span><span class="params">(Season seson)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seson = seson;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举类型</p><ul><li><p>所有的枚举类型的<code>直接</code>父类是java.lang.Enum类，意味着自定义的枚举类型是不能继承自己的父类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.lang.Enum源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Enum</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">E</span>&gt;&gt; <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;, <span class="title">Serializable</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>所有的枚举类型的构造器中都是会自动调用父类Enum的有参构造的。目的是为从父类继承的两个属性赋值：name（常量对象名）,ordinal（常量对象的顺序）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 父类中只有一个有参构造器</span><br><span class="line">    protected Enum(String name, int ordinal) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.ordinal = ordinal;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>所有的枚举类型支持比较大小，因为父类Enum实现了java.lang.Comparable接口默认按照常量对象的顺序比较大小（ordinal）。</p></li><li><p>所有的枚举类型都有两个方法：枚举类型 valueOf(常量对象名)和枚举类型[] values()。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static &lt;T extends Enum&lt;T&gt;&gt; T valueOf(Class&lt;T&gt; enumType,</span><br><span class="line">                                            String name) &#123;</span><br><span class="line">    T result = enumType.enumConstantDirectory().get(name);</span><br><span class="line">    if (result != null)</span><br><span class="line">        return result;</span><br><span class="line">    if (name == null)</span><br><span class="line">        throw new NullPointerException(&quot;Name is null&quot;);</span><br><span class="line">    throw new IllegalArgumentException(</span><br><span class="line">        &quot;No enum constant &quot; + enumType.getCanonicalName() + &quot;.&quot; + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>枚举类型可以实现自己的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEnumType3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Gender g = Gender.MAN;</span><br><span class="line">System.out.println(g.ordinal());</span><br><span class="line"></span><br><span class="line">Gender g2 = Gender.WOMAN;</span><br><span class="line">System.out.println(g2.ordinal());</span><br><span class="line"></span><br><span class="line">Gender g3 = Gender.valueOf(<span class="string">"MAN"</span>);</span><br><span class="line">System.out.println(g3);</span><br><span class="line"></span><br><span class="line">Gender[] values = Gender.values();</span><br><span class="line"><span class="keyword">for</span> (Gender gender : values) &#123;</span><br><span class="line">System.out.println(gender);</span><br><span class="line">gender.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Gender implements Runnable&#123;</span><br><span class="line">MAN&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"男人健步如飞"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,WOMAN&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"女人磨磨蹭蹭"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">public void run() &#123;</span></span><br><span class="line"><span class="comment">System.out.println("run..");</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;为什么使用枚举&quot;&gt;&lt;a href=&quot;#为什么使用枚举&quot; class=&quot;headerlink&quot; title=&quot;为什么使用枚举&quot;&gt;&lt;/a&gt;为什么使用枚举&lt;/h3&gt;&lt;p&gt;当某个类型的对象是固定有限的几个，而不是随意new时，那么这样的类型建议声明为枚举类型。这意味着：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;枚举类型的对象是public（别人可以访问的）静态final的Java对象；&lt;/li&gt;
&lt;li&gt;枚举类型的对象的个数是固定个数；&lt;/li&gt;
&lt;li&gt;不能随意的new对象，说明生成对象的类的构造器被私有化了。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>匿名内部类和局部内部类扩展</title>
    <link href="http://yoursite.com/2018/05/28/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB%E5%92%8C%E5%B1%80%E9%83%A8%E5%86%85%E9%83%A8%E7%B1%BB%E5%8F%AA%E8%83%BD%E8%AE%BF%E9%97%AEfinal%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2018/05/28/为什么匿名内部类和局部内部类只能访问final变量/</id>
    <published>2018-05-28T09:43:04.000Z</published>
    <updated>2018-05-28T11:29:01.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么匿名内部类和局部内部类只能访问final变量"><a href="#为什么匿名内部类和局部内部类只能访问final变量" class="headerlink" title="为什么匿名内部类和局部内部类只能访问final变量"></a>为什么匿名内部类和局部内部类只能访问final变量</h2><p>前面我们提到了Java里的内部类，也提到了关于局部内部类与匿名类，可以访问到所在方法的局部常量，并且在JDK8.0版本以后，即使你在<br>方法中并没有声明变量为final，默认编译的时候也是final类型的，即你不可以改变此方法中被局部内部类引用了的变量（就是变量）。<br>在这里就简单的说一说为什么Java会这样设定。</p><p>局部内部类或匿名内部类的对象可以被外部方法作为返回值，返回到方法外使用，那么如果这样的话，就会出现矛盾。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Change c = method();</span><br><span class="line"><span class="comment">//这里method()已经结束，按理说局部a早就失效，那么下面调用change()，打印出a的值就矛盾了，即change()访问了一个不存在的变量，这是不允许的。</span></span><br><span class="line">c.change();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Change <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span> <span class="keyword">implements</span> <span class="title">Change</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"a="</span>+a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Change in = <span class="keyword">new</span> Inner();</span><br><span class="line"><span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Change</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果说这里的a是一个变量，那么这里就已经产生矛盾了。</p><p>要理解这一点，我们需要知道局部内部类和匿名内部类访问局部变量的机制。</p><p>在java中，类是封装的，内部类也不例外。我们知道，非静态内部类能够访问外部类成员是因为它持有外部类对象的引用 Outer.this，<br>就像子类对像能够访问父类成员是持有父类对象引用super一样。局部内部类也和一般内部类一样，只持有了Outer.this，能够访问外部类成员，<br>但是它又是如何访问到局部变量的呢？</p><p>实际上java是将局部变量作为参数传给了局部内部类的构造函数，而将其作为内部类的成员属性封装在了类中。我们看到的内部类访问局<br>部变量实际上只是访问了自己的成员属性而已，这和类的封装性是一致的。那么上面的代码实际上是这样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Change c = method();</span><br><span class="line">c.change();</span><br><span class="line">        <span class="comment">//change()访问的就不是method()的局部变量a，</span></span><br><span class="line">       <span class="comment">//而是Inner内部类的成员变量a，只是它的值是method()的局部变量a的副本</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Change <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span> <span class="keyword">implements</span> <span class="title">Change</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实际上内部做了这样的操作，内部类的a只是方法中的copy，是内部类的私有变量，所以自己可以访问得到</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> a;</span><br><span class="line">Inner(<span class="keyword">int</span> a)&#123;</span><br><span class="line"><span class="keyword">this</span>.a =a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 调用的也是内部私有变量a，copy的a不是方法里面的变量a</span></span><br><span class="line">System.out.println(<span class="string">"a="</span> + <span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Change in = <span class="keyword">new</span> Inner(a);<span class="comment">//a=10</span></span><br><span class="line"><span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Change</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以，方法里的a改不改，和我内部类里面的a实际上没有关系。</p><p>那么，如果java不做这个特性，而是将这两种a认作是两个变量（常量），那么我们的代码是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Change c = method();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Change <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span> <span class="keyword">implements</span> <span class="title">Change</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span></span>&#123;</span><br><span class="line">a = <span class="number">20</span>; <span class="comment">//如果这里可以修改a的值</span></span><br><span class="line">System.out.println(<span class="string">"a="</span> + a);<span class="comment">//20</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Change in = <span class="keyword">new</span> Inner();</span><br><span class="line">in.change();</span><br><span class="line">System.out.println(“a=”+a);<span class="comment">//从阅读角度，这里预期打印a=20，然而只会打印出a=10，会让人误解，因为在Inner的change()中修改的是Inner内部类对象的this.a，它是method的局部变量a的副本</span></span><br><span class="line"><span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Change</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一眼看下去，我们一定认为，内部类引用了方法里的a，这样代码的可读性太差了。</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>为了保证阅读与运行的一致性，只能规定局部变量a（和副本a）不能修改，这样阅读和运行就可保持一致。那么就只能限定a为final，即定义为常量。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么匿名内部类和局部内部类只能访问final变量&quot;&gt;&lt;a href=&quot;#为什么匿名内部类和局部内部类只能访问final变量&quot; class=&quot;headerlink&quot; title=&quot;为什么匿名内部类和局部内部类只能访问final变量&quot;&gt;&lt;/a&gt;为什么匿名内部类和局部
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java内部类</title>
    <link href="http://yoursite.com/2018/05/26/Java%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>http://yoursite.com/2018/05/26/Java内部类/</id>
    <published>2018-05-26T11:35:26.000Z</published>
    <updated>2018-05-28T09:35:48.914Z</updated>
    
    <content type="html"><![CDATA[<p>Java类的成员分为五类：属性，方法，构造器，代码块，和内部类。</p><h3 id="为什么使用内部类"><a href="#为什么使用内部类" class="headerlink" title="为什么使用内部类"></a>为什么使用内部类</h3><p>首先类指的是：具有相同特性的事物抽象出的一类抽象概念，而接口则是具有某种相同功能的事物的抽象出的概念。但是事物与事物之间的关系除了<br>什么是什么的关系，还存在着什么有什么的关系，在python中是以组合的概念描述，在Java里，我们一般使用内部类的来表示，什么有什么的这种关系。<br>比如说，一个人的类，他有很多的器官，人的器官要使用人的血液，组织液等属性。人的器官使用人的心跳供血等方法，那么你可能会想，那么我们把<br>器官抽象成一个属性，然后在外部类中给他创建方法不就可以使用器官类了吗。但是在实际的环境中，器官也可能是是一类抽象出来的类，它<br>也是一个十分复杂的抽象概念，他是有细胞，组织等属性方法的类，不是一个外部类属性可以用一两个属性就能概括出来的概念。这时候我们需要<br>使用到Java的内部类来描述器官这个抽象概念。</p><h3 id="内部类特征"><a href="#内部类特征" class="headerlink" title="内部类特征"></a>内部类特征</h3><ol><li>在一个类内部存在着一个独立的另一类事物，他也有自己的数据描述，行为特征，那么我们使用内部类来描述这个内部独立类事物；</li><li>内部类只为外部类服务，单独存在没有意义，而且可以访问到外部类的私有属性方法等，为外部类服务。<h3 id="内部类的分类"><a href="#内部类的分类" class="headerlink" title="内部类的分类"></a>内部类的分类</h3></li><li>成员内部类（类中方法外）<ul><li>静态成员内部类</li><li>非静态成员内部类</li></ul></li><li>局部内部类（方法体{},方法形参(),代码块{}中）<ul><li>局部内部类</li><li>匿名内部类</li></ul></li></ol><h3 id="静态成员内部类"><a href="#静态成员内部类" class="headerlink" title="静态成员内部类"></a>静态成员内部类</h3><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">外部类&#123;</span><br><span class="line">    [修饰符] static class 静态内部类名 [extends 父类名] [implements 接口名]&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h4><p>private，缺省，protected，public，static，abstract，final。<br>注意：修饰方法的时候，abstract与static不可以一起使用。</p><h4 id="成员"><a href="#成员" class="headerlink" title="成员"></a>成员</h4><p>属性，方法，构造器，代码块，内部类</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>1.静态内部类使用外部类的成员<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String outField = <span class="string">"外部类非静态属性"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String outStaticField = <span class="string">"外部类静态属性"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIn</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//System.out.println("outField=" + outField);//无法使用非静态的属性，Non-static field 'outField' cannot be referenced from a static context</span></span><br><span class="line">            System.out.println(<span class="string">"outStaticField="</span> + outStaticField);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"内部类的静态方法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过上面一段代码，我们可以类比的出，在内部静态类中使用外部类的属性时，只可以使用外部类的静态属性，方法与代码块。</p><p>2.外部类中使用静态内部类的成员<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String outField = <span class="string">"外部类非静态属性"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String outStaticField = <span class="string">"外部类静态属性"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">// 1. 静态内部类使用外部类的属性</span></span><br><span class="line"><span class="comment">//System.out.println("outField=" + outField);//无法使用非静态的属性，Non-static field 'outField' cannot be referenced from a static context</span></span><br><span class="line">            System.out.println(<span class="string">"outStaticField="</span> + outStaticField);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"内部类的静态方法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.在外部类中使用内部类的属性与方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OutUseInt</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1. 使用内部类的静态属性与方法</span></span><br><span class="line">        Inner.methodIn();</span><br><span class="line">        <span class="comment">// 2. 使用内部类的非静态属性与方法</span></span><br><span class="line">        <span class="keyword">new</span> Inner().testIn();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//1. 使用内部类的静态属性与方法</span></span><br><span class="line">        Inner.methodIn();</span><br><span class="line">        <span class="comment">// 2. 使用内部类的非静态属性与方法</span></span><br><span class="line">        <span class="keyword">new</span> Inner().testIn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过上面的代码，我们可以看出来，在外部类使用内部类的静态与非静态属性方法时，与正常调用一个类的调用方式一致，一般要写在外部类的代码块或方法中。<br>使用类名调用静态属性方法，使用对象调用非静态属性与方法。</p><p>3.在外部类的外面使用静态内部类的成员<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 3.在外部类的外面调用内部类的静态属性方法</span></span><br><span class="line">        Outer.Inner.methodIn();</span><br><span class="line">        <span class="comment">// 创建内部类对象</span></span><br><span class="line">        Outer.Inner obj = <span class="keyword">new</span> Outer.Inner();</span><br><span class="line">        obj.testIn();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在主函数中（外部类的外面）调用内部类的静态方法与非静态方法，就是按照上述的方式。<br>关于内部类的类型声明时的数据类型名，是按照他生成的字节码来生成的，文件中生成的字节码为Outer$Inner.class。内部类的类型为Outer.Inner。</p><h3 id="非静态成员内部类"><a href="#非静态成员内部类" class="headerlink" title="非静态成员内部类"></a>非静态成员内部类</h3><h4 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">外部类&#123;</span><br><span class="line">[修饰符] class 静态内部类名   [extends 父类] [implements 接口名]&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="权限修饰符-1"><a href="#权限修饰符-1" class="headerlink" title="权限修饰符"></a>权限修饰符</h4><p>private，缺省，protected，public，abstract，final。</p><p>非静态那么static就不可以使用了。</p><h4 id="成员-1"><a href="#成员-1" class="headerlink" title="成员"></a>成员</h4><p>在非静态内部中不允许声明静态的成员（是因为加载的顺序的问题），除了静态的常量（常量的值在编译时已经确定了）。</p><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p>1.在非静态内部类中使用外部类的成员<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String outField = <span class="string">"外部类的非静态属性"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String outStaticField = <span class="string">"外部类的静态属性"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_VALUE = <span class="number">10000</span>;<span class="comment">//常量可以</span></span><br><span class="line"><span class="comment">//private static String inField;//非静态类中不能声明一个静态的属性或方法</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">// 1.非静态成员类中可以使用外部类的静态或非静态的属性与方法</span></span><br><span class="line">            System.out.println(<span class="string">"outField ="</span> + outField);</span><br><span class="line">            System.out.println(<span class="string">"outStaticField ="</span> + outStaticField);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>非静态成员内部类可以使用外部类的静态或非静态的属性与方法。</p><p>2.在外部类中使用非静态内部类的成员<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String outField = <span class="string">"外部类的非静态属性"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String outStaticField = <span class="string">"外部类的静态属性"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_VALUE = <span class="number">10000</span>;<span class="comment">//常量可以</span></span><br><span class="line"><span class="comment">//private static String inField;//非静态类中不能声明一个静态的属性或方法</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">// 1.非静态成员类中可以使用外部类的静态或非静态的属性与方法</span></span><br><span class="line">            System.out.println(<span class="string">"outField ="</span> + outField);</span><br><span class="line">            System.out.println(<span class="string">"outStaticField ="</span> + outStaticField);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此处不可以是一个静态的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Inner in = <span class="keyword">new</span> Inner();</span><br><span class="line">        in.testIn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为非静态成员内部类没有静态属性与方法，所以调用他的非静态的属性与方法时，都需要生成一个内部类的对象，再调用属性与方法，并且不可以<br>在外部类的静态代码块或方法里调用一个非静态的属性。<br>3.在外部类的外面使用非静态内部类的成员<br>分为两种方法：首先传统方法，在后面可能不适用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.在外部类的外面调用内部非静态成员内部类</span></span><br><span class="line">        <span class="comment">// 先创建的是外部类的对象</span></span><br><span class="line">        Outer out = <span class="keyword">new</span> Outer();</span><br><span class="line">        <span class="comment">// 方法一：创建一个内部非静态成员类的对象</span></span><br><span class="line">        Outer.Inner in = out.new Inner();<span class="comment">//这种写法略微有点怪异了，一般也不使用这种方式。但是这么做是可以的</span></span><br><span class="line">        <span class="comment">//最后就是使用了</span></span><br><span class="line">        in.testIn();</span><br><span class="line">        <span class="comment">// 方法二：getInner方法</span></span><br><span class="line">        Outer.Inner in1 = out.getInner();</span><br><span class="line">        in1.testIn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String outField = <span class="string">"外部类的非静态属性"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String outStaticField = <span class="string">"外部类的静态属性"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_VALUE = <span class="number">10000</span>;<span class="comment">//常量可以</span></span><br><span class="line"><span class="comment">//private static String inField;//非静态类中不能声明一个静态的属性或方法</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">// 1.非静态成员类中可以使用外部类的静态或非静态的属性与方法</span></span><br><span class="line">            System.out.println(<span class="string">"outField ="</span> + outField);</span><br><span class="line">            System.out.println(<span class="string">"outStaticField ="</span> + outStaticField);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//2.在外部类中调用非静态成员内部类的属性与方法</span></span><br><span class="line">        Inner in = <span class="keyword">new</span> Inner();</span><br><span class="line">        in.testIn();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Inner <span class="title">getInner</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Inner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上就是两种方法，如何在外部类的外部调用一个内部成员非静态类的属性与方法。后面一种get获取内部类的方式更为通用。<br>注意：非静态内部类的字节码文件名：外部类$内部类.class，非静态内部类的全名称：外部类.非静态内部类。</p><h3 id="有名字的局部内部类"><a href="#有名字的局部内部类" class="headerlink" title="有名字的局部内部类"></a>有名字的局部内部类</h3><h4 id="声明-2"><a href="#声明-2" class="headerlink" title="声明"></a>声明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">外部类&#123;</span><br><span class="line">    方法&#123;</span><br><span class="line">        【修饰符】   class 局部内部类  [extends 父类] [implements 接口名]&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明在方法中，代码块中都可以，一般都在方法中。</p><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p>abstract,final。</p><p>注意：局部内部类与局部变量进行类比，他是没有权限修饰符的，同时也不会出现静态的属性，并且他也是没有static修饰的，static修饰类的成员。</p><h4 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h4><p>1.在局部内部类中使用外部类的成员<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String outField;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String outStaticField;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;<span class="comment">//局部变量</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"常量"</span>;<span class="comment">//常量</span></span><br><span class="line"><span class="comment">//private static String info;//局部内部类没有静态的属性方法</span></span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="comment">// 1. 有名字的局部内部类调用外部类的属性与方法</span></span><br><span class="line">                System.out.println(<span class="string">"outField = "</span> + outField);</span><br><span class="line">                System.out.println(<span class="string">"outStaticField = "</span> + outStaticField);</span><br><span class="line">                System.out.println(<span class="string">"a = "</span> + a);<span class="comment">//使用外部类的局部变量</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此时不可以使用外部类的静态成员</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"常量"</span>;<span class="comment">//常量</span></span><br><span class="line">            </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIn</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//System.out.println("outField = " + outField);//方法是静态的，局部内部类则不能调用非静态的属性</span></span><br><span class="line">                System.out.println(<span class="string">"outStaticField = "</span> + outStaticField);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>限制：能不能使用外部类的非静态成员，看局部内部类所在的方法是否是静态的。</p><p>2.在外部类中使用局部内部类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String outField;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String outStaticField;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;<span class="comment">//局部变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Inner in = new Inner();//1.会报错，需要先声明后使用</span></span><br><span class="line"><span class="comment">//        in.testIn();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"常量"</span>;<span class="comment">//常量</span></span><br><span class="line"><span class="comment">//private static String info;//局部内部类没有静态的属性方法</span></span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="comment">// 1. 有名字的局部内部类调用外部类的属性与方法</span></span><br><span class="line">                System.out.println(<span class="string">"outField = "</span> + outField);</span><br><span class="line">                System.out.println(<span class="string">"outStaticField = "</span> + outStaticField);</span><br><span class="line">                System.out.println(<span class="string">"a = "</span> + a);<span class="comment">//使用外部类的局部变量</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Inner in = <span class="keyword">new</span> Inner();<span class="comment">//先声明后使用，有作用域</span></span><br><span class="line">        in.testIn();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInner</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//Inner in = new Inner();//2. 作用域隔离，注意作用=域</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"常量"</span>;<span class="comment">//常量</span></span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIn</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//System.out.println("outField = " + outField);//方法是静态的，局部内部类则不能调用非静态的属性</span></span><br><span class="line">                System.out.println(<span class="string">"outStaticField = "</span> + outStaticField);</span><br><span class="line"><span class="comment">//              System.out.println("a = " + a);//使用外部类的局部变量</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Inner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意：1.使用的方式类似于局部变量的使用，需要先定义再使用。2.注意内部类名称的作用域，错误的作用域是无法调用的。</p><p>3.在外部类的外面使用局部内部类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//A：使用Inner类型不可以</span></span><br><span class="line"><span class="comment">//Outer.Inner//错误的，没有这个字节码文件的生成</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//B：获取到Inner的对象，使用多态引用</span></span><br><span class="line">        Object obj = Outer.method();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意：1.在外部类的外面不可以使用局部内部类的类型；2.在外部类的外面可以获取到局部内部类的对象；</p><p>4.在局部内部类中可以使用所在方法/代码块的局部常量（final声明的）</p><ul><li>JDK1.8之前：必须手动加final</li><li>JDK1.8之后：编译器会默认自动给加上final，如果不可以加final，那么报错。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String outField;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String outStaticField;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;<span class="comment">//局部变量，实际上jdk8.0之后默认加了final，这是一个常量</span></span><br><span class="line">        <span class="comment">// a = 20; //不能修改这个值，修改了局部内部类就会报错了。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"常量"</span>;<span class="comment">//常量</span></span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"a = "</span> + a);<span class="comment">//使用所在方法/代码块的局部常量</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>注意：局部内部类的字节码文件名：外部类名+$编号+局部内部类名.class，我们无法直接表示出一个有名字局部内部类的类型和对象，所以需要我们<br>在方法中返回一个局部内部类的对象用于使用。</p><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><h4 id="声明-3"><a href="#声明-3" class="headerlink" title="声明"></a>声明</h4><p>创建对象和声明类同时进行，一个匿名内部类只能有一个唯一的对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new 父类(【实参列表】)&#123;&#125;</span><br><span class="line"></span><br><span class="line">new 父接口()&#123;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li>不存在修饰符；</li><li>创建对象与声明类同时进行，而且一个匿名内部类只有一个对象；</li><li>匿名内部类和局部内部类是一样的，可以用所在方法的局部常量（final）修饰<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAnonymousInner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这个f1指向的是Father的子类的对象</span></span><br><span class="line">        <span class="comment">//多态引用</span></span><br><span class="line">        Father f1 = <span class="keyword">new</span> Father()&#123;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(f1.getClass());<span class="comment">// class 包名.TestAnonymousInner$1</span></span><br><span class="line"></span><br><span class="line">        Father f2 = <span class="keyword">new</span> Father()&#123;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(f2.getClass());<span class="comment">// class 包名.TestAnonymousInner$2</span></span><br><span class="line"></span><br><span class="line">        Father f3 = <span class="keyword">new</span> Father()&#123;</span><br><span class="line">            <span class="comment">//重写父类的方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"子类3重写父类的方法"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        f3.test();<span class="comment">// 子类3重写父类的方法</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"父类的测试方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这里的f1和f2与f3指向的是三个不同的匿名对象，并且匿名对象里可以重写父类的方法，如果父类是一个抽象类或者接口，那么子类匿名类必须<br>要实现父类的抽象方法。</p><p>如果父类中只有一个有参构造器，那么子类匿名内部类则需要调用父类的有参构造器创建类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="comment">//只有一个有参构造</span></span><br><span class="line">    Father(String info)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"父类方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAnonymousInner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Father m = <span class="keyword">new</span> Father(<span class="string">"实参"</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h4><p>1.如果父类没有此方法，子类匿名内部类实现了这个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//多态引用，编译时按照父类编译</span></span><br><span class="line">Object obj = <span class="keyword">new</span> Object()&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"匿名内部类的测试方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//obj.test();//错误的,父类Object中没有test()</span></span><br><span class="line"><span class="comment">//对象.方法()</span></span><br><span class="line"><span class="comment">//匿名内部类的匿名对象</span></span><br><span class="line"><span class="keyword">new</span> Object()&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"匿名内部类的测试方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;.test();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.如果父类也有此方法，子类匿名内部类重写了这个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUse2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Fu f = <span class="keyword">new</span> Fu()&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"子类"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">f.test();<span class="comment">//子类</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"父类"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.匿名类作形参<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUse3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//method();//实参应该是MyInter类型的一个对象，因为接口不能直接创建对象，应该传它的实现类的对象</span></span><br><span class="line">method(<span class="keyword">new</span> MyInter()&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"MyInter实现类重写了test方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(MyInter my)</span></span>&#123;</span><br><span class="line">my.test();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInter</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="知识巩固"><a href="#知识巩固" class="headerlink" title="知识巩固"></a>知识巩固</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：这是一个外部类，里面声明了一个内部类，那么如果我想要继承内部类Inner那么，我们要怎么操作呢？</p><ol><li>继承的语法格式：class 子类名  extends  父类名{}</li><li>非静态内部类的全名称：   外部类名.内部类名</li><li>继承抽象类：必须重写抽象类的抽象方法</li><li>要调用非静态内部类的构造器，需要外部类的对象</li><li>子类继承父类时，一定在子类的构造器的首行，一定要调用父类的构造器<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInner</span> <span class="keyword">extends</span> <span class="title">Outer</span>.<span class="title">Inner</span></span>&#123;</span><br><span class="line"><span class="comment">/*MyInner()&#123;</span></span><br><span class="line"><span class="comment">new Outer().super();</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line">    MyInner(Outer out)&#123;</span><br><span class="line">        out.<span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写抽象类的抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>注意：最后两点容易被忽视，继承内部类的时候要调用非静态内部类的构造器，需要外部类的对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java类的成员分为五类：属性，方法，构造器，代码块，和内部类。&lt;/p&gt;
&lt;h3 id=&quot;为什么使用内部类&quot;&gt;&lt;a href=&quot;#为什么使用内部类&quot; class=&quot;headerlink&quot; title=&quot;为什么使用内部类&quot;&gt;&lt;/a&gt;为什么使用内部类&lt;/h3&gt;&lt;p&gt;首先类指的是
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Interface实现多继承</title>
    <link href="http://yoursite.com/2018/05/25/Interface%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2018/05/25/Interface实现多继承/</id>
    <published>2018-05-25T10:10:21.000Z</published>
    <updated>2018-05-25T12:05:01.016Z</updated>
    
    <content type="html"><![CDATA[<h3 id="接口的概念"><a href="#接口的概念" class="headerlink" title="接口的概念"></a>接口的概念</h3><p>在Java的面向对象里，类的继承关系是单继承的，与python的多继承不同，单继承的概念比较狭隘，在实际的环境里单继承的设计<br>也不适用，Son不仅会继承father的属性，同时son也会继承mother的属性，而这种情况下，单继承就做不到让两个父类的属性都被子类继承了。<br>不仅如此，在类抽象父类的过程中，鸭子可以水中游，船也可以水中游，但是鸭子和船却不能很好的抽象出一个合理的父类来。</p><p>接口使得很多没有父子类关系的类型对象，可以通过某个接口（标准）的类型，实现统一管理。<br>简单的来说，我认为Java设计出接口的概念是实现多继承的一种方式，同时也是实现鸭子类型的一种方式。</p><h3 id="接口的定义与继承"><a href="#接口的定义与继承" class="headerlink" title="接口的定义与继承"></a>接口的定义与继承</h3><p>接口和类是同一个级别的概念。可以理解为特殊的类，特殊的抽象类。<br>调用的语法与声明class基本一致，只是将class关键字换成了interface。</p><p>定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] interface 接口名&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>继承：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] class 实现类   implements 父接口名&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[修饰符] class 实现类   implements 父接口名1，父接口名2，...&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[修饰符] class 实现类  extends 父类   implements 父接口名1，父接口名2，...&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="接口的特点"><a href="#接口的特点" class="headerlink" title="接口的特点"></a>接口的特点</h3><ol><li>接口不能直接实例化，即不能直接创建对象(与抽象类类似);</li><li><p>接口中的成员：</p><p> JDK1.8之前：接口中的成员只有三类：</p><ul><li>（1）公共的静态的常量：public static final，这几个修饰符可以省略</li><li>（2）公共的抽象的方法：public abstract，这两个修饰符可以省略</li><li>（3）公共的内部接口</li></ul></li><li>设计接口的目的就是用来被实现的。<ul><li>一个类实现了接口，就要求这个类必须重写（实现）接口的抽象方法，否则这个类也得是个抽象类。</li></ul></li><li>一个类可以同时实现很多个接口(类似于多继承)。</li><li>一个类可以同时继承父类，又实现接口们。如果继承和实现同时存在，继承优先级更高。</li><li>接口与实现类的对象之间构成多态引用。</li><li>接口可以继承接口，而且可以继承多个接口。</li></ol><h3 id="coding理解interface的作用"><a href="#coding理解interface的作用" class="headerlink" title="coding理解interface的作用"></a>coding理解interface的作用</h3><p>我现在想写一个可以为任意数组排序的一个工具，但是不同类型的数组的排序要怎么来完成是一个问题，假设我有一个学生对象的数组，那么对于这个<br>学生对象的数组排序，我是按照年龄排序还是按照学号排序，再或者我下一次放入一个全是整形的数组进行排序，那么我们如何让我的这个工具类<br>都可以正常的运行呢。<br>定义一个接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 我们定义的这个接口定义了一个规范，实现我们的这个接口的类都必须实现自己的一套排序方式</span></span><br><span class="line"><span class="comment">* 并且大小顺序按照此规则来定</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SortAble</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 规定：当前对象this 和 指定对象obj比较大小时，</span></span><br><span class="line"><span class="comment">     * 当 this “大于” obj时，返回正整数</span></span><br><span class="line"><span class="comment">     * 当 this “小于” obj时，返回负整数</span></span><br><span class="line"><span class="comment">     * 当 this “等于” obj时，返回零</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object obj)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定义一个学生类，按照接口定义的要求实现比较的细节：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Sortable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Student [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现接口，标准的抽象方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="comment">//this的学生对象和obj的学生对象进行比较大小，按照学号比较</span></span><br><span class="line">Student other = (Student) obj;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.id &gt; other.id)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.id &lt; other.id)&#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现排序的细节：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArrays</span> </span>&#123;</span><br><span class="line"><span class="comment">//功能：为任意类型的数组进行从小到大排序</span></span><br><span class="line"><span class="comment">//参数：Object[]</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Object[] arr)</span></span>&#123;</span><br><span class="line"><span class="comment">//冒泡排序：从小到大</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length-i; j++) &#123;</span><br><span class="line"><span class="comment">//如果arr[j]和arr[j+1]两个对象符合Sortable标准</span></span><br><span class="line"><span class="comment">//那么，我们就可以把arr[j]转成Sortable类型</span></span><br><span class="line">Student s = (Student) arr[j];<span class="comment">//这两种转换都可以</span></span><br><span class="line"><span class="comment">//Sortable s = (Sortable) arr[j];</span></span><br><span class="line"><span class="comment">//if(arr[j] &gt; arr[j+1])&#123;//if(前面的元素 》 后面的元素)&#123;</span></span><br><span class="line"><span class="keyword">if</span>(s.compare(arr[j+<span class="number">1</span>]) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">Object temp = arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后我们可以进行测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMyArrays</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student[] students = <span class="keyword">new</span> Student[<span class="number">3</span>];</span><br><span class="line">        students[<span class="number">0</span>] = <span class="keyword">new</span> Student(<span class="number">4</span>,<span class="string">"张三"</span>);</span><br><span class="line">        students[<span class="number">1</span>] = <span class="keyword">new</span> Student(<span class="number">1</span>,<span class="string">"李四"</span>);</span><br><span class="line">        students[<span class="number">2</span>] = <span class="keyword">new</span> Student(<span class="number">5</span>,<span class="string">"丁杰"</span>);</span><br><span class="line"></span><br><span class="line">        MyArrays.sort(students);</span><br><span class="line">        <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Student [id=1, name=李四]</span><br><span class="line">Student [id=4, name=张三]</span><br><span class="line">Student [id=5, name=丁杰]</span><br></pre></td></tr></table></figure></p><p>通过上面的例子我们可以的出结论，只要是我们实现了接口定义的compare()方法，那么我们的类实例出的对象就可以进行排序输出了。</p><h3 id="JDK8后的接口特性"><a href="#JDK8后的接口特性" class="headerlink" title="JDK8后的接口特性"></a>JDK8后的接口特性</h3><p>接口成员除了公共的静态的常量：public static final，公共的抽象的方法：public abstract，公共内部接口以外又增加了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">interface MyInter&#123;</span><br><span class="line">//静态方法,通过接口名进行调用。</span><br><span class="line">public static void method()&#123;</span><br><span class="line">System.out.println(&quot;接口中允许有静态方法&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//默认方法,通过实现类的对象调用。子类可以不实现就直接调用，子类也可以进行重写</span><br><span class="line">public default void test()&#123;</span><br><span class="line">System.out.println(&quot;接口的默认方法&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//抽象方法</span><br><span class="line">public abstract void fangFa();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>默认方法：当接口的多个实现类关于某个抽象方法的实现是一样的，那么可以在接口中给出默认实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInterface</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyInter.method();</span><br><span class="line"></span><br><span class="line">MyImpl my = <span class="keyword">new</span> MyImpl();</span><br><span class="line">my.fangFa();</span><br><span class="line">my.test();</span><br><span class="line"></span><br><span class="line">OtherImpl other = <span class="keyword">new</span> OtherImpl();</span><br><span class="line">other.test();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInter</span></span>&#123;</span><br><span class="line"><span class="comment">//静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"接口中允许有静态方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认方法,</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"接口的默认方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fangFa</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyImpl</span> <span class="keyword">implements</span> <span class="title">MyInter</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fangFa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"实现类重写接口的抽象方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OtherImpl</span> <span class="keyword">implements</span> <span class="title">MyInter</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写接口中的默认方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"重写接口的默认方法......"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fangFa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"实现类重写接口的抽象方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">接口中允许有静态方法</span><br><span class="line">实现类重写接口的抽象方法</span><br><span class="line">接口的默认方法</span><br><span class="line">重写接口的默认方法......</span><br></pre></td></tr></table></figure></p><h3 id="继承类与接口时遇到的冲突"><a href="#继承类与接口时遇到的冲突" class="headerlink" title="继承类与接口时遇到的冲突"></a>继承类与接口时遇到的冲突</h3><h4 id="一个类同时实现的多个接口都有一个一样的默认方法"><a href="#一个类同时实现的多个接口都有一个一样的默认方法" class="headerlink" title="一个类同时实现的多个接口都有一个一样的默认方法"></a>一个类同时实现的多个接口都有一个一样的默认方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProblem1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MySub m = <span class="keyword">new</span> MySub();</span><br><span class="line">m.method();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"A接口的默认方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"B接口的默认方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现了A和B，A和B都有自己的默认方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySub</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public void method() &#123;</span></span><br><span class="line"><span class="comment">A.super.method();//保留A的方法实现</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public void method() &#123;</span></span><br><span class="line"><span class="comment">B.super.method();//保留B的方法实现</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public void method() &#123;</span></span><br><span class="line"><span class="comment">A.super.method();//保留A的方法实现</span></span><br><span class="line"><span class="comment">B.super.method();//也保留B的方法实现</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//选择C</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我选择其他"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承的父类与实现接口中的默认方法一样"><a href="#继承的父类与实现接口中的默认方法一样" class="headerlink" title="继承的父类与实现接口中的默认方法一样"></a>继承的父类与实现接口中的默认方法一样</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProblem2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Sub sub = <span class="keyword">new</span> Sub();</span><br><span class="line">sub.method();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">myInter</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"接口中的默认方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"父类和接口的默认方法一样的方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Father</span> <span class="keyword">implements</span> <span class="title">myInter</span></span>&#123;</span><br><span class="line"><span class="comment">//(1)默认保留的是父类</span></span><br><span class="line"><span class="comment">//(2)明确保留父类的</span></span><br><span class="line"><span class="comment">/*public void method()&#123;</span></span><br><span class="line"><span class="comment">super.method();</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(3)明确保留接口的</span></span><br><span class="line"><span class="comment">/*public void method()&#123;</span></span><br><span class="line"><span class="comment">myInter.super.method();</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(4)两者都不要，其他</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"其他"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;接口的概念&quot;&gt;&lt;a href=&quot;#接口的概念&quot; class=&quot;headerlink&quot; title=&quot;接口的概念&quot;&gt;&lt;/a&gt;接口的概念&lt;/h3&gt;&lt;p&gt;在Java的面向对象里，类的继承关系是单继承的，与python的多继承不同，单继承的概念比较狭隘，在实际的环境里单继
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java程序初始化的顺序（二）</title>
    <link href="http://yoursite.com/2018/05/23/Java%E7%A8%8B%E5%BA%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E9%A1%BA%E5%BA%8F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2018/05/23/Java程序初始化的顺序（二）/</id>
    <published>2018-05-23T15:42:54.000Z</published>
    <updated>2018-05-30T14:50:10.721Z</updated>
    
    <content type="html"><![CDATA[<p>之前的一篇博客里我写了关于在一个类中的程序初始化顺序，但是在Java的面向对象里，类之间还存在着继承的关系。所以关于程序的初始化顺序，我们可以<br>再细划分为：父类静态变量，父类的静态代码块，父类构造器，父类非静态变量，父类非静态代码块，子类静态变量，子类静态代码块，子类构造器，子类非静态代码块<br>和子类非静态代码块。本篇博客我们讨论的就是关于程序初始化的过程中，上述的成员在初始化加载先后顺序。<br><a id="more"></a><br>在此前我们讨论得出的结论：在一个类中，Java程序加载的顺序是：静态变量–&gt;静态代码块–&gt;非静态变量–&gt;非静态代码块–&gt;构造器.<br>父类的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">    <span class="comment">//父类与子类都在一个包中，这里我们就使用default修饰符</span></span><br><span class="line">    <span class="comment">//这是一个父类的静态变量,此时还是初始化的默认值null</span></span><br><span class="line">    <span class="keyword">static</span> String superStaticVariale;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块，给String赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        superStaticVariale = <span class="string">"父类静态代码块赋值成功"</span>;</span><br><span class="line">        System.out.println(<span class="string">"此时运行的是父类的静态代码块："</span>+superStaticVariale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造，覆盖静态代码块的值</span></span><br><span class="line">    SuperClass()&#123;</span><br><span class="line">        superStaticVariale = <span class="string">"父类构造器赋值成功"</span>;</span><br><span class="line">        System.out.println(<span class="string">"此时运行的是父类的构造器："</span>+superStaticVariale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个非静态变量</span></span><br><span class="line">    String superVariale;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        superVariale = <span class="string">"父类非静态代码块赋值"</span>;</span><br><span class="line">        System.out.println(<span class="string">"此时运行的是父类的非静态代码块："</span>+superVariale);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>子类的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> String subStaticVariale;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块，给String赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        subStaticVariale = <span class="string">"子类静态代码块赋值成功"</span>;</span><br><span class="line">        System.out.println(<span class="string">"此时运行的是子类的静态代码块："</span>+subStaticVariale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造，覆盖静态代码块的值</span></span><br><span class="line">    SubClass()&#123;</span><br><span class="line">        superStaticVariale = <span class="string">"子类构造器赋值成功"</span>;</span><br><span class="line">        System.out.println(<span class="string">"此时运行的是子类的构造器："</span>+superStaticVariale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个非静态变量</span></span><br><span class="line">    String subVariale;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        subVariale = <span class="string">"子类非静态代码块赋值"</span>;</span><br><span class="line">        System.out.println(<span class="string">"此时运行的是子类非静态代码块："</span>+subVariale);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SubClass s = <span class="keyword">new</span> SubClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">此时运行的是父类的静态代码块：父类静态代码块赋值成功</span><br><span class="line">此时运行的是子类的静态代码块：子类静态代码块赋值成功</span><br><span class="line">此时运行的是父类的非静态代码块：父类非静态代码块赋值</span><br><span class="line">此时运行的是父类的构造器：父类构造器赋值成功</span><br><span class="line">此时运行的是子类非静态代码块：子类非静态代码块赋值</span><br><span class="line">此时运行的是子类的构造器：子类构造器赋值成功</span><br></pre></td></tr></table></figure></p><p>很显然，在继承关系中，代码的加载顺序是：父类的静态变量–&gt;父类的静态代码块–&gt;子类静态变量–&gt;子类的静态代码块–&gt;父类非静态变量–&gt;父类的非静态代码块–&gt;父类的构造器<br>–&gt;子类非静态变量–&gt;子类非静态代码块–&gt;子类构造器</p><p>进一步测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SubClass s = <span class="keyword">new</span> SubClass();</span><br><span class="line">        SubClass s1 = <span class="keyword">new</span> SubClass();</span><br><span class="line">        SubClass s2 = <span class="keyword">new</span> SubClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">此时运行的是父类的静态代码块：父类静态代码块赋值成功</span><br><span class="line">此时运行的是子类的静态代码块：子类静态代码块赋值成功</span><br><span class="line">此时运行的是父类的非静态代码块：父类非静态代码块赋值</span><br><span class="line">此时运行的是父类的构造器：父类构造器赋值成功</span><br><span class="line">此时运行的是子类非静态代码块：子类非静态代码块赋值</span><br><span class="line">此时运行的是子类的构造器：子类构造器赋值成功</span><br><span class="line">此时运行的是父类的非静态代码块：父类非静态代码块赋值</span><br><span class="line">此时运行的是父类的构造器：父类构造器赋值成功</span><br><span class="line">此时运行的是子类非静态代码块：子类非静态代码块赋值</span><br><span class="line">此时运行的是子类的构造器：子类构造器赋值成功</span><br><span class="line">此时运行的是父类的非静态代码块：父类非静态代码块赋值</span><br><span class="line">此时运行的是父类的构造器：父类构造器赋值成功</span><br><span class="line">此时运行的是子类非静态代码块：子类非静态代码块赋值</span><br><span class="line">此时运行的是子类的构造器：子类构造器赋值成功</span><br></pre></td></tr></table></figure></p><p>得出结论：<br>父类与子类的静态代码都只执行一次，然后非静态代码块与构造器是组合出现的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前的一篇博客里我写了关于在一个类中的程序初始化顺序，但是在Java的面向对象里，类之间还存在着继承的关系。所以关于程序的初始化顺序，我们可以&lt;br&gt;再细划分为：父类静态变量，父类的静态代码块，父类构造器，父类非静态变量，父类非静态代码块，子类静态变量，子类静态代码块，子类构造器，子类非静态代码块&lt;br&gt;和子类非静态代码块。本篇博客我们讨论的就是关于程序初始化的过程中，上述的成员在初始化加载先后顺序。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Go语言Array与Slice</title>
    <link href="http://yoursite.com/2018/05/21/Go%E8%AF%AD%E8%A8%80Array%E4%B8%8ESlice/"/>
    <id>http://yoursite.com/2018/05/21/Go语言Array与Slice/</id>
    <published>2018-05-21T14:35:12.000Z</published>
    <updated>2018-05-30T14:50:10.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组基础"><a href="#数组基础" class="headerlink" title="数组基础"></a>数组基础</h2><h3 id="为什么要讨论Go语言的数组"><a href="#为什么要讨论Go语言的数组" class="headerlink" title="为什么要讨论Go语言的数组"></a>为什么要讨论Go语言的数组</h3><p>在其他语言里，比如Java和python里数组(列表)，都是引用传递，但是到了Go语言里，数组的传递方式依然是值传递。那么值传递的数组是怎么使用的呢？<br>这篇文章里简单的整理一下Go语言的数组的使用与其配合的Slice的工作原理。<br><a id="more"></a></p><h3 id="数组定义的三种方式"><a href="#数组定义的三种方式" class="headerlink" title="数组定义的三种方式"></a>数组定义的三种方式</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.定义一个数组，并赋值</span></span><br><span class="line"><span class="keyword">var</span> arr1 [<span class="number">5</span>]<span class="keyword">int</span><span class="comment">//[0 0 0 0 0]</span></span><br><span class="line"><span class="comment">//var arr1 = [5]int&#123;1,2,3,4,5&#125;//[1 2 3 4 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.:=要给数组赋初值</span></span><br><span class="line">arr2 := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;<span class="comment">//[1 2 3]</span></span><br><span class="line">fmt.Println(arr1, arr2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.奇葩的赋值方式，但是好用，不确定数组的长度</span></span><br><span class="line">arr3 := [...]<span class="keyword">int</span>&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">10</span>&#125;<span class="comment">//[2 4 6 7 10]</span></span><br><span class="line">fmt.Println(arr3)</span><br></pre></td></tr></table></figure><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.数组的遍历,长度为len()</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(arr2);i++&#123;</span><br><span class="line">fmt.Println(arr2[i])<span class="comment">//1   2    3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.range获取数组的下标，遍历数组</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="keyword">range</span> arr2&#123;</span><br><span class="line">fmt.Println(arr2[i])<span class="comment">//1   2    3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.range还可以获得数组的值</span></span><br><span class="line"><span class="keyword">for</span> i, v:=<span class="keyword">range</span> arr2&#123;</span><br><span class="line">fmt.Println(i, v)<span class="comment">//1   2    3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.只要v的情况,_在Go语言中是一种通用方法</span></span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> arr2&#123;</span><br><span class="line">sum += v</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数内传入数组"><a href="#函数内传入数组" class="headerlink" title="函数内传入数组"></a>函数内传入数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go语言的数组是值类型的，也就是说，在函数内是不会改变函数外调用的数组的值的</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">array2</span><span class="params">( arr [3]<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"><span class="keyword">for</span> _,v :=<span class="keyword">range</span> arr&#123;</span><br><span class="line">fmt.Println(v)<span class="comment">//100,3,4,此处相当于将复制得来的数组改变了，但是外层的数组并没有改变</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//var arr1 [5]int</span></span><br><span class="line">arr2 := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">array1()</span><br><span class="line"><span class="comment">//array2(arr1)//这里是会报错的，array2函数需要传入一个长度为3的数组，go语言里认为长度为3和长度为5的数组不是一个类型的，所以会飘红</span></span><br><span class="line">array2(arr2)</span><br><span class="line">fmt.Println(arr2)<span class="comment">//[2 3 4]</span></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>func内传入的形参是一个固定长度的数组，并且传递实参的时候只能传递一个相同长度的数组作为实参传递，否则程序会报错；</li><li>在函数中修改了数组的值，但是实际作为实参的数组的值却没有发生变化，这说明了数组只是传递了值，而不是将整个对象引用过去。<br>形参copy了一个新的数组加以修改，而不是在原有的数组上进行修改。<h3 id="数组的“引用传递”"><a href="#数组的“引用传递”" class="headerlink" title="数组的“引用传递”"></a>数组的“引用传递”</h3>Java与python中的数组本质上是一个对象，在引用传递的过程中，实际赋值操作时是将对象指向堆空间的内存地址进行传递，那么被赋值对象<br>实际上与原对象指向的是同一块堆内存。修改其中的一个，另外一个也会相应的发生变化，这就是引用传递。<br>Go实现类似应用传递的本质与上述的方法理论基本一致。Go指针在此处的作用大抵就是完成了上述的操作。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">array3</span><span class="params">( arr *[3]<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"><span class="keyword">for</span> _,v :=<span class="keyword">range</span> arr&#123;</span><br><span class="line">fmt.Println(v)<span class="comment">//100,3,4,此处相当于将复制得来的数组改变了，但是外层的数组并没有改变</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//array3接收的是一个数组的指针，所以我们传一个arr的地址值进去</span></span><br><span class="line">array3(&amp;arr2)</span><br><span class="line">fmt.Println(arr2)<span class="comment">//[100 3 4]，此时是相当于引用传递的，所以会改变数组的值</span></span><br></pre></td></tr></table></figure></li></ol><p>注意：从某种程度上来讲，Go语言是一门值传递语言，引入指针的概念后，更确切的说就是，Go语言的参数传递是值传递与指针传递的结合使用。</p><h2 id="Slice"><a href="#Slice" class="headerlink" title="Slice"></a>Slice</h2><p>我们一般翻译过来叫做切片。和其他语言的数组切片非常的相似，包括中括号取索引，半开半闭等，但是实际上Go语言的数组slice与他们相比<br>又有很多独特的地方。</p><h3 id="Slice切片的基本形式"><a href="#Slice切片的基本形式" class="headerlink" title="Slice切片的基本形式"></a>Slice切片的基本形式</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>&#125;</span><br><span class="line"><span class="comment">//两端都有</span></span><br><span class="line">s := arr[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">fmt.Println(s)<span class="comment">//[4 6 8]</span></span><br><span class="line"><span class="comment">//有前无后</span></span><br><span class="line">fmt.Println(arr[<span class="number">2</span>:])<span class="comment">//[6 8 10]</span></span><br><span class="line"><span class="comment">//有后无前</span></span><br><span class="line">fmt.Println(arr[:<span class="number">4</span>])<span class="comment">//[2 4 6 8]</span></span><br><span class="line"><span class="comment">//全切</span></span><br><span class="line">fmt.Println(arr[:])<span class="comment">//[2 4 6 8 10]</span></span><br></pre></td></tr></table></figure><h3 id="Go语言数组的正确打开方式"><a href="#Go语言数组的正确打开方式" class="headerlink" title="Go语言数组的正确打开方式"></a>Go语言数组的正确打开方式</h3><p>其实通过上面的demo可以看出，不论是值引用方式还是指针引用方式，用起来都极为不便，func函数里的数组长度必须要求实参与之长度相同。<br>这样用起来是十分麻烦的，这与Go语言所追求的极简的概念也有着冲突。其实我们平时使用的数组都是Slice方式的，这种方式使用数组是极为简便的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中括号不加数字就是一个切片</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">slice1</span><span class="params">(arr []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"><span class="comment">//改动切片的数值</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">slice1(arr[:])</span><br><span class="line">fmt.Println(arr)<span class="comment">//[100 4 6 8 10]</span></span><br></pre></td></tr></table></figure><p>Go语言在使用数组类似引用传递的操作时一般是不使用指针的，而是上述操作的切片的方式。go文档里说，slice是对数组的一个视图（view），只看我要看的这一小段。</p><h3 id="reSlice"><a href="#reSlice" class="headerlink" title="reSlice"></a>reSlice</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reslice操作,每次的下标都是针对自己的slice</span></span><br><span class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>&#125;</span><br><span class="line">a := arr[:]</span><br><span class="line">a = a[:<span class="number">3</span>]</span><br><span class="line">a = a[<span class="number">1</span>:]</span><br><span class="line">fmt.Println(a)<span class="comment">//[4,6]</span></span><br></pre></td></tr></table></figure><p>reSlice理解起来并不难，但是要是想进一步理解Go语言的切片需要理解Extending Slice.的概念。</p><h3 id="Extending-Slice"><a href="#Extending-Slice" class="headerlink" title="Extending Slice"></a>Extending Slice</h3><p>下面的一段代码：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr1 := [...]<span class="keyword">int</span>&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;</span><br><span class="line">s1 := arr1[<span class="number">2</span>:<span class="number">6</span>]</span><br><span class="line"><span class="comment">//很明显此时s1的长度是4，即下标是0-3，那么此时的s2会不会报错，答案是不会报错</span></span><br><span class="line">s2 := s1[<span class="number">3</span>:<span class="number">5</span>]</span><br><span class="line">fmt.Println(s2)<span class="comment">//[5 6]</span></span><br><span class="line">s3 := s1[<span class="number">3</span>:]</span><br><span class="line">fmt.Println(s3)<span class="comment">//[5],默认是看不到cap()的值的，直接取s1[4]会报错</span></span><br></pre></td></tr></table></figure></p><p>compare:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">s1 = arr[<span class="number">2</span>:<span class="number">6</span>] <span class="comment"># [2, 3, 4, 5]</span></span><br><span class="line">s2 = s1[<span class="number">3</span>:<span class="number">5</span>] <span class="comment"># [5]</span></span><br><span class="line">print(s1, s2)</span><br></pre></td></tr></table></figure></p><p>Go在s2切片的时候下标已经超出s1的索引范围了，但是结果不仅没有报错，而且还正确的切到了下一个正确值6.</p><p><img src="http://p94ypeu3q.bkt.clouddn.com/TIM截图20180522232451.png" alt="TIM截图20180522232451"></p><p>golang中的slice除了len()还有一个cap()长度。虽然此时的len(s1)是4，但是cap(s1)还是6，slice是一个视图，视图再切片时还是能知道<br>下面的数据（索引为4和5）的，所以只要不超过cap()长度，即使s1取不到4，5（超过len()长度），但是s2依然可以取到。</p><h4 id="slice的实现"><a href="#slice的实现" class="headerlink" title="slice的实现"></a>slice的实现</h4><p>待续。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数组基础&quot;&gt;&lt;a href=&quot;#数组基础&quot; class=&quot;headerlink&quot; title=&quot;数组基础&quot;&gt;&lt;/a&gt;数组基础&lt;/h2&gt;&lt;h3 id=&quot;为什么要讨论Go语言的数组&quot;&gt;&lt;a href=&quot;#为什么要讨论Go语言的数组&quot; class=&quot;headerlink&quot; title=&quot;为什么要讨论Go语言的数组&quot;&gt;&lt;/a&gt;为什么要讨论Go语言的数组&lt;/h3&gt;&lt;p&gt;在其他语言里，比如Java和python里数组(列表)，都是引用传递，但是到了Go语言里，数组的传递方式依然是值传递。那么值传递的数组是怎么使用的呢？&lt;br&gt;这篇文章里简单的整理一下Go语言的数组的使用与其配合的Slice的工作原理。&lt;br&gt;
    
    </summary>
    
      <category term="Go" scheme="http://yoursite.com/categories/Go/"/>
    
    
      <category term="Go" scheme="http://yoursite.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Java程序初始化的顺序（一）</title>
    <link href="http://yoursite.com/2018/05/20/Java%E7%A8%8B%E5%BA%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E9%A1%BA%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/05/20/Java程序初始化的顺序/</id>
    <published>2018-05-20T14:23:26.000Z</published>
    <updated>2018-05-30T14:50:10.696Z</updated>
    
    <content type="html"><![CDATA[<p>今天在写构造器方法的时候，遇到了一个小问题，由这个问题引发了一连串的思考，在一个Java类中变量与类的初始化执行顺序是什么样的呢？<br><a id="more"></a></p><h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student()&#123;</span><br><span class="line"><span class="comment">//this(this.name);</span></span><br><span class="line"><span class="keyword">this</span>(name);</span><br><span class="line">System.out.println(<span class="string">"题目要求写一个无参的构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student(String name)&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Student stu1 = <span class="keyword">new</span> Student();</span><br><span class="line">System.out.print(stu1.getName());</span><br><span class="line">Student stu2 = <span class="keyword">new</span> Student(<span class="string">"老大"</span>);</span><br><span class="line">System.out.println(stu2.getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时会报错：无法在调用超类型构造器之前引用name.</p><p>在使用构造器创建对象时，构造器此时还无法使用类的成员变量name.由此我们需要知道，一个类创建对象时到底做了哪些事。</p><h2 id="思考问题"><a href="#思考问题" class="headerlink" title="思考问题"></a>思考问题</h2><p>首先，对于一个类来说加载分为五个部分，分别是静态变量，静态代码块，非静态变量，非静态代码块以及构造器。</p><h3 id="单个类加载顺序"><a href="#单个类加载顺序" class="headerlink" title="单个类加载顺序"></a>单个类加载顺序</h3><p>测试代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">static</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"刚运行到静态代码块时的静态变量值："</span>+name);</span><br><span class="line">        name = <span class="string">"静态name值"</span>;</span><br><span class="line">        System.out.println(<span class="string">"静态代码块结束时的静态变量值："</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个无参构造器</span></span><br><span class="line">    Student()&#123;</span><br><span class="line">        System.out.println(<span class="string">"刚运行到构造器时的静态变量值："</span>+name);</span><br><span class="line">        name = <span class="string">"这是一个无参的构造器"</span>;</span><br><span class="line">        System.out.println(<span class="string">"构造器结束时的静态变量值："</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个非静态变量</span></span><br><span class="line">    String name2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"刚运行到非静态代码块时的非静态变量值："</span>+name2);</span><br><span class="line">        name2 = <span class="string">"非静态name值"</span>;</span><br><span class="line">        System.out.println(<span class="string">"非静态代码块结束时的非静态变量值："</span>+name2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时编译代码执行的结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">刚运行到静态代码块时的静态变量值：null</span><br><span class="line">静态代码块结束时的静态变量值：静态name值</span><br><span class="line">刚运行到非静态代码块时的非静态变量值：null</span><br><span class="line">非静态代码块结束时的非静态变量值：非静态name值</span><br><span class="line">刚运行到构造器时的静态变量值：静态name值</span><br><span class="line">构造器结束时的静态变量值：这是一个无参的构造器</span><br></pre></td></tr></table></figure></p><p>由此可以看出，当我们声明的类成员变量是一个静态成员变量的时候，在调用构造器之前，我们的静态成员变量已经生成并初始化成相应的数据类型的默认值(即此处String对象的默认值位null)。<br>然后在静态代码块中，我们将静态变量赋值，然后程序跳转到非静态变量声明与赋值。再执行非静态代码块，最后直行到程序的无参构造器。</p><p>所以，通过此程序代码，我们得出结论：单个类的程序加载顺序是：静态变量–&gt;静态代码块–&gt;非静态变量–&gt;非静态代码块–&gt;构造器</p><h3 id="深入思考"><a href="#深入思考" class="headerlink" title="深入思考"></a>深入思考</h3><p>关于变量与代码块之间的的的关系，或者说根据我们上面的这段代码得出这个初步的结论我们还有待商榷，因为，我们的程序加载的顺序是自上而下的，<br>也就是说，我们的得到的这个结论有可能是因为我们习惯性的排版导致的，我们声明各部分的顺序偶可能影响我们得出的结论。为了确定我们程序的严谨性，<br>我们需要进一步的调整代码的顺序，来加强验证我们代码实验的逻辑严谨性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student2</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 静态代码块放到前面，此时name还未声明，所以会报错</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"刚运行到静态代码块时的静态变量值："</span>+name);</span><br><span class="line">        name = <span class="string">"静态name值"</span>;</span><br><span class="line">        System.out.println(<span class="string">"静态代码块结束时的静态变量值："</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">static</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个无参构造器</span></span><br><span class="line">    Student2()&#123;</span><br><span class="line">        System.out.println(<span class="string">"刚运行到构造器时的静态变量值："</span>+name);</span><br><span class="line">        name = <span class="string">"这是一个无参的构造器"</span>;</span><br><span class="line">        System.out.println(<span class="string">"构造器结束时的静态变量值："</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"刚运行到非静态代码块时的非静态变量值："</span>+name2);</span><br><span class="line">        name2 = <span class="string">"非静态name值"</span>;</span><br><span class="line">        System.out.println(<span class="string">"非静态代码块结束时的非静态变量值："</span>+name2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个非静态变量</span></span><br><span class="line">    String name2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        Student2 stu2 = <span class="keyword">new</span> Student2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码运行的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error:(6, 48) java: 非法前向引用</span><br></pre></td></tr></table></figure></p><p>此时将代码块拿到变量声明的前面我们的代码出现了错误提示，这说明了我们一开始得到的结论并不严谨，我们这里可以得出代码块的执行<br>是在变量声明之前的。所以，我们可以根据常识大胆的猜想，单个类程序加载的顺序是静态–&gt;非静态–&gt;构造器，其中变量声明与代码块的<br>执行顺序与代码前后位置有关，并没有严格的前后之分，程序员将代码写在前边的的先执行。</p><h3 id="验证猜想"><a href="#验证猜想" class="headerlink" title="验证猜想"></a>验证猜想</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student3</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个无参构造器</span></span><br><span class="line">    Student3()&#123;</span><br><span class="line">        System.out.println(<span class="string">"刚运行到构造器时的静态变量值："</span>+name);</span><br><span class="line">        name = <span class="string">"这是一个无参的构造器"</span>;</span><br><span class="line">        System.out.println(<span class="string">"构造器结束时的静态变量值："</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        name2 = <span class="string">"非静态name值"</span>;</span><br><span class="line">        System.out.println(<span class="string">"非静态代码块结束时的静态变量值："</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个非静态变量</span></span><br><span class="line">    String name2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"运行到静态代码块"</span>);</span><br><span class="line"><span class="comment">//        name = "静态代码块里赋的值";</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">static</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student3 stu3 = <span class="keyword">new</span> Student3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码执行的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">运行到静态代码块</span><br><span class="line">非静态代码块结束时的静态变量值：null</span><br><span class="line">刚运行到构造器时的静态变量值：null</span><br><span class="line">构造器结束时的静态变量值：这是一个无参的构造器</span><br></pre></td></tr></table></figure></p><p>基本验证了我们的猜想是正确的，但是在结尾我又做了一个有趣的测试。</p><p>###<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student3</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个无参构造器</span></span><br><span class="line">    Student3()&#123;</span><br><span class="line">        System.out.println(<span class="string">"刚运行到构造器时的静态变量值："</span>+name);</span><br><span class="line">        name = <span class="string">"这是一个无参的构造器"</span>;</span><br><span class="line">        System.out.println(<span class="string">"构造器结束时的静态变量值："</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        name2 = <span class="string">"非静态name值"</span>;</span><br><span class="line">        System.out.println(<span class="string">"非静态代码块结束时的静态变量值："</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个非静态变量</span></span><br><span class="line">    String name2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"运行到静态代码块"</span>);</span><br><span class="line">        name = <span class="string">"静态代码块里赋的值"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">static</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student3 stu3 = <span class="keyword">new</span> Student3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面代码执行的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">运行到静态代码块</span><br><span class="line">非静态代码块结束时的静态变量值：静态代码块里赋的值</span><br><span class="line">刚运行到构造器时的静态变量值：静态代码块里赋的值</span><br><span class="line">构造器结束时的静态变量值：这是一个无参的构造器</span><br></pre></td></tr></table></figure></p><p>也就是说在静态代码块里，我们无法引用后面的静态变量，但是我们可以对他进行赋值，并且在后面的非静态代码块里我们还可以取到里面的值，<br>再次做出假设，这是java虚拟机在编译时不让向前引用，此时的变量其实已经完成了声明初始化等一系列操作，只是通过不了编译而已。<br>所以我认为，我们最早得到的结论应该才是正确的Java程序整个加载流程的顺序。</p><h2 id="得出结论"><a href="#得出结论" class="headerlink" title="得出结论"></a>得出结论</h2><p>总结：在一个类中，初始化顺序为：</p><ol><li>静态变量，静态变量初始化；</li><li>静态代码块；</li><li>非静态变量初始化；</li><li>非静态代码块；</li><li>构造器。</li></ol><p>##最后<br>我得出的结论是，在构造器中不能使用使用非静态变量name的原因不是因为name此时未完成初始化，而是name其实是有值的，只不过编译时未发现赋值<br>的过程，这样的调用看似毫无意义（事实上我们应该不会这样调用，之所以研究这个纯属偶然），事实上在执行到这里的时候name是有值的（值为null）。<br>最后的代码验证：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line">Student()&#123;</span><br><span class="line">System.out.println(name);<span class="comment">//null</span></span><br><span class="line"><span class="comment">//this(name);</span></span><br><span class="line">System.out.println(<span class="string">"题目要求写一个无参的构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student(String name)&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Student stu1 = <span class="keyword">new</span> Student();</span><br><span class="line">Student stu2 = <span class="keyword">new</span> Student(<span class="string">"老大"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">null</span></span><br><span class="line">题目要求写一个无参的构造器</span><br></pre></td></tr></table></figure></p><p>果然，name的值是null。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">name = <span class="string">"老大"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student()&#123;</span><br><span class="line"><span class="comment">//System.out.println(name);//老大</span></span><br><span class="line">    <span class="comment">// this(name);//这样会报错</span></span><br><span class="line"><span class="keyword">this</span>(<span class="string">"老大"</span>);<span class="comment">//这样运行成功</span></span><br><span class="line"><span class="comment">//System.out.println("题目要求写一个无参的构造器");</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student(String name)&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Student stu1 = <span class="keyword">new</span> Student();</span><br><span class="line">System.out.print(stu1.name);</span><br><span class="line"><span class="comment">//Student stu2 = new Student("老大");</span></span><br><span class="line"><span class="comment">//System.out.println(stu2.getName());</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>综上所述：不要在无参构造里传进去一个参数，这样是不对的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在写构造器方法的时候，遇到了一个小问题，由这个问题引发了一连串的思考，在一个Java类中变量与类的初始化执行顺序是什么样的呢？&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
</feed>
