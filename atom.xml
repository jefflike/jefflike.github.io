<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jefflike&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-23T06:47:49.223Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jefflike</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java数据库操作</title>
    <link href="http://yoursite.com/2018/06/22/JDBC/"/>
    <id>http://yoursite.com/2018/06/22/JDBC/</id>
    <published>2018-06-22T10:46:33.000Z</published>
    <updated>2018-06-23T06:47:49.223Z</updated>
    
    <content type="html"><![CDATA[<p>JDBC(Java Database Connectivity)是一个独立于特定数据库管理系统（DBMS），通用的SQL数据库存取和操作的公共接口。忽略底层的东西，用相同的API操作，更加规范化，JDBC的数据库操作方式还是原生数据库，不是ORM。<br><img src="http://p94ypeu3q.bkt.clouddn.com/JDBC.png" alt="JDBC"></p><p>JDBC访问数据库的流程<br><img src="http://p94ypeu3q.bkt.clouddn.com/流程.bmp" alt="流程"></p><h3 id="导入数据库jar包"><a href="#导入数据库jar包" class="headerlink" title="导入数据库jar包"></a>导入数据库jar包</h3><p>要使用JDBC连接数据库，那么首先需要一个连接数据库的驱动。相关的驱动可以在相应的数据库提供商的官网下载jar包，导入使用。</p><h3 id="获取数据库的连接"><a href="#获取数据库的连接" class="headerlink" title="获取数据库的连接"></a>获取数据库的连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 注册驱动</span><br><span class="line">Class c = Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">System.out.println(c);// class com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line">// 获取连接</span><br><span class="line">String url = &quot;jdbc:mysql://localhost:3306/0508db&quot;;</span><br><span class="line">String user = &quot;root&quot;;</span><br><span class="line">String password = &quot;root&quot;;</span><br><span class="line"></span><br><span class="line">// 驱动加载到内存后，由DriverManager管理, 获取JDBC链接</span><br><span class="line">Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">System.out.println(conn); // com.mysql.jdbc.JDBC4Connection@42110406</span><br></pre></td></tr></table></figure><h3 id="Statement操作数据库"><a href="#Statement操作数据库" class="headerlink" title="Statement操作数据库"></a>Statement操作数据库</h3><h4 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Statement s = conn.createStatement();</span><br><span class="line">String sql = &quot;select * from dept&quot;;</span><br><span class="line">ResultSet res = s.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">while (res.next())&#123;</span><br><span class="line">int id = res.getInt(&quot;did&quot;);</span><br><span class="line">String name = res.getString(&quot;dname&quot;);</span><br><span class="line">System.out.println(id + &quot;\t&quot; + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><h4 id="增加，修改，-删除数据"><a href="#增加，修改，-删除数据" class="headerlink" title="增加，修改， 删除数据"></a>增加，修改， 删除数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String sql = &quot;INSERT INTO dept VALUES(7,&apos;ff&apos;)&quot;;</span><br><span class="line">// String sql = &quot;update dept set dname = &apos;测试部门&apos; where did = 7&quot;;</span><br><span class="line">// String sql = &quot;delete from dept where did = 7&quot;;</span><br><span class="line"></span><br><span class="line">Statement st = conn.createStatement();</span><br><span class="line"></span><br><span class="line">int len = st.executeUpdate(sql);</span><br><span class="line">if(len&gt;0)&#123;</span><br><span class="line">System.out.println(&quot;添加成功&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">System.out.println(&quot;添加失败&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改数据都是一类操作语句，修改一下sql语句即可。</p><h3 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h3><p>Statement存在三个问题：</p><ol><li>sql语句的拼接过于繁琐，比如查询语句的过滤条件是手动输入的，sql语句就要写成这样：<code>INSERT INTO users VALUES(NULL,&#39;&quot;+ username +&quot;&#39;,&#39;&quot; +password + &quot;&#39;,&#39;&quot; +email+&quot;&#39;)</code>,各种引号的嵌套，不利于查看。</li><li>不能防止sql注入的问题；</li><li>无法处理Blob等二进制类型的数据；</li></ol><p>所以一般我们开发会使用PreparedStatement类进行数据库相关的操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// (1)获取连接</span><br><span class="line">Connection conn = JDBCTools.getConnection();</span><br><span class="line"></span><br><span class="line">//(2)编写特殊的SQL</span><br><span class="line">String sql = &quot;INSERT INTO users VALUES(NULL,?,?,?)&quot;;</span><br><span class="line"></span><br><span class="line">//(3)获取PreparedStatement</span><br><span class="line">PreparedStatement pst = conn.prepareStatement(sql);//对带？的sql进行预编译，有三个？，代表有三个值需要传入</span><br><span class="line"></span><br><span class="line">//(4)设置?对应的值</span><br><span class="line">pst.setString(1, username);</span><br><span class="line">pst.setString(2, password);</span><br><span class="line">pst.setString(3, email);</span><br><span class="line"></span><br><span class="line">//(5)执行sql</span><br><span class="line">int len = pst.executeUpdate();//此处不需要再传入sql了，sql里面有三个预编译的？</span><br><span class="line">System.out.println(len&gt;0?&quot;成功&quot;:&quot;失败&quot;);</span><br></pre></td></tr></table></figure></p><p>读取数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//(1)获取连接</span><br><span class="line">Connection conn = JDBCTools.getConnection();</span><br><span class="line"></span><br><span class="line">//(2)编写SQL</span><br><span class="line">String sql = &quot;SELECT id,username,`password`,email FROM users WHERE username= ? AND `password` = ?&quot;;</span><br><span class="line"></span><br><span class="line">//(3)创建PreparedStatement</span><br><span class="line">PreparedStatement pst = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">//(4)设置？的值</span><br><span class="line">pst.setString(1, username);</span><br><span class="line">pst.setString(2, password);</span><br><span class="line"></span><br><span class="line">//(5)执行SQL</span><br><span class="line">ResultSet rs = pst.executeQuery();//不能再传Sql，不然？又回去了</span><br><span class="line">while(rs.next())&#123;</span><br><span class="line">int id = rs.getInt(&quot;id&quot;);</span><br><span class="line">String u = rs.getString(&quot;username&quot;);</span><br><span class="line">String p = rs.getString(&quot;password&quot;);</span><br><span class="line">String e = rs.getString(&quot;email&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(id+&quot;\t&quot; + u + &quot;\t&quot; + p + &quot;\t&quot; + e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//(5)释放资源</span><br><span class="line">JDBCTools.freeQuietly(rs, pst, conn);</span><br></pre></td></tr></table></figure></p><h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">User user = new User(0,&quot;jeff&quot;,&quot;123&quot;,&quot;jeff@123.com&quot;);//可以从键盘输入，也可以从web页面...</span><br><span class="line"></span><br><span class="line">//对象存储到数据库中：O-&gt;R</span><br><span class="line"></span><br><span class="line">//1、获取连接</span><br><span class="line">Connection conn = JDBCTools.getConnection();</span><br><span class="line"></span><br><span class="line">//2、编写sql</span><br><span class="line">String sql = &quot;INSERT INTO users VALUES(NULL,?,?,?)&quot;;</span><br><span class="line"></span><br><span class="line">//3、获取PreparedStatement</span><br><span class="line">PreparedStatement pst = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">//4、设置？</span><br><span class="line">pst.setString(1, user.getUsername());</span><br><span class="line">pst.setString(2, user.getPassword());</span><br><span class="line">pst.setString(3, user.getEmail());</span><br><span class="line"></span><br><span class="line">//5、执行</span><br><span class="line">int len = pst.executeUpdate();</span><br><span class="line">System.out.println(len&gt;0?&quot;成功&quot;:&quot;失败&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//关系数据库中的数据--&gt;对象   R-&gt;O</span><br><span class="line"></span><br><span class="line">//1、获取连接</span><br><span class="line">Connection conn = JDBCTools.getConnection();</span><br><span class="line"></span><br><span class="line">//2、编写sql</span><br><span class="line">String sql = &quot;SELECT id,username,`password`,email FROM users&quot;;</span><br><span class="line"></span><br><span class="line">//3、获取PreparedStatement</span><br><span class="line">PreparedStatement pst = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">//4、设置？，不需要，因为没有？</span><br><span class="line"></span><br><span class="line">//5、执行</span><br><span class="line">ResultSet rs = pst.executeQuery();</span><br><span class="line">ArrayList&lt;User&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">while(rs.next())&#123;</span><br><span class="line">//读取一行</span><br><span class="line">int id = rs.getInt(&quot;id&quot;);</span><br><span class="line">String username = rs.getString(&quot;username&quot;);</span><br><span class="line">String password = rs.getString(&quot;password&quot;);</span><br><span class="line">String email = rs.getString(&quot;email&quot;);</span><br><span class="line"></span><br><span class="line">//封装为一个对象</span><br><span class="line">User u = new User(id,username,password,email);</span><br><span class="line"></span><br><span class="line">//添加到集合</span><br><span class="line">list.add(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//6、遍历集合</span><br><span class="line">list.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="插入数据获取数据的属性"><a href="#插入数据获取数据的属性" class="headerlink" title="插入数据获取数据的属性"></a>插入数据获取数据的属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// (1)获取连接</span><br><span class="line">Connection conn = JDBCTools.getConnection();</span><br><span class="line"></span><br><span class="line">//(2)编写特殊的SQL</span><br><span class="line">String sql = &quot;INSERT INTO users VALUES(NULL,?,?,?)&quot;;</span><br><span class="line"></span><br><span class="line">//(3)获取PreparedStatement</span><br><span class="line">//如果需要执行完添加的sql后，想要返回自增长的键值，那么需要制定Statement.RETURN_GENERATED_KEYS </span><br><span class="line">PreparedStatement pst = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS );//对带？的sql进行预编译，有三个？，代表有三个值需要传入</span><br><span class="line"></span><br><span class="line">//(4)设置?对应的值</span><br><span class="line">pst.setString(1, username);</span><br><span class="line">pst.setString(2, password);</span><br><span class="line">pst.setString(3, email);</span><br><span class="line"></span><br><span class="line">//(5)执行sql</span><br><span class="line">int len = pst.executeUpdate();//不能再传Sql，不然？又回去了</span><br><span class="line">System.out.println(len&gt;0?&quot;成功&quot;:&quot;失败&quot;);</span><br><span class="line"></span><br><span class="line">//获取自增长的键值</span><br><span class="line">ResultSet rs = pst.getGeneratedKeys();</span><br><span class="line">if(rs.next())&#123;</span><br><span class="line">System.out.println(&quot;用户编号是：&quot; + rs.getInt(1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="批量查询"><a href="#批量查询" class="headerlink" title="批量查询"></a>批量查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//1、模拟批量插入10000个用户信息</span><br><span class="line">//1、获取连接</span><br><span class="line">Connection conn = JDBCTools.getConnection();</span><br><span class="line"></span><br><span class="line">//(2)编写特殊的SQL</span><br><span class="line">String sql = &quot;INSERT INTO users VALUES(NULL,?,?,?)&quot;;</span><br><span class="line"></span><br><span class="line">//(3)获取PreparedStatement</span><br><span class="line">PreparedStatement pst = conn.prepareStatement(sql);//对带？的sql进行预编译，有三个？，代表有三个值需要传入</span><br><span class="line"></span><br><span class="line">//(4)设置？的值，并且执行</span><br><span class="line">for(int i=1;i&lt;=10000; i++)&#123;</span><br><span class="line">String username = &quot;测试用户名&quot;+i;</span><br><span class="line">pst.setString(1, username);</span><br><span class="line">pst.setString(2, &quot;123456&quot;);</span><br><span class="line">pst.setString(3, username +&quot;@123.com&quot;);</span><br><span class="line"></span><br><span class="line">//先添加到批处理中，先攒着</span><br><span class="line">pst.addBatch();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//最后执行批处理</span><br><span class="line">pst.executeBatch();</span><br><span class="line"></span><br><span class="line">//(6)释放资源</span><br><span class="line">JDBCTools.freeQuietly(pst, conn);//因为PreparedStatement是Statement的子接口，多态参数</span><br><span class="line"></span><br><span class="line">long end = System.currentTimeMillis();</span><br></pre></td></tr></table></figure><h3 id="支持事物"><a href="#支持事物" class="headerlink" title="支持事物"></a>支持事物</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//1、获取连接</span><br><span class="line">Connection conn = JDBCTools.getConnection();</span><br><span class="line"></span><br><span class="line">//设置连接为手动提交模式</span><br><span class="line">conn.setAutoCommit(false);</span><br><span class="line"></span><br><span class="line">//2、编写特殊的sql</span><br><span class="line">String sql = &quot;UPDATE users SET PASSWORD = ? WHERE username = ?&quot;;</span><br><span class="line"></span><br><span class="line">//3、创建PreparedStatement</span><br><span class="line">PreparedStatement pst = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">//第一个</span><br><span class="line">pst.setString(1, &quot;123&quot;);</span><br><span class="line">pst.setString(2, &quot;chai&quot;);</span><br><span class="line"></span><br><span class="line">boolean flag = true;//假设成功</span><br><span class="line"></span><br><span class="line">int len = pst.executeUpdate();</span><br><span class="line">System.out.println(len&gt;0?&quot;成功&quot;:&quot;失败&quot;);</span><br><span class="line">flag  =  flag &amp; (len&gt;0);</span><br><span class="line"></span><br><span class="line">//第二个</span><br><span class="line">pst.setString(1, &quot;123&quot;);</span><br><span class="line">pst.setString(2, &quot;lin&quot;);//故意制造错误</span><br><span class="line"></span><br><span class="line">len = pst.executeUpdate();</span><br><span class="line">System.out.println(len&gt;0?&quot;成功&quot;:&quot;失败&quot;);</span><br><span class="line"></span><br><span class="line">flag  =  flag &amp; (len&gt;0);</span><br><span class="line"></span><br><span class="line">if(flag)&#123;</span><br><span class="line">conn.commit();//提交事务</span><br><span class="line">&#125;else&#123;</span><br><span class="line">conn.rollback();//回滚</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//还原自动提交模式</span><br><span class="line">conn.setAutoCommit(true);</span><br></pre></td></tr></table></figure><h3 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h3><p>DAO：Data Access Object访问数据信息的类和接口，包括了对数据的CRUD，而不包含任何业务相关的信息。作用：为了实现功能的模块化，更有利于代码的维护和升级。</p><p>我们自己也可以实现一个DAO，DAO的本质与我们上面操作PreparedStatement进行增删改查类似，只是将操作的细节封装成方法，预编译？作为参数传入方法，所以实质就是将增删改查封装成API提供给我们操作。</p><p>抽取BaseDAO的时候，查询的BaeDAO对于查询数据返回值的类型是不确定的，所以怎么将查询结果封装成对象返回显示，需要使用到反射读取子类传给父类时的泛型实参，从而生成实例对象并且读取显示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">private Class&lt;T&gt; type;</span><br><span class="line"></span><br><span class="line">public BaseDAO()&#123;</span><br><span class="line">Class&lt;? extends BaseDAO&gt; c = this.getClass();</span><br><span class="line">Type t = c.getGenericSuperclass();</span><br><span class="line">ParameterizedType p = (ParameterizedType) t;</span><br><span class="line">Type[] arr = p.getActualTypeArguments();</span><br><span class="line">type= (Class) arr[0];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//通用的查询多个对象的方法</span><br><span class="line">public List&lt;T&gt; getList(String sql, Object... args)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">//1、获取连接</span><br><span class="line">Connection conn = JDBCTools.getConnection();</span><br><span class="line"></span><br><span class="line">//3、创建PreparedStatement</span><br><span class="line">PreparedStatement pst = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">//4、设置？</span><br><span class="line">for (int i = 0; i &lt; args.length; i++) &#123;</span><br><span class="line">pst.setObject(i+1, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ResultSet rs = pst.executeQuery();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ResultSetMetaData metaData = rs.getMetaData();//结果集的元数据</span><br><span class="line">/*</span><br><span class="line"> * #结果集的元数据，结果有3列，列名称分别是id,title,author</span><br><span class="line">SELECT id,title,author FROM books WHERE id &lt;5;;</span><br><span class="line"></span><br><span class="line">SELECT id, title,author,price,sales,stock,img_path AS imgPath FROM books</span><br><span class="line">当属性名（类）与字段名（表）不一致时，可以通过取别名，告知结果集我类的属性名是什么</span><br><span class="line"> */</span><br><span class="line">//一共有几列</span><br><span class="line">int count = metaData.getColumnCount(); </span><br><span class="line"></span><br><span class="line">ArrayList&lt;T&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">while(rs.next())&#123;//很多行，很多个对象</span><br><span class="line">//一行，代表一个对象</span><br><span class="line">//循环一次，代表一行</span><br><span class="line">T t  = type.newInstance();</span><br><span class="line"></span><br><span class="line">//每一个对象又有很多列，即很多个属性需要设置</span><br><span class="line">for(int i=0; i&lt;count; i++)&#123;//n个属性</span><br><span class="line">//获取第几列的名称</span><br><span class="line">//String columnLabel = metaData.getColumnName(i+1);//只能得到列名</span><br><span class="line">//getColumnLabel如果没有别名就获取列名称，如果有别名就获取别名</span><br><span class="line">String columnLabel = metaData.getColumnLabel(i+1);//可以得到列的别名</span><br><span class="line"></span><br><span class="line">//根据列名称，获取值</span><br><span class="line">Object value = rs.getObject(columnLabel);</span><br><span class="line"></span><br><span class="line">//设置对象的属性值</span><br><span class="line">//(1)获取属性对象Field</span><br><span class="line">//Field f = type.getDeclaredField(属性名);</span><br><span class="line">Field f = type.getDeclaredField(columnLabel);</span><br><span class="line">//(2)调用Field对象的setAccessible(true)</span><br><span class="line">f.setAccessible(true);</span><br><span class="line">//(3)调用Field对象的set方法，设置属性值</span><br><span class="line">//f.set(t, 属性值);</span><br><span class="line">f.set(t, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list.add(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JDBCTools.freeQuietly(rs, pst, conn);</span><br><span class="line"></span><br><span class="line">return list;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">throw new RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意事项：</p><ol><li>因为传递的参数个数是不确定个数，类型也是不确定类型，所以接收的形参是Object… args；</li><li>getMetaData获取query的结果集，元数据就是表中列的名称或者别名，存入到Object需要与类型的属性名一致；</li><li>元数据getColumnCount获取到查询的数据的条数；</li><li>生成一个当前对象type的实例，然后生成查询到行数个对象进行赋值操作；</li><li>getColumnLabel获取元数据的别名，因为通用性不确定当前列的的数据类型，所以使用getObject。<h3 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h3>数据库连接池的基本思想就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个。</li></ol><p>数据库连接池技术的优点：</p><ol><li>资源重用：由于数据库连接得以重用，避免了频繁创建，释放连接引起的大量性能开销。在减少系统消耗的基础上，另一方面也增加了系统运行环境的平稳性。</li><li>更快的系统反应速度：数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接初始化和释放过程的时间开销，从而减少了系统的响应时间。</li><li>新的资源分配手段：对于多应用共享同一数据库的系统而言，可在应用层通过数据库连接池的配置，实现某一应用最大可用数据库连接数的限制，避免某一应用独占所有的数据库资源。</li><li>统一的连接管理，避免数据库连接泄露：在较为完善的数据库连接池实现中，可根据预先的占用超时设定，强制回收被占用连接，从而避免了常规数据库连接操作中可能出现的资源泄露。</li></ol><p>数据连接池的种类有很多，</p><ol><li>DBCP 是Apache提供的数据库连接池，速度相对c3p0较快，但因自身存在BUG，Hibernate3已不再提供支持；</li><li>C3P0 是一个开源组织提供的一个数据库连接池，速度相对较慢，稳定性还可以；</li><li>Proxool 是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，稳定性较c3p0差一点；</li><li>BoneCP 是一个开源组织提供的数据库连接池，速度快；</li><li>Druid 是阿里提供的数据库连接池，据说是集DBCP 、C3P0 、Proxool 优点于一身的数据库连接池，但是速度不知道是否有BoneCP快。</li></ol><p>Druid是现在普遍使用的数据库连接池，它的有点比较多，所以我一般都会使用它。<br>Druid的连接池使用方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//1、创建连接池</span><br><span class="line">DruidDataSource ds = new DruidDataSource();</span><br><span class="line"></span><br><span class="line">//2、基本参数</span><br><span class="line">ds.setDriverClassName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">ds.setUrl(&quot;jdbc:mysql://localhost:3306/bookstore&quot;);//bookstore库名，SQL中是表名称</span><br><span class="line">ds.setUsername(&quot;root&quot;);</span><br><span class="line">ds.setPassword(&quot;root&quot;);</span><br><span class="line"></span><br><span class="line">ds.setInitialSize(10);</span><br><span class="line">ds.setMaxActive(20);</span><br><span class="line">ds.setMinIdle(5);</span><br><span class="line">ds.setMaxWait(5000);</span><br><span class="line"></span><br><span class="line">//4、获取连接</span><br><span class="line">for(int i=1; i&lt;=30; i++)&#123;</span><br><span class="line">Connection conn = ds.getConnection();</span><br><span class="line">System.out.println(&quot;第&quot; + i + &quot;个连接：&quot; +  conn);</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">ds.close();</span><br></pre></td></tr></table></figure></p><p>将信息写入配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Properties pro = new Properties();</span><br><span class="line">pro.load(TestDruid2.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;));</span><br><span class="line">DataSource ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line"></span><br><span class="line">for (int i = 1; i &lt;= 30; i++) &#123;</span><br><span class="line">Connection conn = ds.getConnection();</span><br><span class="line">System.out.println(&quot;第&quot; + i + &quot;个连接：&quot; + conn);</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>附c3p0的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ComboPooledDataSource ds = new ComboPooledDataSource();</span><br><span class="line"></span><br><span class="line">ds.setDriverClass(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">ds.setJdbcUrl(&quot;jdbc:mysql://localhost:3306/bookstore&quot;);</span><br><span class="line">ds.setUser(&quot;root&quot;);</span><br><span class="line">ds.setPassword(&quot;123456&quot;);</span><br><span class="line"></span><br><span class="line">ds.setInitialPoolSize(10);</span><br><span class="line">ds.setMinPoolSize(5);</span><br><span class="line">ds.setMaxPoolSize(20);</span><br></pre></td></tr></table></figure></p><h3 id="Apache-DBUtils"><a href="#Apache-DBUtils" class="headerlink" title="Apache-DBUtils"></a>Apache-DBUtils</h3><p>Commons-DBUtils是Apache组织提供的一个开源JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用DBUtils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。</p><p>DbUtils：提供如关闭连接、释放资源、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static void close(…) throws java.sql.SQLException：　DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet。</span><br><span class="line">public static void closeQuietly(…): 这一类方法不仅能在Connection、Statement和ResultSet为NULL情况下避免关闭，还能隐藏一些在程序中抛出的SQLEeception。</span><br><span class="line">public static void commitAndClose(Connection conn)throws SQLException 用来提交连接的事务，然后关闭连接</span><br><span class="line">public static void commitAndCloseQuietly(Connection conn)： 用来提交连接的事务，然后关闭连接，并且在关闭连接时不抛出SQL异常。</span><br><span class="line">public static void rollback(Connection conn)throws SQLException允许conn为null，因为方法内部做了判断</span><br><span class="line">public static void rollbackAndClose(Connection conn)throws SQLException</span><br><span class="line">rollbackAndCloseQuietly(Connection)</span><br><span class="line">public static boolean loadDriver(java.lang.String driverClassName)：这一方装载并注册JDBC驱动程序，如果成功就返回true。使用该方法，你不需要捕捉这个异常ClassNotFoundException。</span><br></pre></td></tr></table></figure></p><p>QueryRunner：实现更新（增、删、改、批处理）封装了SQL的执行，是线程安全的。<br>QueryRunner的优点：<br>（1）可以实现增、删、改、查、批处理；<br>（2）考虑了事务处理需要共用Connection；<br>（3）该类最主要的就是简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。</p><p>不考虑事务而且QueryRunner对象创建时指定数据源，这样在QueryRunner的所有增删改查方法中都会从数据源中自己获取连接。如果有事务，必须传递Connection对象，因为同一个事务的多条语句必须在一个Connection连接中完成。<br>查询所有，不需要传参<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String sql = &quot;SELECT id,title,author,price,sales,stock,img_path AS imgPath FROM books&quot;;</span><br><span class="line">List&lt;Book&gt; list = qr.query(JDBCTools.getConnection(), sql, new BeanListHandler&lt;Book&gt;(Book.class));</span><br></pre></td></tr></table></figure></p><p>需要传递参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String sql = &quot;SELECT id,title,author,price,sales,stock,img_path AS imgPath FROM books where id = ?&quot;;</span><br><span class="line">Book book = qr.query(JDBCTools.getConnection(), sql, new BeanHandler&lt;Book&gt;(Book.class),1);</span><br></pre></td></tr></table></figure></p><p>查询单值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String sql = &quot;SELECT COUNT(*) FROM books&quot;;</span><br><span class="line">Long count = qr.query(JDBCTools.getConnection(), sql, new ScalarHandler&lt;Long&gt;());</span><br></pre></td></tr></table></figure></p><p>查询分组（Map）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String sql = &quot;SELECT did,AVG(salary),MAX(salary) FROM t_employee WHERE did =? GROUP BY did&quot;;</span><br><span class="line">Map&lt;String, Object&gt; map = qr.query(JDBCTools.getConnection(), sql, new MapHandler(), 1);</span><br></pre></td></tr></table></figure></p><p>嵌套的查询<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String sql = &quot;SELECT did,AVG(salary),MAX(salary) FROM t_employee GROUP BY did&quot;;</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; query = qr.query(JDBCTools.getConnection(), sql, new MapListHandler());</span><br></pre></td></tr></table></figure></p><p>更新，修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String sql = &quot;UPDATE users SET `password` = ? WHERE username = ?&quot;;</span><br><span class="line">int len = qr.update(JDBCTools.getConnection(), sql, &quot;123456&quot;, &quot;jeff&quot;);</span><br></pre></td></tr></table></figure></p><p>删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String sql = &quot;DELETE FROM users WHERE username = ?&quot;;</span><br><span class="line">int len = qr.update(JDBCTools.getConnection(), sql, &quot;jeff&quot;);</span><br></pre></td></tr></table></figure></p><p>增加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String sql = &quot;INSERT INTO users VALUES(NULL,?,?,?)&quot;;</span><br><span class="line">int len = qr.update(JDBCTools.getConnection(), sql, &quot;jeff&quot;,&quot;123&quot;,&quot;jeff@123.com&quot;);</span><br></pre></td></tr></table></figure></p><p>增加并获取主键<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String sql = &quot;INSERT INTO users VALUES(NULL,?,?,?)&quot;;</span><br><span class="line"></span><br><span class="line">//因为JDBC底层，preparedStatement执行完了后，调用getGeneratedKeys()返回的是ResultSet结果</span><br><span class="line">//所以这里仍然要指定这个结果集如何处理：ResultSetHandler</span><br><span class="line">//这个自增长的键值是一个整数值，用ScalarHandler处理</span><br><span class="line">Long id = qr.insert(JDBCTools.getConnection(), sql, new ScalarHandler&lt;Long&gt;(), &quot;jeff&quot;,&quot;123&quot;,&quot;jeff@123.com&quot;);</span><br></pre></td></tr></table></figure></p><p>Apache提供了很多Java类供Java程序员使用，合理的查看文档可以做到事半功倍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JDBC(Java Database Connectivity)是一个独立于特定数据库管理系统（DBMS），通用的SQL数据库存取和操作的公共接口。忽略底层的东西，用相同的API操作，更加规范化，JDBC的数据库操作方式还是原生数据库，不是ORM。&lt;br&gt;&lt;img src=
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>一梦十年</title>
    <link href="http://yoursite.com/2018/06/17/180617%E6%89%8B%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/06/17/180617手记/</id>
    <published>2018-06-17T04:20:45.000Z</published>
    <updated>2018-06-24T11:46:37.391Z</updated>
    
    <content type="html"><![CDATA[<p>&lt;随笔&gt;<br>&lt;自己写来玩的，留给自己日后翻阅，多年后看来可能又别有一番风味，我的成长记忆没有什么图片，都只有一些奇奇怪怪的文字，我些东西的文风怪怪的，思路跳跃也是极大，别人阅读可能会引起不适，在此道歉，语文没学好不怨老师，这里向老师道歉，最后极度不推荐偶然来访的朋友阅读Life分类的文章。&gt;<br>昨天看世界杯的时候，晃眼看成了2008年奥运会，乍以为是电视转播出了问题，定睛一看原来已是2018。嘲笑过一梦三四年的标题党，原来只是不自知罢了。</p><p>说到2008，又会想到那个夏天，大雪，地震，台风，奥运会的一年，也是我青春里最美好的年岁，那几年学的是九年义务教育，课余读的是水浒西游，都是些国内国外的名著，读书也算刻苦，有过梦想，还觉得自己会成为什么了不起的人物。总的来说，照着发展下去，也许不是什么了不起的人但是也绝不会如我现在这般困窘。年少的梦与想啊，被时间沧桑。</p><p>别的不说，九年的义务教育我完成的还是极好的。呵，全无用处。读高中时，接触到互联网，玩着大三亿，看的是神墓，星辰变，辰东，唐三与番茄之流。流行快餐文化是灵魂的海洛因。这也是我绝不会使用抖音，快手等APP的原因，辣鸡微信公众号的断章取义毒害的是中华民族的青年们。不幸的是我get到了当时盛行的“读书无用”理论，很多时候人都只能听到自己想要听到的东西，对于独立意识模糊，自主意识不健全的青少年来说，我的思想已经中毒了。直至此刻，娱乐至上已经全民化，辣鸡影视作品在侵蚀我们的下一代，那些年我读过的辣鸡文学，这几年被升级成了各种电视剧，电影。我看到的是腐蚀了我的民族。</p><p>“为中华崛起而编程”我不是随便说说，我知道我一个写web的菜鸡我没资格上升到中华民族的高度，我是青年一代，但是我代表不了民族希望，代表希望的是那些现在看爱情公寓，三生三世的00后，彼时我也将它们视为神作，此时只有鄙夷和不屑。他们能扛得住人口老龄化的中国吗，掏空了六个钱包，它们是不是如同香港和日本的青年亦或是更差？</p><p>四年lol，一朝入社会。方鸿渐留洋三年，花的是老丈人的钱，拿回来是应付的一纸文凭，浪费着大好的时光，却无半点才学。我同他别无两样，有的是一文不值的傲，能与苏文纨，赵辛楣交好，自觉高人一等的错觉，说来实在羞耻。于我而言，刘是同赵辛楣相似的人，在妥协于生活之前，把我拖出来，我现在即使过的不如16年轻松，但是至少不是little hunger，我自觉算得上是great hunger。</p><p>编程给我带来的绝对不是coding，加班，我觉得这段生活经历它拯救了我的灵魂，至少我觉得向我这样受过教育的青年都只想着安逸，不学习，不思考，不进取，给我们背负重担的那些人总有一天会被我这根稻草压垮。我们社会的重担是压在少数人的身上的，敢于承担，富有拼搏的人在为我们扛起整个国家，有政客，有科研人员，有商人，各个角落。与他们一样，也有坐吃山空，游山玩水，好逸恶劳，逃税漏税，但更多的是吃吃喝喝，网络毒舌，娱乐至死的家长里短。于我个人，我知道我读个书，对社会影响力为0，我不是明星，我没有粉丝，我没有流量，我不会说好听的话，so bad，我做这些只是让我和家人能过的好一些，从我辞职到现在快一年了，家人的鼓励与陪伴是我最大的动力。我曾觉得自己冷血无情，可能只是那时年少吧。父母给了我很多，我放弃自己的同时也在放弃他们。</p><p>我总是后知后觉，该学习的时候，我在读网络文学，该恋爱的年纪我在lol，该工作的年纪我开始想学习了，我想下一步该结婚的年纪我应当事业刚起步。但是那又怎样呢，我至少还没放弃，有时候我看到那些三四十岁被生活摧残的老哥踏上IT不归路，想一想如果我今日不上车，他会不会就是我的明天。我今年26岁，梦醒了，我开始考虑自己的人生，生活不止眼前的苟且，还有很多的苟且在后面接踵而至，但是为了生活，为了父母，为了以后可能遇到的人，为了自己现阶段，写Java，写python，写golang，写web。我可能活不了很久，但是人生苦短，何妨一试。至少我现在听音乐+coding的时候，我觉得自己是神。哪怕我在写hello world。如果没有爱人和婚姻，我怕是要写一辈子代码了。提前送自己一首凉凉。</p><p>“勇敢，自信，责任，担当，不做绝大多数，为中华崛起而编程!”<br>2018.06.17 北京市丰台区六里桥东随笔</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;lt;随笔&amp;gt;&lt;br&gt;&amp;lt;自己写来玩的，留给自己日后翻阅，多年后看来可能又别有一番风味，我的成长记忆没有什么图片，都只有一些奇奇怪怪的文字，我些东西的文风怪怪的，思路跳跃也是极大，别人阅读可能会引起不适，在此道歉，语文没学好不怨老师，这里向老师道歉，最后极度不推荐
      
    
    </summary>
    
      <category term="Life" scheme="http://yoursite.com/categories/Life/"/>
    
    
      <category term="Life" scheme="http://yoursite.com/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>泛型</title>
    <link href="http://yoursite.com/2018/06/14/%E6%B3%9B%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/06/14/泛型/</id>
    <published>2018-06-14T11:05:17.000Z</published>
    <updated>2018-06-23T01:39:23.582Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是泛型"><a href="#什么是泛型" class="headerlink" title="什么是泛型"></a>什么是泛型</h3><p>集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在JDK1.5之前只能把存储元素类型设计为Object，JDK1.5之后使用泛型来解决。存放元素时除了元素的类型不确定，其他的部分是确定的，例如关于这个元素如何保存，如何管理等是确定的，因此此时把元素的类型设计成一个参数，这个类型参数叫做泛型。Collection<e>，List<e>，ArrayList<e>   这个<e>就是类型参数，即泛型。在声明阶段定义一个标签，当此标签被传入泛型实参后，容器里存放怎样的数据就定格了。</e></e></e></e></p><p>从JDK1.5以后，Java引入了“参数化类型（Parameterized type）”的概念，允许我们在创建集合时再指定集合元素的类型，正如：List<string>，这表明该List只能保存字符串类型的对象。</string></p><h3 id="为什么使用泛型"><a href="#为什么使用泛型" class="headerlink" title="为什么使用泛型"></a>为什么使用泛型</h3><p>使用泛型优于Object是因为在Object读取类型对象的时候需要进行类型强转，这个过程可能会发生类型转换异常。但是使用泛型不需要进行类型转换，减少了类型异常的风险。同时Object可以接受Java的任意对象，这使得集合中的元素具有不同类型的风险，但是泛型只有指定的元素可以存放至集合，集合元素类型更安全。</p><p>简单的来说，泛型就是为了解决声明阶段不能确定元素类型，但在使用阶段可以确定类型的情况。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 未使用泛型的集合，管理混乱</span></span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="string">"jeff"</span>);</span><br><span class="line">        list.add(<span class="number">3.14</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的代码未使用泛型，集合里存入数据具有不确定性，什么类型都可以存，这使得数据读取变得麻烦.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 未使用泛型的集合，管理混乱</span></span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="string">"jeff"</span>);</span><br><span class="line">        list.add(<span class="number">3.14</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a =(<span class="keyword">int</span>)list.get(<span class="number">0</span>);<span class="comment">// 强转时注意不要转错了，这也是缺点之一，转型错误编译时也不会报错</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        String b =(String) list.get(<span class="number">1</span>);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        <span class="keyword">double</span> c = (<span class="keyword">double</span>) list.get(<span class="number">2</span>);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也许强制类型转换可以解决这个问题，但是迭代遍历可没有这么方便了。而且这样操作实在麻烦。此时没有标明泛型，则编译的时候按照泛型擦除的状态进行操作，类似于Object类型存储。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">        // 使用泛型后</span><br><span class="line">        ArrayList&lt;Integer&gt; list= new ArrayList&lt;&gt;();</span><br><span class="line">        list.add(2);</span><br><span class="line">//        list.add(&quot;string&quot;);//不同的类型在编译阶段就会报错</span><br><span class="line">//        list.add(3.14);</span><br></pre></td></tr></table></figure></p><p>注意：（1）泛型如果不指定，将被擦除，泛型对应的类型均按照Object处理，但不等价于Object；<br>      （2）泛型实参不能指定为基本数据类型。</p><h3 id="泛型分类"><a href="#泛型分类" class="headerlink" title="泛型分类"></a>泛型分类</h3><h4 id="泛型类-泛型接口"><a href="#泛型类-泛型接口" class="headerlink" title="泛型类/泛型接口"></a>泛型类/泛型接口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】  class/interface 类名/接口名&lt;泛型形参列表&gt;&#123;&#125;</span><br></pre></td></tr></table></figure><p>泛型类上定义的泛型形参在类中可以当作数据类型使用。可以使用在:</p><ol><li>属性；</li><li>方法；</li><li>方法的返回值类型；</li></ol><p>自定义一个泛型类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> T score;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, T score)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(T score)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"姓名："</span> + name + <span class="string">", 成绩："</span> + score;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStudentScore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Student&lt;Integer&gt; s1 = <span class="keyword">new</span> Student&lt;Integer&gt;(<span class="string">"张三"</span>,<span class="number">89</span>);</span><br><span class="line">Integer score = s1.getScore();</span><br><span class="line"></span><br><span class="line">Student&lt;Integer&gt; s2 = <span class="keyword">new</span> Student&lt;Integer&gt;();</span><br><span class="line"><span class="comment">//s2.setScore("优秀");</span></span><br><span class="line">s2.setScore(<span class="number">99</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>泛型上限<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Person</span>&gt;</span>&#123;</span><br><span class="line"><span class="keyword">private</span> T parnter;<span class="comment">//伴侣</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Person</span>&lt;<span class="title">Woman</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Woman</span> <span class="keyword">extends</span> <span class="title">Person</span>&lt;<span class="title">Man</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意： (1)切不可将类定义泛型的类型作为类的静态成员的数据类型。<br>       (2)泛型类和泛型接口上的泛型形参可以指定上限<code>T extends xx</code>,一旦泛型形参指定上限xx，泛型实参就不能超过它，只能指定为它或它的子类类型。</p><p>泛型类的泛型继承<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span>&lt;<span class="title">T1</span>,<span class="title">T2</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类不保留父类的泛型</span></span><br><span class="line"><span class="comment">//1)没有类型  擦除</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;<span class="comment">//等价于class Son extends Father&lt;Object,Object&gt;&#123;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2)具体类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span> <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">Integer</span>,<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类保留父类的泛型</span></span><br><span class="line"><span class="comment">//1)全部保留</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son3</span>&lt;<span class="title">T1</span>,<span class="title">T2</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">T1</span>,<span class="title">T2</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2)部分保留</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son4</span>&lt;<span class="title">T2</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">Integer</span>,<span class="title">T2</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span>&lt;<span class="title">T1</span>,<span class="title">T2</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类不保留父类的泛型</span></span><br><span class="line"><span class="comment">//1)没有类型  擦除</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>&lt;<span class="title">A</span>,<span class="title">B</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;<span class="comment">//等价于class Son extends Father&lt;Object,Object&gt;&#123;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2)具体类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span>&lt;<span class="title">A</span>,<span class="title">B</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">Integer</span>,<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类保留父类的泛型</span></span><br><span class="line"><span class="comment">//1)全部保留</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son3</span>&lt;<span class="title">T1</span>,<span class="title">T2</span>,<span class="title">A</span>,<span class="title">B</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">T1</span>,<span class="title">T2</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2)部分保留</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son4</span>&lt;<span class="title">T2</span>,<span class="title">A</span>,<span class="title">B</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">Integer</span>,<span class="title">T2</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用泛型类时未指定泛型的具体类型：类似于Object，不等同于Object,泛型擦除，默认按照Object处理但编译不会类型检查,明确指定Object，编译会按Object类型检查.</p><p>给泛型类传递实参可以在泛型类实例化时，也可以在继承了泛型类的子类中传递，或者子类继续基础泛型形参类型，在它生成对象时传递实参。</p><h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h4><p>（1）当某一个方法中它的形参类型等类型不确定时，和其他方法无关，那么这样的情况下，可以为这一个方法单独设计泛型形参。<br>（2）当某些静态方法需要泛型形参时，也要单独设计，因为它不能用类上的泛型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 &lt;泛型形参列表&gt; 返回值类型  方法名（【形参列表】）抛出的异常列表</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMyArrays</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Integer[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">String str = MyArrays.toString(arr);</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArrays</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">String <span class="title">toString</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">String str = <span class="string">"["</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (T t : arr) &#123;</span><br><span class="line">str += t;</span><br><span class="line"><span class="keyword">if</span>(i!=arr.length-<span class="number">1</span>)&#123;</span><br><span class="line">str += <span class="string">","</span>;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">str += <span class="string">"]"</span>;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：调用此方法时，泛型形参的类型和方法的形参的值都由实参决定，并且泛型方法声明泛型时也可以指定上限。</p><h3 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h3><p>注意：通配符？一般出现在方法的形参类型上，不能在类/接口上出现，表示可以接收任意，解决了泛型不支持继承的问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        ArrayList list = new ArrayList();</span><br><span class="line">        list.add(1);</span><br><span class="line">        list.add(&apos;1&apos;);</span><br><span class="line">        list.add(&quot;厉害了&quot;);</span><br><span class="line">        new Main().test1(list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void test1(ArrayList&lt;?&gt; list)&#123;</span><br><span class="line">/*list.add(&quot;hello&quot;);</span><br><span class="line">list.add(1);*/</span><br><span class="line"></span><br><span class="line">        for (Object object : list) &#123;</span><br><span class="line">            System.out.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>此时通配符泛型作为方法的形参，可以接收任意的通配符形参，但是上面这段代码只可以读取，不可以添加，而且也没有起到泛型应该履行的职责，所以不建议这样使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public void test2(ArrayList&lt;Object&gt; list)&#123;&#125;</span><br></pre></td></tr></table></figure><p>明确指明泛型类型又没有使用到通配符。如果此时形参集合未指明泛型，即擦除泛型，那么还是按照Object来定义。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;?&gt; list = new ArrayList();</span><br><span class="line">list = new ArrayList&lt;String&gt;();</span><br><span class="line">list = new ArrayList&lt;Integer&gt;();</span><br><span class="line">list = new ArrayList&lt;Object&gt;();</span><br></pre></td></tr></table></figure></p><p>通配符泛型的正确使用方式。</p><p>extends是上限，super是下限。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public void putAll(Map&lt;? extends K,? extends V&gt; m)</span><br></pre></td></tr></table></figure></p><p>泛型通配符的使得子类的类型不得大于超过K的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">        //K：Fu,V：Zi,Zi继承Fu，Fu继承YEYE</span><br><span class="line">        HashMap&lt;Fu,Zi&gt; map = new HashMap&lt;&gt;();// 对于map而言他的KV的上限就是FU与Zi</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Zi,SunZi&gt; map2 = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.putAll(map2);// map2的KV均小于map所以可以进行操作</span><br><span class="line"></span><br><span class="line">        HashMap&lt;YeYe,SunZi&gt; map3 = new HashMap&lt;YeYe,SunZi&gt;();</span><br><span class="line"></span><br><span class="line">//map.putAll(map3);//map3的K并不小于等于Fu所以不能直接操作</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 将T... elements多个元素add到c中，所以T的类型要小于等于c</span><br><span class="line">public static &lt;T&gt; boolean addAll(Collection&lt;? super T&gt; c, T... elements)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Fu&gt; list = new ArrayList&lt;Fu&gt;();</span><br><span class="line"></span><br><span class="line">Collections.addAll(list, new Zi(),new Zi());//T解读为Zi</span><br><span class="line"></span><br><span class="line">ArrayList&lt;SunZi&gt; list2 = new ArrayList&lt;SunZi&gt;();</span><br><span class="line"></span><br><span class="line">//Collections.addAll(list2, new Zi(),new Zi());// 同理这样也是会报错的，</span><br></pre></td></tr></table></figure><p>使用泛型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class TestExer1 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">HashMap&lt;String, ArrayList&lt;String&gt;&gt; map = new HashMap&lt;String,ArrayList&lt;String&gt;&gt;();</span><br><span class="line"></span><br><span class="line">ArrayList&lt;String&gt; bj = new ArrayList&lt;String&gt;();</span><br><span class="line">bj.add(&quot;北京市&quot;);</span><br><span class="line">map.put(&quot;北京市&quot;, bj);</span><br><span class="line"></span><br><span class="line">ArrayList&lt;String&gt; hn = new ArrayList&lt;String&gt;();</span><br><span class="line">hn.add(&quot;海口市&quot;);</span><br><span class="line">hn.add(&quot;三亚市&quot;);</span><br><span class="line">map.put(&quot;海南省&quot;, hn);</span><br><span class="line"></span><br><span class="line">Set&lt;Entry&lt;String, ArrayList&lt;String&gt;&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">for (Entry&lt;String, ArrayList&lt;String&gt;&gt; entry : entrySet) &#123;</span><br><span class="line">System.out.println(entry);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用泛型时的注意事项"><a href="#使用泛型时的注意事项" class="headerlink" title="使用泛型时的注意事项"></a>使用泛型时的注意事项</h3><h4 id="泛型没有多态"><a href="#泛型没有多态" class="headerlink" title="泛型没有多态"></a>泛型没有多态</h4><p>如果B是A的一个子类型（子类或者子接口），而G是具有泛型声明的类或接口，G<b>并不是G<a>的子类型！比如：String是Object的子类，但是List<string>并不是List<object>的子类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Fu&gt; list = new ArrayList&lt;Zi&gt;();//泛型没有多态,所以这样是会报错的</span><br></pre></td></tr></table></figure></object></string></a></b></p><p>要实现这样类似多态要使用通配符泛型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;? extends Fu&gt; list = new ArrayList&lt;Zi&gt;();//使用通配符可以实现</span><br></pre></td></tr></table></figure></p><h4 id="没有泛型数组"><a href="#没有泛型数组" class="headerlink" title="没有泛型数组"></a>没有泛型数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tiger&lt;String&gt;[] as = new Tiger&lt;String&gt;[];//是错误的，没有泛型数组</span><br></pre></td></tr></table></figure><h4 id="不能在try-catch中使用泛型定义"><a href="#不能在try-catch中使用泛型定义" class="headerlink" title="不能在try-catch中使用泛型定义"></a>不能在try-catch中使用泛型定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 错误，不可以再此处使用泛型</span><br><span class="line">try&#123;</span><br><span class="line">&#125;catch(T t)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是泛型&quot;&gt;&lt;a href=&quot;#什么是泛型&quot; class=&quot;headerlink&quot; title=&quot;什么是泛型&quot;&gt;&lt;/a&gt;什么是泛型&lt;/h3&gt;&lt;p&gt;集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在JDK1.5之前只能把存储元素类型
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>lambda</title>
    <link href="http://yoursite.com/2018/06/12/lambda/"/>
    <id>http://yoursite.com/2018/06/12/lambda/</id>
    <published>2018-06-12T12:56:50.000Z</published>
    <updated>2018-06-13T03:49:14.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><p>Lambda是一个匿名函数，我们可以把Lambda表达式理解为是一段可以传递的代码（将代码像数据一样进行传递）。可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。<br>很长一段时间java被吐槽是冗余和缺乏函数式编程能力的语言，随着函数式编程的流行java8也引入了这种编程风格。在此之前我们都在写匿名内部类干这些事，但是并不出色。在JS，python等语言中，lambda使用十分广泛，Java吸取其他语言的优点，增加了这个新特性，非常好用。</p><p>匿名内部类实现将一段代码作为数据传递使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"nothing"</span>);<span class="comment">// nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当然，匿名内部类的作用就是用来当作数据使用的代码块，他的缺点就是，代码过于冗长，实现一个简单的功能也要写上很多代码，代码也没有复用性使得代码冗长，不好阅读。</p><p>使用lambda<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Runnable r = () -&gt; System.out.println(<span class="string">"anything"</span>);</span><br><span class="line">        r.run();<span class="comment">// anything</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"everything"</span>)).start();<span class="comment">//everything</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看出lambda函数式更加的简便，lambda表达式关注参数和方法体，而没有方法名，这也很符合匿名函数这个名字。</p><h3 id="lambda函数调用方式"><a href="#lambda函数调用方式" class="headerlink" title="lambda函数调用方式"></a>lambda函数调用方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//无参无返回值</span><br><span class="line">Runnable r = () -&gt; System.out.println(&quot;anything&quot;);</span><br></pre></td></tr></table></figure><p>注意：()不能省略，如果{}中只有一个语句，那么{}可以省略。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 有参无返回值</span><br><span class="line">        ArrayList&lt;Integer&gt; arr = new ArrayList&lt;&gt;();</span><br><span class="line">        arr.add(1);</span><br><span class="line">        arr.add(5);</span><br><span class="line">        arr.add(3);</span><br><span class="line">        arr.forEach(t -&gt; System.out.println(t));</span><br></pre></td></tr></table></figure></p><p>注意：如果{}中只有一个语句，那么{;}可以省略;如果形参的类型是明确的，那么数据类型可以省略;如果形参的类型省略了，而且形参的个数只有一个，那么()可以省略.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 无参有返回值</span><br><span class="line">//Supplier&lt;String&gt; s = () -&gt; &#123;return new String();&#125;;</span><br><span class="line"></span><br><span class="line">Supplier&lt;String&gt; s = () -&gt; new String();</span><br></pre></td></tr></table></figure></p><p>注意：()不可以省略，如果{}中只有一个语句，那么{return ;}可以省略。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 有参有返回值</span><br><span class="line">class lambda &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Student&gt; arr = new ArrayList&lt;&gt;();</span><br><span class="line">        arr.add(new Student(1));</span><br><span class="line">        arr.add(new Student(5));</span><br><span class="line">        arr.add(new Student(3));</span><br><span class="line"></span><br><span class="line">        Collections.sort(arr,(t1, t2) -&gt; t1.id-t2.id);</span><br><span class="line"></span><br><span class="line">        arr.forEach(a -&gt; System.out.println(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Student&#123;</span><br><span class="line">    int id;</span><br><span class="line"></span><br><span class="line">    Student(int id)&#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student id = &quot; + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意：如果{}中只有一个语句，那么{return ;}可以省略；如果形参的类型是明确的，那么数据类型可以省略；如果形参的类型省略了，而且形参的个数只有一个，那么()可以省略。</p><h2 id="四大核心函数式接口"><a href="#四大核心函数式接口" class="headerlink" title="四大核心函数式接口"></a>四大核心函数式接口</h2><p>这几个函数式接口都定义在java.util.function下。本质上本质上它们都是一个接口，但是它是一种特殊的接口：SAM类型的接口（Single Abstract Method）。特点是：函数式接口中有且只能有一个抽象方法，当然可以有静态方法和默认方法，还可以有Object中的方法。只能是符合函数式接口的变量，形参才能赋值为一个Lambda表达式。所以建议在声明一个接口时，如果明确要表示这个接口是一个函数式接口，那么最好在接口声明的上方加上注解：@FunctionalInterface。</p><h3 id="消费型接口：Consumer"><a href="#消费型接口：Consumer" class="headerlink" title="消费型接口：Consumer"></a>消费型接口：Consumer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Consumer&lt;T&gt; <span class="title">andThen</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; after)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解说明是一个函数接口，声明一个方法，方法的参数时T类型。<br>基本特征：有参无返回值，相当于消费了，所以称作消费型接口。</p><h3 id="供给型接口：Supplier"><a href="#供给型接口：Supplier" class="headerlink" title="供给型接口：Supplier"></a>供给型接口：Supplier</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets a result.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：不需要参数就可以得到某类型参数，无中生有供给型函数式接口。</p><h3 id="函数型接口：Function"><a href="#函数型接口：Function" class="headerlink" title="函数型接口：Function"></a>函数型接口：Function</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;V, R&gt; <span class="title">compose</span><span class="params">(Function&lt;? <span class="keyword">super</span> V, ? extends T&gt; before)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(before);</span><br><span class="line">        <span class="keyword">return</span> (V v) -&gt; apply(before.apply(v));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：Function需要两个参数(可不同类型)，返回值为一个。Function衍生出一些特别的子类BiFunction，DoubleFunction等。</p><h3 id="断定型接口：Predicate"><a href="#断定型接口：Predicate" class="headerlink" title="断定型接口：Predicate"></a>断定型接口：Predicate</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Predicate&lt;T&gt; &#123;</span><br><span class="line">    boolean test(T t);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>断定型的特点是对于传入的对象返回一个boolean类型的结果，也衍生出DoublePredicate，IntPredicate等接口。</p><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><p>特点：实现抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致！<br>使用方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）类名::实例方法名</span><br><span class="line">（2）对象::实例方法名</span><br><span class="line">（3）类名::静态方法名</span><br></pre></td></tr></table></figure></p><p>三种方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Comparator&lt;String&gt; c = new Comparator&lt;String&gt;()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public int compare(String o1, String o2) &#123;</span><br><span class="line">                return o1.compareTo(o2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Comparator&lt;String&gt; s = (t1, t2) -&gt; t1.compareTo(t2);</span><br><span class="line"></span><br><span class="line">        Comparator&lt;String&gt; s1 = String :: compareTo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方法引用虽然使用起来非常简便，但是条件却是非常的苛刻。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void test()&#123;</span><br><span class="line">List&lt;String&gt; list = Arrays.asList(&quot;hello&quot;,&quot;world&quot;);</span><br><span class="line"></span><br><span class="line">//forEach形参的类型是java.util.function.Consumer&lt;T&gt;接口</span><br><span class="line">//抽象方法：有参无返回值void accept(T t)</span><br><span class="line">//(1)Lambda是通过调用现成System.out对象的println()方法完成，而且也是有参无返回值</span><br><span class="line">//(2)而且accept的形参，正好是println()的实参</span><br><span class="line">list.forEach(t -&gt; System.out.println(t));</span><br><span class="line">list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void test4()&#123;</span><br><span class="line">//方法体的实现得到两个小数当中的最大值</span><br><span class="line">BinaryOperator&lt;Double&gt; bo = (a,b) -&gt; Math.max(a,b);</span><br><span class="line"></span><br><span class="line"> // apply(T t1, T t2)两个形参，正好是给max的两个实参</span><br><span class="line"> // 返回值类型   apply(T t1, T t2)的返回值是T，这里是Double</span><br><span class="line"> // 而我们max的返回值类型也是a,b类型，Double</span><br><span class="line">BinaryOperator&lt;Double&gt; bo2 = Math::max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h3><p>构造器引用的Lambda体是通过创建一个对象完成的。<br>使用方式<br><code>类名::new</code><br>示例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConstrunctorReference</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//函数型：Function&lt;T,R&gt; : R apply(T t)</span></span><br><span class="line">Function&lt;Integer,String[]&gt; f = len -&gt; <span class="keyword">new</span> String[len];</span><br><span class="line">Function&lt;Integer,String[]&gt; f2 = String[]::<span class="keyword">new</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//函数型：BiFunction&lt;T,U,R&gt; : R apply(T t,U u)</span></span><br><span class="line">BiFunction&lt;String,Integer,Person&gt; f = (name,id) -&gt; <span class="keyword">new</span> Person(name,id);</span><br><span class="line">BiFunction&lt;String,Integer,Person&gt; f2 = Person::<span class="keyword">new</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//函数型：Function&lt;T,R&gt; : R apply(T t)</span></span><br><span class="line">Function&lt;String,Person&gt; f = name -&gt; <span class="keyword">new</span> Person(name);</span><br><span class="line">Function&lt;String,Person&gt; f2 = Person::<span class="keyword">new</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//供给型：Supplier&lt;T&gt; : T get()，无参有返回值</span></span><br><span class="line">Supplier&lt;String&gt; s = () -&gt; <span class="keyword">new</span> String();</span><br><span class="line">Supplier&lt;String&gt; s1 = String::<span class="keyword">new</span>;</span><br><span class="line"></span><br><span class="line">Supplier&lt;Person&gt; p = () -&gt; <span class="keyword">new</span> Person();</span><br><span class="line">Supplier&lt;Person&gt; p2 = Person::<span class="keyword">new</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h3><p>一般会与lambda语句一同使用，用于解决Java常见的空指针异常，Optional本质是一个存放对象的容器，解决空指针异常的本质就是不用我们显式的判断数据是否为null了，但是空值判断还是要以其他方法进行(Optional的方法)。</p><h4 id="创建Optional的三种方式"><a href="#创建Optional的三种方式" class="headerlink" title="创建Optional的三种方式"></a>创建Optional的三种方式</h4><ul><li>（1）Optional.empty()：空的容器，里面相当于是封装的是null；</li><li>（2）Optional.of(非空对象)；</li><li>（3）Optional.ofNullable(可以是null可以不是null)。<h4 id="Optional方法"><a href="#Optional方法" class="headerlink" title="Optional方法"></a>Optional方法</h4><ol><li>获取数据：get()：从容器中取出对象，但是要求这个容器中对象必须非空；orElseGet(Supplier s)：从容器中取出对象，如果这个容器中的对象是非空，那么就取出这个对象给调用者，如果这个容器的对象是空的，那么就由Supplier这个供给型接口的实现方法来提供一个对象给调用者。这两种方式得到的对象一定不是空的，而且也没有显式进行空值判断。</li><li>判断是否容器中包含对象：isPresent()，判断是否存在，如果存在，对这个对象执行由Comsumer接口指定的操作：ifPresent(Consumer&lt;? super T&gt; consumer)。</li><li>orElse(T t):从容器中取出对象，如果这个容器中的对象是非空，那么就取出这个对象给调用者，如果这个容器的对象是空的，那么就由t对象代替。</li><li>orElseThrow(Supplier s)：从容器中取出对象，如果这个容器中的对象是非空，那么就取出这个对象给调用者，如果这个容器的对象是空的，那么就报由Supplier提供异常信息返回。</li><li>Optional<t> filter(Predicate&lt;? super T&gt; predicate) ：判断当前Optional容器中是否存在对象，并且是否满足Predicate指定的条件判断，如果满足，那么就返回一个合理的Optional<t>对象，如果不存在或不满足条件，就返回一个Empty的Optional。</t></t></li><li><u> Optional<u> map(Function&lt;? super T,? extends U&gt; mapper)，如果当前Optional容器中对象是null，就什么也不干，如果是非空的对Optional容器中对象进行某种操作，按照Function指定的操作进行，返回有Function的操作完的结果返回。<h4 id="使用Optional"><a href="#使用Optional" class="headerlink" title="使用Optional"></a>使用Optional</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOptional</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test12</span><span class="params">()</span></span>&#123;</span><br><span class="line">Optional&lt;List&lt;Integer&gt;&gt; of = Optional.of(Arrays.asList(<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//取出集合中的最大值</span></span><br><span class="line">Optional&lt;Integer&gt; max = of.flatMap(list -&gt; &#123;Collections.sort(list);  <span class="keyword">return</span> Optional.of(list.get(list.size()-<span class="number">1</span>));&#125;);</span><br><span class="line">System.out.println(max);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test11</span><span class="params">()</span></span>&#123;</span><br><span class="line">Optional&lt;List&lt;Integer&gt;&gt; of = Optional.of(Arrays.asList(<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//取出集合中的最大值</span></span><br><span class="line">Optional&lt;Integer&gt; max = of.map(list -&gt; Collections.max(list));</span><br><span class="line">System.out.println(max);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span></span>&#123;</span><br><span class="line">Student stu = <span class="keyword">new</span> Student(<span class="string">"张三"</span>,<span class="number">78</span>);</span><br><span class="line">Optional&lt;Student&gt; of = Optional.ofNullable(stu);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取出学生对象的姓</span></span><br><span class="line">Optional&lt;String&gt; map = of.map(t -&gt; t.getName().substring(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test9</span><span class="params">()</span></span>&#123;</span><br><span class="line">Student stu = <span class="keyword">new</span> Student(<span class="string">"张三"</span>,<span class="number">78</span>);</span><br><span class="line">Optional&lt;Student&gt; of = Optional.ofNullable(stu);</span><br><span class="line"><span class="comment">//Optional&lt;Student&gt; of = Optional.ofNullable(null);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对of中的对象，加10分，如果of中的对象不为空的话</span></span><br><span class="line"><span class="comment">//参数：Function&lt;T,R&gt;：R apply(T t)</span></span><br><span class="line">Optional&lt;Student&gt; map = of.map(t -&gt; &#123;t.setScore(t.getScore()+<span class="number">10</span>);  <span class="keyword">return</span> t;&#125;);</span><br><span class="line">System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span></span>&#123;</span><br><span class="line">Student stu = <span class="keyword">new</span> Student(<span class="string">"张三"</span>,<span class="number">78</span>);</span><br><span class="line"><span class="comment">//Optional&lt;Student&gt; of = Optional.ofNullable(stu);</span></span><br><span class="line">Optional&lt;Student&gt; of = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断of中包装的学生，成绩是否是&gt;=60分，如果是，返回该学生对象，如果不是，返回空</span></span><br><span class="line"><span class="comment">//Predicate&lt;T&gt;：boolean test(T t)</span></span><br><span class="line">Optional&lt;Student&gt; result = of.filter(t -&gt; t.getScore()&gt;=<span class="number">60</span>);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//Optional&lt;String&gt; of = Optional.ofNullable("张三");</span></span><br><span class="line">Optional&lt;String&gt; of = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//形参是Supplier&lt;T&gt;: T get()</span></span><br><span class="line">String name = of.orElseThrow(() -&gt; <span class="keyword">new</span> RuntimeException(<span class="string">"用户名不存在"</span>));</span><br><span class="line">System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//Optional&lt;String&gt; of = Optional.ofNullable("张三");</span></span><br><span class="line">Optional&lt;String&gt; of = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">String name = of.orElse(<span class="string">"无名"</span>);</span><br><span class="line">System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">Optional&lt;String&gt; of = Optional.ofNullable(<span class="string">"张三"</span>);</span><br><span class="line"><span class="comment">//如果是空的，就什么也不做，如果不是空的，截取出它的姓，并打印</span></span><br><span class="line"><span class="comment">//形参类型是：Consumer&lt;T&gt;：void accept(T t)</span></span><br><span class="line">of.ifPresent(name -&gt; System.out.println(name.substring(<span class="number">0</span>,<span class="number">1</span>)));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">Optional&lt;String&gt; of = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为of容器中的对象可能是null，可能不是null</span></span><br><span class="line"><span class="comment">//那么可以判断</span></span><br><span class="line">System.out.println(of.isPresent());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">Optional&lt;String&gt; of = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//String string = of.get();//从容器中取出元素</span></span><br><span class="line"><span class="comment">//System.out.println(string);//No value present</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//orElseGet(Supplier s)</span></span><br><span class="line"><span class="comment">//Supplier&lt;T&gt;：T get()</span></span><br><span class="line"><span class="comment">//String s2 = of.orElseGet(() -&gt; new String());</span></span><br><span class="line">String s2 = of.orElseGet(String::<span class="keyword">new</span>);</span><br><span class="line">System.out.println(s2);</span><br><span class="line"></span><br><span class="line">String address = <span class="string">"beijing"</span>;</span><br><span class="line"><span class="keyword">if</span>(s2.equals(address))&#123;</span><br><span class="line">System.out.println(<span class="string">"地址是北京"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">String address = <span class="string">"beijing"</span>;</span><br><span class="line">Optional&lt;String&gt; of = Optional.of(address);</span><br><span class="line"></span><br><span class="line">String string = of.get();<span class="comment">//从容器中取出元素</span></span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">Optional&lt;Object&gt; empty = Optional.empty();</span><br><span class="line">System.out.println(empty);</span><br><span class="line"></span><br><span class="line">String address = <span class="string">"beijing"</span>;</span><br><span class="line">Optional&lt;String&gt; of = Optional.of(address);</span><br><span class="line">System.out.println(of);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Student stu = null;</span></span><br><span class="line">Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">Optional&lt;Student&gt; of2 = Optional.ofNullable(stu);</span><br><span class="line">System.out.println(of2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Student [name="</span> + name + <span class="string">", score="</span> + score + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></u></u></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于&quot;&gt;&lt;a href=&quot;#关于&quot; class=&quot;headerlink&quot; title=&quot;关于&quot;&gt;&lt;/a&gt;关于&lt;/h2&gt;&lt;p&gt;Lambda是一个匿名函数，我们可以把Lambda表达式理解为是一段可以传递的代码（将代码像数据一样进行传递）。可以写出更简洁、更灵活的代码
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Map</title>
    <link href="http://yoursite.com/2018/06/12/Map/"/>
    <id>http://yoursite.com/2018/06/12/Map/</id>
    <published>2018-06-12T12:08:59.000Z</published>
    <updated>2018-06-21T15:00:56.932Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>Map与Collection并列存在。用于保存具有映射关系的数据:Key-Value。Map中的key和value都可以是任何引用类型的数据，Map中的key不允许重复，key和value之间存在单向一对一关系，即通过指定的key总能找到唯一的、确定的value。Map接口的常用实现类：HashMap、TreeMap、LinkedHashMap和Properties。允许使用null键和null值，与HashSet一样，不保证映射的顺序。</p><h4 id="Map常用方法"><a href="#Map常用方法" class="headerlink" title="Map常用方法"></a>Map常用方法</h4><ol><li>添加：put(Object key,Object value)：添加一对k-v，putAll(Map m)：把m的Map的映射关系都添加到当前map中。</li><li>获取有效映射关系的对数：size()。</li><li>可以根据key获取value：Object get(Object key)。</li><li>删除：remove(Object key)，clear()。</li><li>是否包含：boolean containsKey(Object key)，boolean containsValue(Object value)。</li><li>是否为空：isEmpty()。</li></ol><h4 id="遍历Map"><a href="#遍历Map" class="headerlink" title="遍历Map"></a>遍历Map</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(&quot;map的所有key:&quot;);</span><br><span class="line">Set keys = map.keySet();//HashSet</span><br><span class="line">for(Object key : keys)&#123;</span><br><span class="line">    System.out.println(key+&quot;-&gt;&quot;+map.get(key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;map的所有的value：&quot;);</span><br><span class="line">Collection values = map.values();</span><br><span class="line">Iterator iter = values.iterator();</span><br><span class="line">while(iter.hasNext())&#123;</span><br><span class="line">    System.out.println(iter.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;map所有的映射关系：&quot;);</span><br><span class="line">//映射关系的类型是Map.Entry类型，它是Map接口的内部接口</span><br><span class="line">Set mappings = map.entrySet();</span><br><span class="line">for(Object mapping : mappings)&#123;</span><br><span class="line">    //System.out.println(mapping);</span><br><span class="line">    Map.Entry entry = (Map.Entry)mapping;</span><br><span class="line">    System.out.println(&quot;key是：&quot;+ entry.getKey()+ &quot;，value是：&quot;+entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>Map的遍历，不能支持foreach；</li><li>可以单独遍历所有key，根据key获取对应value；</li><li>可以单独遍历value；</li><li>成对遍历：遍历的是映射关系Map.Entry，Map.Entry是Map接口的内部接口。每一种Map内部有自己的Map.Entry的实现类。<br>在Map中存储数据，实际上是将Key，value的数据存储在Map.Entry接口的实例中，再在Map集合中插入Map.Entry的实例化对象。<br><img src="http://p94ypeu3q.bkt.clouddn.com/entry.png" alt="entry"></li></ol><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>HashMap判断key与value是否相等的操作与HashSet的方式一致（hashcode与equals）。</p><h4 id="1-8之前的HashMap"><a href="#1-8之前的HashMap" class="headerlink" title="1.8之前的HashMap"></a>1.8之前的HashMap</h4><p>HashMap的内部存储结构其实是数组和链表的结合。当实例化一个HashMap时，系统会创建一个长度为Capacity的Entry数组，这个长度在哈希表中被称为容量(Capacity)，在这个数组中可以存放元素的位置我们称之为“桶”(bucket)，每个bucket都有自己的索引，系统可以根据索引快速的查找bucket中的元素。每个bucket中存储一个元素，即一个Entry对象，但每一个Entry对象可以带一个引用变量，用于指向下一个元素，因此，在一个桶中，就有可能生成一个Entry链。而且新添加的元素作为链表的head。<br>当HashMap中的元素越来越多的时候，hash冲突的几率也就越来越高，因为数组的长度是固定的。所以为了提高查询的效率，就要对HashMap的数组进行扩容，而在HashMap数组扩容之后，最消耗性能的点就出现了：原数组中的数据必须重新计算其在新数组中的位置，并放进去，这就是resize。</p><p>HashMap什么时候进行扩容呢？<br>当HashMap中的元素个数超过数组大小(数组总大小length,不是数组中个数size)<code>*</code>loadFactor时，就会进行数组扩容，loadFactor的默认值为0.75，这是一个折中的取值。也就是说，默认情况下，数组大小为16，那么当HashMap中元素个数超过16<code>*</code>0.75=12（这个值就是代码中的threshold值，也叫做临界值）的时候，就把数组的大小扩展为 2*16=32，即扩大一倍，然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，所以如果我们已经预知HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能。</p><h4 id="1-8之后的HashMap"><a href="#1-8之后的HashMap" class="headerlink" title="1.8之后的HashMap"></a>1.8之后的HashMap</h4><p>HashMap的内部存储结构其实是数组和链表/树的结合。当实例化一个HashMap时，会初始化initialCapacity和loadFactor，在put第一对映射关系时，系统会创建一个长度为initialCapacity的Node数组，这个长度在哈希表中被称为容量(Capacity)，在这个数组中可以存放元素的位置我们称之为“桶”(bucket)，每个bucket都有自己的索引，系统可以根据索引快速的查找bucket中的元素。每个bucket中存储一个元素，即一个Node对象，但每一个Node对象可以带一个引用变量next，用于指向下一个元素，因此，在一个桶中，就有可能生成一个Node链。也可能是一个一个TreeNode对象，每一个TreeNode对象可以有两个叶子结点left和right，因此，在一个桶中，就有可能生成一个TreeNode树。而新添加的元素作为链表的last,或树的叶子结点。（七上八下）</p><p>HashMap什么时候进行扩容和树形化呢？<br>当HashMap中的元素个数超过数组大小(数组总大小length,不是数组中个数size)<code>*</code>loadFactor时，就会进行数组扩容，loadFactor的默认值为0.75，这是一个折中的取值。也就是说，默认情况下，数组大小为16，那么当HashMap中元素个数超过16<code>*</code>0.75=12（这个值就是代码中的threshold值，也叫做临界值）的时候，就把数组的大小扩展为 2*16=32，即扩大一倍，然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，所以如果我们已经预知HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能。当HashMap中的其中一个链的对象个数如果达到了8个，此时如果capacity没有达到64，那么HashMap会先扩容解决，如果已经达到了64，那么这个链会变成树，结点类型由Node变成TreeNode类型。当然，如果当映射关系被移除后，下次resize方法时判断树的结点个数低于6个，也会把树在转为链表。</p><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><p>是HashMap的子类，维护了添加的顺序。效率更低，在添加，删除时，要多费心来维护前后的关系。</p><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><p>TreeMap存储 Key-Value 对时，需要根据 key进行排序。TreeMap 可以保证所有的 Key-Value 对处于有序状态。</p><p>TreeMap 的 Key 的排序分为两种：<br>自然排序：TreeMap 的所有的 Key 必须实现 Comparable 接口，而且所有的 Key 应该是同一个类的对象，否则将会抛出 ClasssCastException；<br>定制排序：创建 TreeMap 时，传入一个 Comparator 对象，该对象负责对 TreeMap 中的所有 key 进行排序。<br>TreeMap判断两个key相等的标准：两个key通过compareTo()方法或者compare()方法返回0。若使用自定义类作为TreeMap的key，所属类需要重写equals()和hashCode()方法，且equals()方法返回true时，compareTo()方法应返回0。</p><h3 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h3><p>Hashtable与HashMap基本上实现都一样，只是Hashtable是个比较老的 Map 实现类（JDK1.0），它是线程安全，HashMap线程不安全。与HashMap不同的是Hashtable 不允许使用 null 作为 key 和 value。</p><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><p>Properties 类是 Hashtable 的子类，该对象用于处理属性文件，由于属性文件里的 key、value 都是字符串类型，所以 Properties 里的 key 和 value 都是字符串类型，存取数据时，建议使用setProperty(String key,String value)方法和getProperty(String key)方法。</p><p>注意： 不管哪种Map，添加到map中后，这个key就不用修改了，特别是这个属性值涉及到hashCode和equals或comparexx的计算或比较的属性。一旦修改了key，和原来的key就不一样，那么就找不到原来的数据了。所以实际开发中，比较多见把String或Integer这样的不可变的类型作为key值。</p><h3 id="Map集合框架"><a href="#Map集合框架" class="headerlink" title="Map集合框架"></a>Map集合框架</h3><p><img src="http://p94ypeu3q.bkt.clouddn.com/TIM截图20180614184646.png" alt="TIM截图20180614184646"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Map&quot;&gt;&lt;a href=&quot;#Map&quot; class=&quot;headerlink&quot; title=&quot;Map&quot;&gt;&lt;/a&gt;Map&lt;/h3&gt;&lt;p&gt;Map与Collection并列存在。用于保存具有映射关系的数据:Key-Value。Map中的key和value都可以是任何引用类
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Collection</title>
    <link href="http://yoursite.com/2018/06/11/Collection/"/>
    <id>http://yoursite.com/2018/06/11/Collection/</id>
    <published>2018-06-11T15:57:15.000Z</published>
    <updated>2018-06-21T12:57:08.434Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在说集合之前，要先提一下数组这个数据结构。数组本身是一个线性的数据结构，从物理结构看是一个顺序存储结构。每次申请一段连续的空间，一旦申请到，内存就固定了。所有数据存储在这个连续的空间中，数组中的每一个元素都是一个具体的数据（或对象），所有数据都紧密排布，不能有间隔。数组可以通过下标快速的查找元素，但是当数组做插入和删除操作操作时，效率则会极其的低下，而且也不能直接访问到当前数组中有效元素的个数。介于数组的缺点，为满足数据更多种的逻辑关系，而设计的一系列的不同于数组的可变的聚合的抽象数据类型，被称作集合。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>盛放数据的逻辑概念；</li><li>实现集合的底层物理结构是数组和链表。底层的逻辑结构有在物理结构的基础上又封装了一层，对于使用者来说，不用关心内部的物理结构，通过方法直接来使用它的功能；</li><li>具备功能：添加，删除，查找获取，和直接获取有效元素的个数；</li><li>Java集合分为两类，Collection和Map（可理解为list和dict，但是种类复杂得多）；</li><li>只能存放对象；</li><li>容量自动调节。​<h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><h4 id="Collection简介"><a href="#Collection简介" class="headerlink" title="Collection简介"></a>Collection简介</h4>Collection层次结构中的根接口。Collection表示一组对象，这些对象也称为collection的元素。一些collection允许有重复的元素，而另一些则不允许。一些collection是有序的，而另一些则是无序的。JDK不提供此接口的任何直接实现：它提供更具体的子接口（如Set和List）实现。此接口通常用来传递collection，并在需要最大普遍性的地方操作这些collection。<br>Collection(java.util)继承了Iterable(java.lang)，所以集合都是可以迭代的,Iterable(java.lang)是集合类的最上层接口。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public interface Collection&lt;E&gt; extends Iterable&lt;E&gt; </span><br><span class="line"></span><br><span class="line">default void forEach(Consumer&lt;? super T&gt; action) &#123;// Iterable方法，1.8后增加，用于lambda遍历</span><br><span class="line">    Objects.requireNonNull(action);</span><br><span class="line">    for (T t : this) &#123;</span><br><span class="line">        action.accept(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="Collection方法"><a href="#Collection方法" class="headerlink" title="Collection方法"></a>Collection方法</h4><p>Collection里规定了很多方法：</p><p>添加:<br>add(Object obj),添加单个对象，addAll(Collection coll)：添加一组对象。</p><p>删除：<br>remove(Object o)，删除单个对象，removeAll(Collection c)，删除两个集合的交集部分，clear()：清空。</p><p>查找：<br>contains(Object o)，是否包含某个对象，containsAll(Collection c)，是否包含某个集合。</p><p>isEmpty()是否空集。</p><p>size()获取有效元素的个数。</p><p>Object[] toArray()返回所有对象。</p><p>retainAll(Collection c)保留当前集合与c交集的部分。</p><p>Iterator iterator()获取当前集合的迭代器对象，迭代器对象可用来遍历当前集合。</p><h4 id="Collection操作"><a href="#Collection操作" class="headerlink" title="Collection操作"></a>Collection操作</h4><p>操作Collection：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// c可以进行上述的方法操作</span><br><span class="line">Collection c = new ArrayList();</span><br></pre></td></tr></table></figure></p><h4 id="Collection特点"><a href="#Collection特点" class="headerlink" title="Collection特点"></a>Collection特点</h4><ol><li>Collection本身不可以直接而实例化对象，操作Collection就是操作的Collection的子类(可隔代)实例化对象操作。</li><li>Collection是一个上层概念，但是Collection还有上层，Collection的上层是Iterable，Collection继承了它。</li><li>Collection包含了集合的基本操作方法，但是大多数方法都未实现，只是定义了接口，需要不同的子接口根据需求自行实现。</li></ol><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>List是Collection的子接口之一，它实现了很多方法，除了父接口继承的以外又增加了一些。List的特点是单值，有序，可重复。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public interface List&lt;E&gt; extends Collection&lt;E&gt;</span><br></pre></td></tr></table></figure></p><h4 id="List方法"><a href="#List方法" class="headerlink" title="List方法"></a>List方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get， set， lastIndexOf， listIterator， subList等</span><br></pre></td></tr></table></figure><h4 id="List特点"><a href="#List特点" class="headerlink" title="List特点"></a>List特点</h4><ol><li>List是Collection的子接口，同时它也是一个上层接口，它不直接实现对象，使用List类型的集合需要使用实现了它的子类的实例；</li><li>List相较于Collection也增建了一些接口，但是都是抽象接口，它本身并未实现；</li><li>所有的List共有特点单值，有序，可重复；</li><li>它实现一个ListIterator迭代器，这个迭代器相较于Iterator又增加了一些实用的方法。</li></ol><h3 id="ArrayList和Vector-动态数组"><a href="#ArrayList和Vector-动态数组" class="headerlink" title="ArrayList和Vector(动态数组)"></a>ArrayList和Vector(动态数组)</h3><h4 id="共同父类AbstractCollection"><a href="#共同父类AbstractCollection" class="headerlink" title="共同父类AbstractCollection"></a>共同父类AbstractCollection</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public abstract class AbstractList&lt;E&gt; extends AbstractCollection&lt;E&gt; implements List&lt;E&gt;// 具体实现了indexOf和lastIndexOf，clear，addAll，</span><br></pre></td></tr></table></figure><p>AbstractList具体实现了indexOf和lastIndexOf，clear，addAll，removeRange等，定义（private class Itr implements Iterator<e>）内部类具体实现迭代的细节（内部类方式实现迭代）。</e></p><h4 id="两者异同比较"><a href="#两者异同比较" class="headerlink" title="两者异同比较"></a>两者异同比较</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 发行时间不同</span><br><span class="line"> * @since   1.2</span><br><span class="line">public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt; implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br><span class="line"></span><br><span class="line"> * @since   JDK1.0</span><br><span class="line">public class Vector&lt;E&gt; extends AbstractList&lt;E&gt; implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 底层实现物理结构都是数组</span><br><span class="line">transient Object[] elementData; // non-private to simplify nested class access</span><br><span class="line"></span><br><span class="line">protected Object[] elementData;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// 创建与扩容机制不同</span><br><span class="line">    private static final int DEFAULT_CAPACITY = 10;// 默认创建长度是10，但是初始化数组为空时集合长度0，直到加入数据时长度变为10</span><br><span class="line"></span><br><span class="line">    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;    </span><br><span class="line">    public ArrayList() &#123;</span><br><span class="line">        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">    private void grow(int minCapacity) &#123;</span><br><span class="line">        // overflow-conscious code</span><br><span class="line">        int oldCapacity = elementData.length;</span><br><span class="line">        int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);// 扩容1.5倍</span><br><span class="line">        if (newCapacity - minCapacity &lt; 0)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        // minCapacity is usually close to size, so this is a win:</span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Vector() &#123;</span><br><span class="line">        this(10);//初始是10字节</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private void grow(int minCapacity) &#123;</span><br><span class="line">        // overflow-conscious code</span><br><span class="line">        int oldCapacity = elementData.length;</span><br><span class="line">        int newCapacity = oldCapacity + ((capacityIncrement &gt; 0) ?</span><br><span class="line">                                         capacityIncrement : oldCapacity);// 扩容一倍或capacityIncrement多字节</span><br><span class="line">        if (newCapacity - minCapacity &lt; 0)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>异同总结：</p><ol><li>共同父类AbstractCollection，内部很多方法都基本一致；</li><li>两者底层实现都是数组的操作；</li><li>版本不同ArrayList(1.2)比Vector(1.0)新；</li><li>Vector线程安全，效率略低，ArrayList线程不安全，效率高</li><li>扩容机制不同通过无参构造创建Vector时，默认的数组的长度为10，当容量不够，扩容要么按照指定的capacityIncrement进行扩容，要么扩大为原来的2倍；通过无参构造创建ArrayList对象时，默认是初始化为一个长度为0空数组常量。如果一开始是初始化为空数组时，当添加第一个元素时，扩容为长度为10的数组。当容量再不够时，扩容为原来的1.5倍，尽量减少浪费。</li></ol><p>注意：ArrayList在JDK1.7及以前一开始就会扩容长度10的数组。</p><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class LinkedList&lt;E&gt;</span><br><span class="line">    extends AbstractSequentialList&lt;E&gt;</span><br><span class="line">    implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><p>LinkedList也是List的实现类，他的逻辑结构类似于双端连接的链表。</p><h4 id="LinkedList特点"><a href="#LinkedList特点" class="headerlink" title="LinkedList特点"></a>LinkedList特点</h4><ol><li>动态数组需要开辟连续的空间，而双向链表不需要，是通过结点(Node)的互相“引用，连接”的方法把集合的元素串起来；</li><li>LinkedList遍历查找的效率低，因为动态数组位置连续的，还可以根据索引index直接定位位置，而LinkedList只能从head或last两头开始遍历查找；</li><li>LinkedList在频繁的插入、指定对象删除一个对象时，效率反而高，因为不涉及移动大量的元素，只需要修改前后元素的next,pre即可。</li></ol><p>注意：实现List接口的还有一种集合，Stack，栈结构特点先入后出，平时使用并不多。</p><h3 id="List新增方法"><a href="#List新增方法" class="headerlink" title="List新增方法"></a>List新增方法</h3><ol><li>add，add(index, obj)：指定位置添加，addAll(index, Collection c)：指定位置插入集合c；</li><li>get(index)获取指定位置的元素；</li><li>indexOf(obj)：返回第一个找到的对象的索引，没有就返回-1，int lastIndexOf(Object o) ：返回最后一个找到的对象的索引，没有返回-1；</li><li>set(index,value)，设定指定位置对象；</li><li>subList(int fromIndex, int toIndex)，截取当前列表的一部分；</li><li>ListIterator  listIterator()，ListIterator继承了Iterator。<h4 id="ListIterator方法"><a href="#ListIterator方法" class="headerlink" title="ListIterator方法"></a>ListIterator方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* （1）hasPrevious()：是否有前一个元素</span><br><span class="line">* （2）previous() ：取出前一个元素</span><br><span class="line">* （3）add(Object)：说明可以在遍历的同时添加元素</span><br><span class="line">* （4）set(Object)：说明可以在遍历的同时替换元素</span><br><span class="line">* （5）nextIndex()：下一个元素的索引</span><br><span class="line">* （6）previousIndex()：前一个元素的索引</span><br></pre></td></tr></table></figure></li></ol><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set接口是Collection的子接口，set接口没有提供额外的方法，Set不保证添加顺序，数据不可重复。Set 判断两个对象是否相同不是使用 == 运算符，而是根据 equals 方法。因此存放到Set集合中的元素一定要注意equals方法的重写。Set的常用实现类有：HashSet、TreeSet、LinkedHashSet。</p><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><p>HashSet：依据元素的hashCode()和equals()方法，来确定它的存储的顺序和保证不可重复，认为两个对象equals相等，即是重复元素，不能保证元素的排列顺序，非线程安全，元素可以为null。底层也是数组，初始容量为16，当如果使用率超过0.75，（16*0.75=12）就会扩大容量为原来的2倍。</p><p>工作方式：当向HashSet集合中存入一个元素时，HashSet会调用该对象的hashCode()方法来得到该对象的hashCode值，然后根据hashCode值，通过某种散列函数决定该对象在HashSe 中的存储位置。（这个散列函数会与底层数组的长度相计算得到在数组中的下标，并且这种散列函数计算还尽可能保证能均匀存储元素，越是散列分布，该散列函数设计的越好）。如果两个元素的hashCode()值相等，会再继续调用equals方法，如果equals方法结果为true，添加失败，如果为false，那么会保存该元素，但是该数组的位置已经有元素了，那么会通过链表的方式继续链接。<br>TreeSet：依据元素的“大小”顺序来确定他的存储顺序和保证不可重复，认为两个对象“大小”相等，即是重复的元素，元素的“大小”顺序依赖于Comparable或Comparator的接口的实现方法。</p><h4 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h4><p>LinkedHashSet：LinkedHashSet是HashSet的子类，既延续了父类的特征，又扩展了一些特性，元素是有序的，比HashSet多维护了添加时前后元素的关系，效率低。</p><h3 id="集合遍历"><a href="#集合遍历" class="headerlink" title="集合遍历"></a>集合遍历</h3><p>集合遍历有三种方式：集合调用方法返回数组，然后通过for循环遍历数组；直接使用foreach遍历集合；通过迭代器遍历集合。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public void test()&#123;</span><br><span class="line">Collection big = new ArrayList();</span><br><span class="line">big.add(&quot;老大&quot;);</span><br><span class="line">big.add(&quot;老二&quot;);</span><br><span class="line">big.add(&quot;jefflike&quot;);</span><br><span class="line"></span><br><span class="line">// 方式一：for循环</span><br><span class="line">Object[] array = big.toArray();</span><br><span class="line">for (int i = 0; i &lt; array.length; i++) &#123;</span><br><span class="line">System.out.println(array[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 方式二：foreach</span><br><span class="line">       for (Object object : big) &#123;</span><br><span class="line">           System.out.println(object);</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       // 方式三：Iterator迭代</span><br><span class="line">       Iterator iterator = big.iterator();//直接就返回一个迭代器对象</span><br><span class="line">       while(iterator.hasNext())&#123;</span><br><span class="line">           Object next = iterator.next();</span><br><span class="line">           if(&quot;老大&quot;.equals(next))&#123;</span><br><span class="line">               iterator.remove();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       for (Object object : big) &#123;</span><br><span class="line">           System.out.println(object);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>三种遍历集合方式的比较：</p><ol><li>foreach和Iterator没有下标信息；</li><li>foreach不能修改元素；</li><li>for下标遍历应用不广泛，效率不如foreach高；</li><li>Iterator可以在遍历过程中进行删除，修改等操作；</li><li>迭代器是一个独立的对象，他有自己的方法与属性，它以内部类方式实现。</li></ol><p>集合的继承关系：<br><img src="http://p94ypeu3q.bkt.clouddn.com/TIM截图20180612200737.png" alt="TIM截图20180612200737"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在说集合之前，要先提一下数组这个数据结构。数组本身是一个线性的数据结构，从物理结构看是一个顺序存储结构。每次申请一段连续的空间，一旦申请到，
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>String StringBuffer和StringBiuld</title>
    <link href="http://yoursite.com/2018/06/11/StringAndStringBufferAndStringBiuld/"/>
    <id>http://yoursite.com/2018/06/11/StringAndStringBufferAndStringBiuld/</id>
    <published>2018-06-11T12:55:26.000Z</published>
    <updated>2018-06-11T15:30:43.066Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>通过前面查看String的源码，对String也有一定的了解了，String是编程语言里时常会使用到的数据类型，虽然Java里的String不是基本数据类型，但是他的重要性绝对不亚于基本数据类型的。关于String类型的问题，最大的一点就是String本身是一个不可变的数据类型，在完成大量的字符串拼接的情况下，非常的低效，所以后来就衍生出了可变字符序列。</p><h3 id="可变字符序列是怎样实现的"><a href="#可变字符序列是怎样实现的" class="headerlink" title="可变字符序列是怎样实现的"></a>可变字符序列是怎样实现的</h3><p>对于可变字符序列，他的底层还是字符数组，只是通过控制创建字符数组的长度，来减少新数组创建的次数，从而使得字符序列修改增删变得非常的便捷快速。</p><h3 id="代码细节-以StringBuffer为例"><a href="#代码细节-以StringBuffer为例" class="headerlink" title="代码细节(以StringBuffer为例)"></a>代码细节(以StringBuffer为例)</h3><p>底层实现依然是字符数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private transient char[] toStringCache;</span><br></pre></td></tr></table></figure></p><h4 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public StringBuffer() &#123;</span><br><span class="line">    super(16);// 初始化底层的字符数组的长度就是16</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public StringBuffer(int capacity) &#123;</span><br><span class="line">    super(capacity);// 可以指明初始化时的字符数组的长度</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public StringBuffer(String str) &#123;</span><br><span class="line">    super(str.length() + 16);</span><br><span class="line">    append(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public StringBuffer(CharSequence seq) &#123;</span><br><span class="line">    this(seq.length() + 16);</span><br><span class="line">    append(seq);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后两个构造器，初始化的字符数组的长度，比传入的字符大16，就是为了方便字符数组的扩容而准备充足的空间。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public synchronized int length() &#123;</span><br><span class="line">    return count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符数组的长度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public synchronized int capacity() &#123;</span><br><span class="line">    return value.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当前容器的容量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public synchronized char charAt(int index) &#123;</span><br><span class="line">    if ((index &lt; 0) || (index &gt;= count))</span><br><span class="line">        throw new StringIndexOutOfBoundsException(index);</span><br><span class="line">    return value[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>索引为index的字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public synchronized void setCharAt(int index, char ch) &#123;</span><br><span class="line">    if ((index &lt; 0) || (index &gt;= count))</span><br><span class="line">        throw new StringIndexOutOfBoundsException(index);</span><br><span class="line">    toStringCache = null;</span><br><span class="line">    value[index] = ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改索引为index的字符。</p><p>reverse方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public AbstractStringBuilder reverse() &#123;</span><br><span class="line">    boolean hasSurrogates = false;</span><br><span class="line">    int n = count - 1;</span><br><span class="line">    for (int j = (n-1) &gt;&gt; 1; j &gt;= 0; j--) &#123;</span><br><span class="line">        int k = n - j;</span><br><span class="line">        char cj = value[j];</span><br><span class="line">        char ck = value[k];</span><br><span class="line">        value[j] = ck;</span><br><span class="line">        value[k] = cj;</span><br><span class="line">        if (Character.isSurrogate(cj) ||</span><br><span class="line">            Character.isSurrogate(ck)) &#123;</span><br><span class="line">            hasSurrogates = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (hasSurrogates) &#123;</span><br><span class="line">        reverseAllValidSurrogatePairs();</span><br><span class="line">    &#125;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重载了很多序列增删改查的方法，具体实现都是继承的父类相应的方法。</p><p>父类的序列扩容策略：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private int newCapacity(int minCapacity) &#123;</span><br><span class="line">    // overflow-conscious code</span><br><span class="line">    int newCapacity = (value.length &lt;&lt; 1) + 2;// 扩容为两倍+2</span><br><span class="line">    if (newCapacity - minCapacity &lt; 0) &#123;</span><br><span class="line">        newCapacity = minCapacity;// 还不够就增加至当前的长度</span><br><span class="line">    &#125;</span><br><span class="line">    return (newCapacity &lt;= 0 || MAX_ARRAY_SIZE - newCapacity &lt; 0)</span><br><span class="line">        ? hugeCapacity(minCapacity)</span><br><span class="line">        : newCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private int hugeCapacity(int minCapacity) &#123;</span><br><span class="line">    if (Integer.MAX_VALUE - minCapacity &lt; 0) &#123; // overflow</span><br><span class="line">        throw new OutOfMemoryError();//字符长度超出容量的最大值了</span><br><span class="line">    &#125;</span><br><span class="line">    return (minCapacity &gt; MAX_ARRAY_SIZE)</span><br><span class="line">        ? minCapacity : MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最近看到有面试题将String，StringBuffer和StringBuilder拿来作比较，所以就看了一下这三种类型，并且将他们做一个比较。</p><ol><li>首先String是不可变的字符序列(不能原地修改)，StringBuffer和StringBuilder是可变字符序列(可以原地修改)；</li><li>String底层数组不可扩容，StringBuffer和StringBuilder底层数组可扩容，默认的长度是16字节，扩容时先扩大两倍+2，如果还不够则将字符数组的最小长度作为数组长度；</li><li>String可以直接创建常量值，而StringBuffer和StringBuilder只能用new的方式创建新对象；</li><li>StringBuffer和StringBuilder支持链式调用，例如append方法的返回值就是this，String是不可以链式调用的。</li></ol><p>StringBuffer和StringBuilder的区别是：<br>StringBuffer：线程安全，效率较慢；StringBuilder： 线程不安全，效率较高。这里效率指的是修改字符串的效率，当然效率快慢是这两者之间的比较，StringBuffer还是比String快的多的。<br>比较一下效率：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTime</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">testStringBuilder();</span><br><span class="line"><span class="comment">//testStringBuffer();</span></span><br><span class="line"><span class="comment">//testString();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testString</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">String s = <span class="keyword">new</span> String(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10000</span>;i++)&#123;</span><br><span class="line">s += i;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(s);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"String拼接+用时："</span>+(end-start));<span class="comment">//445</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> memory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class="line">        System.out.println(<span class="string">"String拼接+memory: "</span> + memory);<span class="comment">// 53169472</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testStringBuilder</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">StringBuilder s = <span class="keyword">new</span> StringBuilder(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10000</span>;i++)&#123;</span><br><span class="line">s.append(i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(s);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"StringBuilder拼接+用时："</span>+(end-start));<span class="comment">//10</span></span><br><span class="line"><span class="keyword">long</span> memory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class="line">        System.out.println(<span class="string">"StringBuilder拼接+memory: "</span> + memory);<span class="comment">//1950488</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testStringBuffer</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">StringBuffer s = <span class="keyword">new</span> StringBuffer(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10000</span>;i++)&#123;</span><br><span class="line">s.append(i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(s);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"StringBuffer拼接+用时："</span>+(end-start));<span class="comment">//12</span></span><br><span class="line"><span class="keyword">long</span> memory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class="line">        System.out.println(<span class="string">"StringBuffer拼接+memory: "</span> + memory);<span class="comment">//1950488</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;通过前面查看String的源码，对String也有一定的了解了，String是编程语言里时常会使用到的数据类型，虽然Java里的String
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>ClassLoader</title>
    <link href="http://yoursite.com/2018/06/10/ClassLoader/"/>
    <id>http://yoursite.com/2018/06/10/ClassLoader/</id>
    <published>2018-06-10T13:29:28.000Z</published>
    <updated>2018-06-10T13:40:08.992Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h3><p>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的java.lang.Class对象，<br>作为方法区中类数据的访问入口（即引用地址）。所有需要访问和使用类数据（类的成员等）只能通过这个Class对象。类加载(ClassLoader)的过程需要类加载器来完成。</p><h3 id="类加载器分类"><a href="#类加载器分类" class="headerlink" title="类加载器分类"></a>类加载器分类</h3><p>（1）引导类加载器（bootstrap class loader）<br>用来加载Java的核心库（JAVA_HOME/jre/lib/rt.jar或sun.boot.class.path路径下的内容），这个引导类加载器是用C/C++开发的。<br>（2）扩展类加载器（extensions class loader）<br>加载Java的扩展库（JAVA_HOME/jre/lib/ext/*.jar或java.ext.dirs路径下的内容）。<br>（3）应用程序类加载器（application class loader）<br>根据Java应用的类路径（classpath,java.class.path）的类，通俗的讲就是自定义类型。<br>（4）自定义类加载器<br>例如tomcat就是用自定义类 加载器去加载它需要的class类型，一般来说就是第三方但不是我们实现的类型。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;类加载过程&quot;&gt;&lt;a href=&quot;#类加载过程&quot; class=&quot;headerlink&quot; title=&quot;类加载过程&quot;&gt;&lt;/a&gt;类加载过程&lt;/h3&gt;&lt;p&gt;将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的jav
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Reflect</title>
    <link href="http://yoursite.com/2018/06/10/Reflect/"/>
    <id>http://yoursite.com/2018/06/10/Reflect/</id>
    <published>2018-06-10T01:42:44.000Z</published>
    <updated>2018-06-22T10:44:28.974Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h2><p>我们一般自己在编写代码的时侯，使用到某个类都是先声明再使用，即声明类，创建类对象，调用方法，我们知道我们要使用的类的各种细节(自己写的类，心中有数)，这种情况是不太需要使用Reflect的。但是在某些地方，比如通用性强的框架设计的代码里，框架设计者并不需要知道使用框架的人设计类的细节，所以，框架设计者需要为一个未知类创建对象，调用对象方法。即在运行时加载、探知、使用编译期间完全未知的类，这就是反射。反射体现了Java语言的动态性(虽然Java是一门静态语言)。</p><p>类加载完成后吗，在堆内存的方法区就成生了一个Class的对象(一个类只有一个Class对象)，这个Class对象包含这个类完整的结构信息，我们通过这个对象看类的结构的过程，我们就叫它反射。</p><h3 id="Reflect使用情景"><a href="#Reflect使用情景" class="headerlink" title="Reflect使用情景"></a>Reflect使用情景</h3><ol><li>动态的创建任意类型的对象；</li><li>获取任意类型的信息；</li><li>获取任意对象的属性并设置或获取它的属性值；</li><li>获取任意对象的方法并调用它。</li></ol><p>Reflect的根源是java.lang.Class，Class类的实例表示正在运行的Java应用程序中的类和接口(他认为枚举是一种类，注解是一种接口)。</p><p>注意：除了类(class)以外，每个数组属于被映射为Class对象的一个类，所有具有相同元素类型和维数的数组都共享该Class对象。基本的Java类型（boolean、byte、char、short、int、long、float 和 double）和关键字void也表示为Class对象。Java运行程序时，每一种类型被加载到内存后，都会产生这个类型的唯一的一个Class对象。</p><h3 id="获取某个类型的Class对象"><a href="#获取某个类型的Class对象" class="headerlink" title="获取某个类型的Class对象"></a>获取某个类型的Class对象</h3><p>获取运行时的Class的对象方式有四种：</p><ol><li>类型.class，要求是编译期间这个类型是已知的。</li><li>对象.getClass()，getClass()在java.lang.Object类声明，获取某个对象的运行时类型。</li><li>Class.forName(“类型的全名称”)，在运行期间获取某个类型的Class对象，这个对象编译时可能不存在，但是运行时必须要存在，否则会抛ClassNotFoundException。</li><li>ClassLoader对象.loadClass(“类型的全名称”)。<h4 id="类型-class"><a href="#类型-class" class="headerlink" title="类型.class"></a>类型.class</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestReflect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 类型.class</span></span><br><span class="line">        <span class="comment">// 引用数据类型</span></span><br><span class="line">        Class c1 = String.class;</span><br><span class="line">        System.out.println(c1);<span class="comment">// class java.lang.String</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接口</span></span><br><span class="line">        Class c2 = Runnable.class;</span><br><span class="line">        System.out.println(c2);<span class="comment">// interface java.lang.Runnable</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 枚举类型</span></span><br><span class="line">        Class c3 = ElementType.class;</span><br><span class="line">        System.out.println(c3);<span class="comment">// class java.lang.annotation.ElementType</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注解</span></span><br><span class="line">        Class c4 = Override.class;</span><br><span class="line">        System.out.println(c4);<span class="comment">// interface java.lang.Override</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基本数据类型</span></span><br><span class="line">        Class c5 = <span class="keyword">int</span>.class;</span><br><span class="line">        System.out.println(c5);<span class="comment">// int</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数组</span></span><br><span class="line">        Class c6 = <span class="keyword">int</span>[].class;</span><br><span class="line">        System.out.println(c6);<span class="comment">// class [I</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// void</span></span><br><span class="line">        Class c7 = <span class="keyword">void</span>.class;</span><br><span class="line">        System.out.println(c7);<span class="comment">// void</span></span><br><span class="line"></span><br><span class="line">        Class c8 = <span class="keyword">int</span>.class;</span><br><span class="line">        System.out.println(c5 == c8);<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        Class c10 = <span class="keyword">int</span>[][].class;</span><br><span class="line">        System.out.println(c6 == c10);<span class="comment">//维度不一样,不是同一个Class类 false</span></span><br><span class="line"></span><br><span class="line">        Class c11 = <span class="keyword">double</span>[].class;</span><br><span class="line">        System.out.println(c6 == c11);<span class="comment">//元素的数据类型不同，也不是同一个Class， false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>特点：</p><ol><li>在使用前已经知道确切的类型；</li><li>所有的Java在运行时都有确定的Class类型；</li><li>Java运行程序时，每一种类型被加载到内存后，都会产生这个类型的唯一的一个Class对象，所以两个int.class是同一个Class对象；</li><li>关于数组，相同的数组对象必须是类型，维度都一样才是相同的Class对象。<h3 id="对象-getClass"><a href="#对象-getClass" class="headerlink" title="对象.getClass()"></a>对象.getClass()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestReflect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对象.getClass()</span></span><br><span class="line">        <span class="comment">// 引用数据类型</span></span><br><span class="line">        Class c1 = <span class="keyword">new</span> String(<span class="string">"jefflike"</span>).getClass();</span><br><span class="line">        System.out.println(c1);<span class="comment">// class java.lang.String</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接口</span></span><br><span class="line">        Class c2 = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.getClass();</span><br><span class="line">        System.out.println(c2);<span class="comment">// class com.jeff.TestReflect$1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基本数据类型</span></span><br><span class="line"><span class="comment">//        Class c5 = 1.getClass();</span></span><br><span class="line"><span class="comment">//        System.out.println(c5);// 静态数据类型没有.class</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数组</span></span><br><span class="line">        Class c6 =  <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>].getClass();</span><br><span class="line">        System.out.println(c6);<span class="comment">// class [I</span></span><br><span class="line"></span><br><span class="line">        Class c12 = <span class="keyword">new</span> Student().getClass();</span><br><span class="line">        System.out.println(c12); <span class="comment">// class com.jeff.Student</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>结论：</p><ol><li>java.lang.Object实现了getClass()，且底层实现是非java实现的，所以基本数据类型是不具有getClass()方法的。</li><li>调用getClass()的是运行时的实例对象，所以使用这种方法必须要有一个instance。</li></ol><h3 id="Class-forName-“类型的全名称”"><a href="#Class-forName-“类型的全名称”" class="headerlink" title="Class.forName(“类型的全名称”)"></a>Class.forName(“类型的全名称”)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class c = Class.forName(<span class="string">"com.jeff.Test"</span>);</span><br><span class="line">System.out.println(c);<span class="comment">// class com.jeff.Test</span></span><br><span class="line"></span><br><span class="line">    Class c1 = Class.forName(<span class="string">"java.util.Scanner"</span>);</span><br><span class="line">    System.out.println(c1);<span class="comment">// class java.util.Scanner</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：</p><ol><li>因为文件可能不存在，所以需要处理ClassNotFoundException异常；</li><li>即使类在编译时不存在，在编译过程中也不会报错；</li><li>在运行时如果类型还是不存在，那么会抛出异常。<h3 id="ClassLoader对象-loadClass-“类型的全名称”"><a href="#ClassLoader对象-loadClass-“类型的全名称”" class="headerlink" title="ClassLoader对象.loadClass(“类型的全名称”)"></a>ClassLoader对象.loadClass(“类型的全名称”)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">    Class c2 = ClassLoader.getSystemClassLoader().loadClass(<span class="string">"com.jeff.Test"</span>);</span><br><span class="line">    System.out.println(c2);<span class="comment">// class com.jeff.Test</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>结论：与使用Class.forName(“类型的全名称”)基本上类似。</p><h2 id="反射的作用"><a href="#反射的作用" class="headerlink" title="反射的作用"></a>反射的作用</h2><h3 id="No-1-在运行期间创建任意类型的对象"><a href="#No-1-在运行期间创建任意类型的对象" class="headerlink" title="No.1 在运行期间创建任意类型的对象"></a>No.1 在运行期间创建任意类型的对象</h3><h4 id="Object-newInstance"><a href="#Object-newInstance" class="headerlink" title="Object newInstance()"></a>Object newInstance()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class c2 = ClassLoader.getSystemClassLoader().loadClass(&quot;com.jeff.Test&quot;);</span><br><span class="line">System.out.println(c2);// class com.jeff.Test</span><br><span class="line">Object instance1 = c2.newInstance();</span><br><span class="line">System.out.println(instance1);// com.jeff.Test@4554617c</span><br></pre></td></tr></table></figure><p>注意：使用此方法的类型必须包含无参构造，而且还不能是私有的无参构造器；</p><h4 id="构造器对象-newInstance-形参列表"><a href="#构造器对象-newInstance-形参列表" class="headerlink" title="构造器对象.newInstance([形参列表])"></a>构造器对象.newInstance([形参列表])</h4><p>要点：用Class对象，获取到这个类型的构造器对象，然后在调用构造器对象.newInstance([形参列表])。<br>既可以获取无参构造，也可以获取有参构造，还可以获取私有的构造器，有了构造器，就可以创建它的对象。<br>因为构造器可能被重载，一个类型可能存在多个构造器，需要通过形参列表来确定用哪一个构造器，关注的是构造器的形参的类型以及个数，顺序，对于形参名不关心。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">    pro.load(<span class="keyword">new</span> FileInputStream(<span class="string">"setting.properties"</span>)); <span class="comment">// 配置文件在项目内src外</span></span><br><span class="line">    String s = pro.getProperty(<span class="string">"key"</span>);</span><br><span class="line">    Class c3 = ClassLoader.getSystemClassLoader().loadClass(s);</span><br><span class="line">    System.out.println(c3);<span class="comment">//class com.atguigu.Test</span></span><br><span class="line">    Constructor cs = c3.getConstructor();<span class="comment">//获取无参构造,构造器可以不是public，但是不可以时私有</span></span><br><span class="line">    Object instance2 = cs.newInstance();</span><br><span class="line">    System.out.println(instance2);<span class="comment">// com.atguigu.Test@74a14482</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Properties pro = new Properties();</span><br><span class="line">pro.load(new FileInputStream(&quot;setting.properties&quot;)); // 配置文件在项目内src外</span><br><span class="line">String s = pro.getProperty(&quot;key&quot;);</span><br><span class="line">Class c3 = ClassLoader.getSystemClassLoader().loadClass(s);</span><br><span class="line"></span><br><span class="line">Constructor cs = c3.getConstructor(String.class, int.class);//获取形参列表是(String, int)的构造器,只返回制定参数类型访问权限是public的构造器</span><br><span class="line">Object instance3 = cs.newInstance(&quot;jeff&quot;, 25);</span><br><span class="line">System.out.println(instance3);// com.atguigu.Test@4554617c</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Constructor cs = c3.getDeclaredConstructor(String.class, int.class);//获取形参列表是(String, int)的构造器,只返回制定参数类型访问权限是public的构造器</span><br><span class="line">cs.setAccessible(true);</span><br><span class="line">Object instance3 = cs.newInstance(&quot;jeff&quot;, 25);</span><br><span class="line">System.out.println(instance3);// com.atguigu.Test@4554617c</span><br></pre></td></tr></table></figure><p>结论：</p><ol><li>Class对象获取它的构造器方法是getConstructor()；</li><li>获取无参构造器时方法内不需要传参数，但是无参构造器修饰符必须是public；</li><li>获取有参构造器时方法内需要传递相应的实参，构造器的修饰符也必须是public；</li><li>getDeclaredConstructor()可以获取任意修饰符的构造器，要取得构造器使用权限需设置构造器对象.setAccessible(true)；</li><li>向构造器提供相应参数即可创建对象。</li></ol><p>如此便可在运行过程中创建类的对象。</p><h3 id="No-2-动态获取类的各个属性"><a href="#No-2-动态获取类的各个属性" class="headerlink" title="No.2 动态获取类的各个属性"></a>No.2 动态获取类的各个属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//以String类型为例</span></span><br><span class="line">        Class clazz = String.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(1)获取类型全名称</span></span><br><span class="line">        System.out.println(<span class="string">"类型全名称："</span> + clazz.getName());<span class="comment">// 类型全名称：java.lang.String</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//(2)获取包名</span></span><br><span class="line">        Package p = clazz.getPackage();</span><br><span class="line">        System.out.println(<span class="string">"包名："</span> + p.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(3)获取类型的修饰符</span></span><br><span class="line">        <span class="keyword">int</span> mod = clazz.getModifiers();</span><br><span class="line">        System.out.println(<span class="string">"修饰符："</span> + mod);<span class="comment">//修饰符：17</span></span><br><span class="line">        <span class="comment">//修饰符类型Modifier</span></span><br><span class="line">        System.out.println(<span class="string">"修饰符："</span> + Modifier.toString(mod));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(4)获取直接父类</span></span><br><span class="line">        Class c = clazz.getSuperclass();</span><br><span class="line">        System.out.println(<span class="string">"父类："</span> + c.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(5)获取父接口们</span></span><br><span class="line">        System.out.println(<span class="string">"父接口们："</span>);</span><br><span class="line">        Class[] interfaces = clazz.getInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Class class1 : interfaces) &#123;</span><br><span class="line">            System.out.println(class1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"属性们："</span>);</span><br><span class="line">        <span class="comment">//(6)获取属性们</span></span><br><span class="line"><span class="comment">//clazz.getField(name)//获取具体的一个属性，而且是公共的</span></span><br><span class="line"><span class="comment">//clazz.getDeclaredField(name)//获取具体的一个属性，只有是它声明的</span></span><br><span class="line"><span class="comment">//clazz.getFields()//获取多个，都是公共的</span></span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();<span class="comment">//获取所有，只有是它声明的</span></span><br><span class="line">        <span class="comment">//为什么要把属性抽象为Field类型，因为所有的属性都有修饰符，数据类型，属性名，都有set,get的行为</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//(7)获取构造器们</span></span><br><span class="line">        System.out.println(<span class="string">"构造器们："</span>);</span><br><span class="line">        Constructor[] constructors = clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="comment">//构造器的共同特征：（1）修饰符（2）构造器名（3）形参列表（4）行为：创建对象newInstance()</span></span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(8)获取方法们</span></span><br><span class="line">        System.out.println(<span class="string">"方法们："</span>);</span><br><span class="line">        Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="comment">//方法的共同特征：（1）修饰符（2）返回值类型（3）方法名（4）形参列表（5）抛出的异常列表（6）行为：被调用 invoke</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：</p><ol><li>Java面向对象的应用非常广泛；</li><li>类中的所有成员都可以被抽象出来，成为一类；</li><li>当一个类可以有多个XX时，返回的往往是一个数组；<h3 id="No-3-动态获取，设置对象属性与属性值"><a href="#No-3-动态获取，设置对象属性与属性值" class="headerlink" title="No.3 动态获取，设置对象属性与属性值"></a>No.3 动态获取，设置对象属性与属性值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//1、获取类型的Class对象</span></span><br><span class="line">       Class clazz = Class.forName(<span class="string">"com.jeff.bean.Teacher"</span>);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//2、先创建或获取Teacher的对象</span></span><br><span class="line">       Object tea1 = clazz.newInstance();</span><br><span class="line">       Object tea2 = clazz.newInstance();</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//3、设置tea1对象的id属性值</span></span><br><span class="line">       <span class="comment">//(1)先获取id属性对象</span></span><br><span class="line">       Field idField = clazz.getDeclaredField(<span class="string">"id"</span>);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//(2)因为id属性是私有的，那么需要设置它可访问的权限</span></span><br><span class="line">       idField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//(3)设置tea1对象的id属性的值</span></span><br><span class="line">       <span class="comment">//参数一：哪个对象的id属性,这里tea1</span></span><br><span class="line">       <span class="comment">//参数二：设置为xx值</span></span><br><span class="line">       idField.set(tea1, <span class="number">1</span>);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//4、获取tea的id属性值</span></span><br><span class="line">       Object value1 = idField.get(tea1);<span class="comment">//参数：获取哪个对象的id属性</span></span><br><span class="line">       System.out.println(value1);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//5、可以设置tea2对象的id属性值和获取id属性值</span></span><br><span class="line">       idField.set(tea2, <span class="number">2</span>);</span><br><span class="line">       Object value2 = idField.get(tea2);<span class="comment">//参数：获取哪个对象的id属性</span></span><br><span class="line">       System.out.println(value2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="动态获取对象的属性"><a href="#动态获取对象的属性" class="headerlink" title="动态获取对象的属性"></a>动态获取对象的属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Properties pro = new Properties();</span><br><span class="line">pro.load(new FileInputStream(&quot;setting.properties&quot;)); // 配置文件在项目内src外</span><br><span class="line">String s = pro.getProperty(&quot;key&quot;);</span><br><span class="line">Class c3 = ClassLoader.getSystemClassLoader().loadClass(s);</span><br><span class="line">Field f = c3.getDeclaredField(&quot;id&quot;);</span><br><span class="line">System.out.println(f);// private int com.jeff.Test.id</span><br></pre></td></tr></table></figure><p>获取运行Class对象，并获取属性。</p><h4 id="动态设置对象的属性"><a href="#动态设置对象的属性" class="headerlink" title="动态设置对象的属性"></a>动态设置对象的属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Constructor cc = c3.getConstructor();//获取无参构造</span><br><span class="line">Object instance2 = cc.newInstance();</span><br><span class="line">Field f = c3.getDeclaredField(&quot;id&quot;);</span><br><span class="line">System.out.println(f);// private int com.jeff.Test.id</span><br><span class="line">f.setAccessible(true);</span><br><span class="line">f.set(instance2, 25);</span><br></pre></td></tr></table></figure><p>id属性是私有的，需要设置它可访问的权限,set设置此对象的值。</p><h4 id="动态获取对象的属性值"><a href="#动态获取对象的属性值" class="headerlink" title="动态获取对象的属性值"></a>动态获取对象的属性值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Properties pro = new Properties();</span><br><span class="line">pro.load(new FileInputStream(&quot;setting.properties&quot;)); // 配置文件在项目内src外</span><br><span class="line">String s = pro.getProperty(&quot;key&quot;);</span><br><span class="line">Class c3 = ClassLoader.getSystemClassLoader().loadClass(s);</span><br><span class="line"></span><br><span class="line">Constructor cc = c3.getConstructor();//获取无参构造</span><br><span class="line">Object instance2 = cc.newInstance();</span><br><span class="line">Field f = c3.getDeclaredField(&quot;id&quot;);</span><br><span class="line">System.out.println(f);// private int com.jeff.Test.id</span><br><span class="line">f.setAccessible(true);</span><br><span class="line">f.set(instance2, 25);</span><br><span class="line">Object a = f.get(instance2);</span><br><span class="line">System.out.println(a);// 25</span><br><span class="line">System.out.println(a instanceof Integer);// true</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>先得到运行的Class对象；</li><li>获得此对象的实例对象newInstance()；</li><li>获得属性对象Field；</li><li>操作属性对象set，get；</li><li>属性若是私有，需Class对象.getDeclaredField(属性名)获取属性对象；</li><li>操作它（set，get）需要设置它可访问的权限：属性对象.setAccessible(true)。<h3 id="No-4-动态调用对象的方法"><a href="#No-4-动态调用对象的方法" class="headerlink" title="No.4 动态调用对象的方法"></a>No.4 动态调用对象的方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Test &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    public Test()&#123;&#125;</span><br><span class="line">    public Test(String a, int b)&#123;</span><br><span class="line">        System.out.println(a + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void test(int id)&#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        System.out.println(this.id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        Properties pro = new Properties();</span><br><span class="line">        pro.load(new FileInputStream(&quot;setting.properties&quot;)); // 配置文件在项目内src外</span><br><span class="line">        String s = pro.getProperty(&quot;key&quot;);</span><br><span class="line">        Class c4 = ClassLoader.getSystemClassLoader().loadClass(s);</span><br><span class="line">        Object obj = c4.newInstance();</span><br><span class="line">        Method m = c4.getDeclaredMethod(&quot;test&quot;, int.class);</span><br><span class="line">        m.invoke(obj, 25);</span><br></pre></td></tr></table></figure></li></ol><h3 id="No-5-动态读取类与方法上的注解信息"><a href="#No-5-动态读取类与方法上的注解信息" class="headerlink" title="No.5 动态读取类与方法上的注解信息"></a>No.5 动态读取类与方法上的注解信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">// 动态读取自定义注解</span></span><br><span class="line">    <span class="comment">//(1)获取类型的Class对象</span></span><br><span class="line">    Class clazz = MyClass.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//(2)获取类上面的注解</span></span><br><span class="line">    <span class="comment">//获取指定的注解类型对象，返回的对象是Annotation对象</span></span><br><span class="line">    Annotation a = clazz.getDeclaredAnnotation(MyAnnotation.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//(3)获取注解的配置参数值</span></span><br><span class="line">    MyAnnotation m = (MyAnnotation) a;</span><br><span class="line">    String value = m.value();</span><br><span class="line">    System.out.println(value);<span class="comment">// jeff</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//(4)获取方法对象</span></span><br><span class="line">    Method m1 = clazz.getDeclaredMethod(<span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//(5)获取方法上的注解</span></span><br><span class="line">    Annotation a1 = m1.getDeclaredAnnotation(MyAnnotation.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//(6)获取注解的配置参数值</span></span><br><span class="line">    MyAnnotation m2 = (MyAnnotation) a1;</span><br><span class="line">    String value2 = m2.value();</span><br><span class="line">    System.out.println(value2);<span class="comment">// jefflike</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义注解</span></span><br><span class="line"><span class="meta">@MyAnnotation</span>(<span class="string">"jeff"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotation</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义注解</span></span><br><span class="line"><span class="comment">//@Target指明这个注解只能用在类上和方法上</span></span><br><span class="line"><span class="comment">//@Retention指明注解的生命周期，RUNTIME才能被反射读取到</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "jefflike"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>要能读取到注解信息，注解生命周期一定是RUNTIME。</li><li>getDeclaredAnnotation()方法得到的是Annotation类型，读取value值需要转化为MyAnnotation类型，Annotation没有value()。</li><li>自定义注解的value是一个方法，而不是属性。<h3 id="No-6-动态获取泛型父类的泛型实参"><a href="#No-6-动态获取泛型父类的泛型实参" class="headerlink" title="No.6 动态获取泛型父类的泛型实参"></a>No.6 动态获取泛型父类的泛型实参</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGenericType</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Son s = <span class="keyword">new</span> Son();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、声明泛型类,T是泛型形参</span></span><br><span class="line"><span class="comment">//这个T什么时候指定（1）创建它的对象（2）继承时</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span>&lt;<span class="title">T</span>,<span class="title">U</span>&gt;</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Class type;<span class="comment">//希望存储的是T的泛型的实参的类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//父类的构造器，无参构造</span></span><br><span class="line"><span class="comment">//子类继承时一定会调用父类的无参构造</span></span><br><span class="line">Father()&#123;</span><br><span class="line"><span class="comment">//因为Father是抽象类，不能直接创建对象，当子类创建对象时，会调用父类的无参构造，</span></span><br><span class="line"><span class="comment">//那么这个this代表的是正在创建的子类的对象</span></span><br><span class="line"><span class="comment">//this.getClass()获取的是运行时的子类的类型</span></span><br><span class="line"><span class="comment">//(1)获取子类的类型</span></span><br><span class="line">Class ziType = <span class="keyword">this</span>.getClass();</span><br><span class="line">System.out.println(ziType);</span><br><span class="line"></span><br><span class="line"><span class="comment">//(2)获取子类的泛型父类的类型</span></span><br><span class="line"><span class="comment">//Class fuType = ziType.getSuperclass();//这个方法可以获取父类的类型，但是不能包括泛型实参</span></span><br><span class="line"><span class="comment">//System.out.println(fuType);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值类型是Type，而不是Class，因为我们的泛型的父类的&lt;&gt;中可能还是T等各种情况，不是百分百是具体的类型</span></span><br><span class="line">Type type = ziType.getGenericSuperclass();</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为这里的子类是Father&lt;String&gt;，那么它是属于ParameterizedType</span></span><br><span class="line"><span class="comment">//(3)把泛型父类强制成ParameterizedType</span></span><br><span class="line">ParameterizedType p = (ParameterizedType) type;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(4)获取泛型父类的泛型实参的类型</span></span><br><span class="line">Type[] arr = p.getActualTypeArguments();</span><br><span class="line"></span><br><span class="line">type = arr[<span class="number">0</span>];</span><br><span class="line">System.out.println(<span class="string">"T的泛型实参的类型是："</span> + type);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//例如：在这里我想要获取T的泛型实参的类型</span></span><br><span class="line"><span class="comment">//转换为获取T的泛型实参的Class对象</span></span><br><span class="line"><span class="comment">//System.out.println("泛型实参的类型是：" + T.class);//错误的</span></span><br><span class="line">System.out.println(<span class="string">"泛型实参的类型是："</span> + type);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、声明子类，继承泛型父类，String是泛型实参</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">String</span>,<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>总结：</p><ol><li>泛型形参直接.class是不能获取当前泛型实参类型的；</li><li>获取当前对象泛型实参的方式是创建子类对象时会调用父类的无参构造，父类无参构造的this就是子类的对象；</li><li>Class包含了常用的所有的类型的class，但是不能包含T，E等泛型的类型，所以我们要使用Type（它是Class的父接口）；</li><li>Type的五种类型：<pre><code class="text">（1）传统的类型Class;（2）GenericArrayType：泛型的数组类型（3）ParameterizedType：参数类型      ArrayList&lt;String&gt;  Father&lt;String&gt;使用（4）TypeVariable：类型变量   &lt;T&gt; 使用（5）WildcarType：带通配符的泛型 &lt;?&gt;使用</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Reflect&quot;&gt;&lt;a href=&quot;#Reflect&quot; class=&quot;headerlink&quot; title=&quot;Reflect&quot;&gt;&lt;/a&gt;Reflect&lt;/h2&gt;&lt;p&gt;我们一般自己在编写代码的时侯，使用到某个类都是先声明再使用，即声明类，创建类对象，调用方法，我们知道
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>简单的设计模式</title>
    <link href="http://yoursite.com/2018/06/06/%E5%87%A0%E7%A7%8D%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/06/06/几种简单的设计模式/</id>
    <published>2018-06-06T10:16:03.000Z</published>
    <updated>2018-06-08T15:40:16.062Z</updated>
    
    <content type="html"><![CDATA[<p>首先设计模式并不是那一种编程语言所特有的。设计模式是所有编程语言的从业人员，在实际的编写代码过程中，对于解决某种，某些特定问题<br>比较优质的解决方案，设计模式代表的是一种种的思想，值得我们去学习和了解他。</p><p>本篇博客简单介绍一些简单的设计模式的思想及代码的简单实现。</p><h3 id="模板设计模式"><a href="#模板设计模式" class="headerlink" title="模板设计模式"></a>模板设计模式</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>这里的模板指的不是那种一成不变的模板，而是主体部分和格式是确定的（整体流程固定不变），少量的变化的部分由使用者修改（具体细节实现暂不确定），<br>不同的人实现的不尽相同。类似于请假条模板，整个模板的功能就是书面表达请假信息，格式固定，一般公司的请假条模板，会空出姓名和时间<br>由具体使用请假条对象的员工来填写。即当某个功能它的实现的算法结构（解题的思路，步骤）是固定的，但是其中某一小步，或几步的具体实现代码是不确定的，<br>是变化的，应该有使用者来决定。</p><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><p>在父类中编写这个功能，把能确定的部分先实现，把不能确定的部分，通过抽象方法暴露出来，给子类（使用者）来实现它。</p><h4 id="代码实现请假条模板"><a href="#代码实现请假条模板" class="headerlink" title="代码实现请假条模板"></a>代码实现请假条模板</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请假条的父模板</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tips</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所有人的请假条都是这个格式的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">write</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span> + getName() + <span class="string">",请假时间："</span> + getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">settName</span><span class="params">(String n)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">getTime</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(String t)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类实现请假条提供方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTips</span> <span class="keyword">extends</span> <span class="title">Tips</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String time;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">settName</span><span class="params">(String n)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTime</span><span class="params">(String t)</span> </span>&#123;</span><br><span class="line">        time = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Tips m = <span class="keyword">new</span> MyTips();</span><br><span class="line">m.settName(<span class="string">"jefflike"</span>);</span><br><span class="line">m.setTime(<span class="string">"7:00-9:00"</span>);</span><br><span class="line">System.out.println(m.write());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请假条格式固定，将填写姓名和时间的方法抽象给子类（也就是填写请假条的人）来实现。这样每个人拿到这个请假条模板直接就可以修改自己的<br>信息直接使用，就十分的方便。</p><h4 id="实现程序运行时间模板"><a href="#实现程序运行时间模板" class="headerlink" title="实现程序运行时间模板"></a>实现程序运行时间模板</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RunTime</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">getTime</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 我们不知道运行那段代码</span></span><br><span class="line">        RunCoding();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> stopTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stopTime - startTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">RunCoding</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubRunTime</span> <span class="keyword">extends</span> <span class="title">RunTime</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RunCoding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;<span class="number">100000000</span>; i++)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SubRunTime s = <span class="keyword">new</span> SubRunTime();</span><br><span class="line">        System.out.println(s.getTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们不需要知道子类到底进行测试时间的代码块是什么，我们将代码实现的整个过程固定下来，子类实现的代码块抽象成方法，让子类<br>自行决定，这样我们的功能固定，就是一个测试时间的功能，但是不论子类实现什么样的代码，只要想看运行时间，都可以继承我这个模板。<br>这与python的闭包装饰器的实现很相似，这就是模板设计模式。</p><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><p>我们一般会在使用一个对象的时候new一个对象，工厂模式的目的是将创建对象与使用对象的操作分离开。</p><h4 id="代码实现一个简单的汽车工厂"><a href="#代码实现一个简单的汽车工厂" class="headerlink" title="代码实现一个简单的汽车工厂"></a>代码实现一个简单的汽车工厂</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSimpleFactory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//(1)无工厂</span></span><br><span class="line">BMW b = <span class="keyword">new</span> BMW();</span><br><span class="line">b.run();</span><br><span class="line"></span><br><span class="line"><span class="comment">//(2)通过工厂</span></span><br><span class="line"><span class="comment">//与BMW被使用者解耦合</span></span><br><span class="line">Car car = SimpleFactory.getCar(<span class="number">1</span>);</span><br><span class="line">car.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BMW = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AUDI = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(<span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(type)&#123;</span><br><span class="line"><span class="keyword">case</span> BMW:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> BMW();</span><br><span class="line"><span class="keyword">case</span> AUDI:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Audi();</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMW</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"宝马跑。。。。"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Audi</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"奥迪跑..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用工厂造车，我们除了解耦了使用与生产的过程，同时我们隐藏了造车的具体细节，我们只需要知道自己想要一个什么车，我们就能得到<br>一个这个车的实例对象，而使用者并不需要知道怎么去造车。</p><h3 id="一般工厂模式"><a href="#一般工厂模式" class="headerlink" title="一般工厂模式"></a>一般工厂模式</h3><h4 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h4><p>在简单工厂模式中，只存在一个工厂类，即汽车工厂。这算是简单工厂模式的一个弊端，他的工厂功能单一，难以扩展。即现在我的工厂只能<br>生成奥迪或者宝马，我想再增加新的产品就必须修改我们的工厂类，这违背了面向对象设计模式的原则：对修改关闭，对扩展开放。<br>所以简单工厂的扩展性限制了他的使用范围。而一般工厂模式可以做到当增加一个新产品，不会涉及到修改原来的代码，只要扩展新的产品类和对应工厂类即可。</p><h4 id="实现思路-1"><a href="#实现思路-1" class="headerlink" title="实现思路"></a>实现思路</h4><p>建立多个工厂类，每个工厂只生产自己的单个商品，增加新商品就增加新的工厂类，而不需要修改原来的工厂代码。</p><h4 id="代码实现新工厂"><a href="#代码实现新工厂" class="headerlink" title="代码实现新工厂"></a>代码实现新工厂</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFactoryMethod</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Factory f = <span class="keyword">new</span> BMWFactory();</span><br><span class="line">Car car = f.getCar();</span><br><span class="line">car.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//(1)接口：产品的的标准</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//(2)接口的实现类们：产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMW</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"宝马"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Audi</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"奥迪"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QQ</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"qq"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//（3）多个工厂：每一个工厂只生产一种产品</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"><span class="function">Car <span class="title">getCar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMWFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> BMW <span class="title">getCar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> BMW();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AudiFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Audi <span class="title">getCar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Audi();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QQFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> QQ <span class="title">getCar</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> QQ();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般工厂模式创建太多的代码，但是更符合面向对象的设计原则。</p><h3 id="代理者模式"><a href="#代理者模式" class="headerlink" title="代理者模式"></a>代理者模式</h3><h4 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h4><p>代理者在我们生活中也有很多实例，比如中介就是代理的一员，我们的业务类只关注核心的，不易变的业务逻辑，而把一些复杂，多变的辅助功能交给代理完成。<br>我们买房子关注的就是交钱和入住的环节，剩下由中介完成即可，所以这就是代理。</p><h4 id="实现思路-2"><a href="#实现思路-2" class="headerlink" title="实现思路"></a>实现思路</h4><p>将被代理者作为实参传入代理者的代理方法中。</p><h4 id="代码实现中介"><a href="#代码实现中介" class="headerlink" title="代码实现中介"></a>代码实现中介</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProxy</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Buy b = <span class="keyword">new</span> Proxy(<span class="keyword">new</span> Customer());</span><br><span class="line">b.buy();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主题：联系代理者和被代理者的主题</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Buy</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//被代理者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Buy</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"付钱，拿钥匙入住，拿房本..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Buy</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Buy target;<span class="comment">//被代理者的目标</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Buy target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">doBefore();</span><br><span class="line"></span><br><span class="line"><span class="comment">//核心业务功能，由被代理者自己完成</span></span><br><span class="line">target.buy();</span><br><span class="line"></span><br><span class="line">doAfter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"寻找房源，甄别房源的真实性，是否是有抵押，是否是凶宅..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfter</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"尾款的交付，物业的交割..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h4 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h4><p>单例模式就是某个类型在整个系统运行期间，有且只有唯一的一个对象。单例模式在代码中使用的还是非常广泛的。比如再flask框架中，<br>request对象时多个，并且每个用户的request对象都不一样，但是核心app对象（处理request等）就只有一个，处理不同request对象的<br>都是唯一一个app核心对象。</p><h4 id="实现思路-3"><a href="#实现思路-3" class="headerlink" title="实现思路"></a>实现思路</h4><p>单例的实现就是不想让使用者自己随意的创造实例对象，而是调用类已经创建好的对象。所以，我们需要暴露得到对象的方法，但是又隐藏<br>构造器（没法直接new新的对象）。</p><h4 id="coding实现单例模式"><a href="#coding实现单例模式" class="headerlink" title="coding实现单例模式"></a>coding实现单例模式</h4><p>最简洁的单例模式（饿汉式）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Singleton&#123;</span><br><span class="line">INSTANCE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>enum的枚举对象就是隐藏了私有的构造器，当我们只有一个枚举对象的时候，就实现了单例模式。</p><p>饿汉式之二<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hungry</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Hungry INSTANCE  = <span class="keyword">new</span> Hungry();</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Hungry</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>JDK1.5之前枚举类型的实现，这也是单例模式。</p><p>饿汉式之三<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> E INSTANCE  = <span class="keyword">new</span> E();</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">E</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> E <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>直接将获取实例的操作也私有化。</p><p>饿汉式的单例模式的问题是在创建类的时候就已经创建对象了，与之不同的是懒汉式，懒汉的特点就是用的时候在创建，未调用时实例并未创建。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lazy</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Lazy instance;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Lazy</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当用户调用这个方法时，说明需要这个对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Lazy <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">instance = <span class="keyword">new</span> Lazy();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样的懒汉式单例模式存在问题，在并发的调用时会存在多个线程同时抢夺到公共资源instance，此时instance的值为null那么这些线程每个人都有一个<br>Lazy的对象，这就不是一个单例模式了。</p><p>所以改良一下这个单例模式。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SingleTon s = SingleTon.getInstance();</span><br><span class="line">        SingleTon s1 = SingleTon.getInstance();</span><br><span class="line">        SingleTon s2 = SingleTon.getInstance();</span><br><span class="line">        System.out.println(s == s1);</span><br><span class="line">        System.out.println(s2 == s1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleTon instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingleTon.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> SingleTon();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先设计模式并不是那一种编程语言所特有的。设计模式是所有编程语言的从业人员，在实际的编写代码过程中，对于解决某种，某些特定问题&lt;br&gt;比较优质的解决方案，设计模式代表的是一种种的思想，值得我们去学习和了解他。&lt;/p&gt;
&lt;p&gt;本篇博客简单介绍一些简单的设计模式的思想及代码的简
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java-String类型(三)</title>
    <link href="http://yoursite.com/2018/06/05/Java-String%E7%B1%BB%E5%9E%8B-%E4%B8%89/"/>
    <id>http://yoursite.com/2018/06/05/Java-String类型-三/</id>
    <published>2018-06-05T11:06:55.000Z</published>
    <updated>2018-06-21T09:25:44.382Z</updated>
    
    <content type="html"><![CDATA[<p>继续接着上一篇博客内容继续讲，看到源码的1925行，里面很多一部分都是注释，大部分的方法介绍的都很全面，基本上读完注释，使用<br>起来没什么难度。这说明了，写代码多写注释确实是一个很好的习惯。<a id="more"></a></p><h4 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public String substring(int beginIndex) &#123;</span><br><span class="line">    if (beginIndex &lt; 0) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(beginIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    int subLen = value.length - beginIndex;</span><br><span class="line">    if (subLen &lt; 0) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(subLen);</span><br><span class="line">    &#125;</span><br><span class="line">    return (beginIndex == 0) ? this : new String(value, beginIndex, subLen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只传一个数值参数，如果是0则返回整个string对象，否则要创建新的字符串，从beginIndex一直复制到末尾的位置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public String substring(int beginIndex, int endIndex) &#123;</span><br><span class="line">    if (beginIndex &lt; 0) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(beginIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    if (endIndex &gt; value.length) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(endIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    int subLen = endIndex - beginIndex;</span><br><span class="line">    if (subLen &lt; 0) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(subLen);</span><br><span class="line">    &#125;</span><br><span class="line">    return ((beginIndex == 0) &amp;&amp; (endIndex == value.length)) ? this</span><br><span class="line">            : new String(value, beginIndex, subLen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个是重载的加强版，new String(value, beginIndex, subLen)，创建一个从index到end的新字符串。</p><h4 id="subSequence"><a href="#subSequence" class="headerlink" title="subSequence"></a>subSequence</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public CharSequence subSequence(int beginIndex, int endIndex) &#123;</span><br><span class="line">    return this.substring(beginIndex, endIndex);// 底层的实现是substring方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public String concat(String str) &#123;</span><br><span class="line">    int otherLen = str.length();</span><br><span class="line">    if (otherLen == 0) &#123;// 如果拼接的是空串</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line">    int len = value.length;</span><br><span class="line">    char buf[] = Arrays.copyOf(value, len + otherLen);</span><br><span class="line">    str.getChars(buf, len);// 就是这个地方实现的拼接，这个方法用于拼接</span><br><span class="line">    return new String(buf, true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>concat虽然实现了+=一样的效果，但是底层并不是用+=实现的。使用了str.getChars(buf, len)。</p><h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public String replace(char oldChar, char newChar) &#123;</span><br><span class="line">    if (oldChar != newChar) &#123;</span><br><span class="line">        int len = value.length;</span><br><span class="line">        int i = -1;</span><br><span class="line">        char[] val = value; /* avoid getfield opcode */</span><br><span class="line"></span><br><span class="line">        while (++i &lt; len) &#123;</span><br><span class="line">            if (val[i] == oldChar) &#123;//遍历找到i</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (i &lt; len) &#123;</span><br><span class="line">            char buf[] = new char[len];</span><br><span class="line">            for (int j = 0; j &lt; i; j++) &#123;</span><br><span class="line">                buf[j] = val[j];// 新的字符数组</span><br><span class="line">            &#125;</span><br><span class="line">            while (i &lt; len) &#123;</span><br><span class="line">                char c = val[i];//并换掉之前的字符</span><br><span class="line">                buf[i] = (c == oldChar) ? newChar : c;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            return new String(buf, true);// 同理返回的是一个新的字符串</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="matches"><a href="#matches" class="headerlink" title="matches"></a>matches</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean matches(String regex) &#123;</span><br><span class="line">    return Pattern.matches(regex, this);//与正则是否匹配</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean contains(CharSequence s) &#123;</span><br><span class="line">    return indexOf(s.toString()) &gt; -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>contains的实现就是查看这个序列的字符串能不能索引的到，能索引的到肯定是有这个子串的。</p><h4 id="replaceFirst"><a href="#replaceFirst" class="headerlink" title="replaceFirst"></a>replaceFirst</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 正则匹配到的第一个，将其替换</span><br><span class="line">    public String replaceFirst(String regex, String replacement) &#123;</span><br><span class="line">        return Pattern.compile(regex).matcher(this).replaceFirst(replacement);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll"></a>replaceAll</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 先是匹配到所有的正则的字符串，然后都替换成新的str</span><br><span class="line">    public String replaceAll(String regex, String replacement) &#123;</span><br><span class="line">        return Pattern.compile(regex).matcher(this).replaceAll(replacement);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="replace-1"><a href="#replace-1" class="headerlink" title="replace"></a>replace</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public String replace(CharSequence target, CharSequence replacement) &#123;</span><br><span class="line">    return Pattern.compile(target.toString(), Pattern.LITERAL).matcher(</span><br><span class="line">            this).replaceAll(Matcher.quoteReplacement(replacement.toString()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>replace也是全部替换，但是他不可以使用正则匹配，虽然他的底层使用了正则。</p><h4 id="split"><a href="#split" class="headerlink" title="split"></a>split</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">public String[] split(String regex, int limit) &#123;</span><br><span class="line">    /* fastpath if the regex is a</span><br><span class="line">     (1)one-char String and this character is not one of the</span><br><span class="line">        RegEx&apos;s meta characters &quot;.$|()[&#123;^?*+\\&quot;, or</span><br><span class="line">     (2)two-char String and the first char is the backslash and</span><br><span class="line">        the second is not the ascii digit or ascii letter.</span><br><span class="line">     */</span><br><span class="line">    char ch = 0;</span><br><span class="line">    // 验证正则</span><br><span class="line">    if (((regex.value.length == 1 &amp;&amp;</span><br><span class="line">         &quot;.$|()[&#123;^?*+\\&quot;.indexOf(ch = regex.charAt(0)) == -1) ||</span><br><span class="line">         (regex.length() == 2 &amp;&amp;</span><br><span class="line">          regex.charAt(0) == &apos;\\&apos; &amp;&amp;</span><br><span class="line">          (((ch = regex.charAt(1))-&apos;0&apos;)|(&apos;9&apos;-ch)) &lt; 0 &amp;&amp;</span><br><span class="line">          ((ch-&apos;a&apos;)|(&apos;z&apos;-ch)) &lt; 0 &amp;&amp;</span><br><span class="line">          ((ch-&apos;A&apos;)|(&apos;Z&apos;-ch)) &lt; 0)) &amp;&amp;</span><br><span class="line">        (ch &lt; Character.MIN_HIGH_SURROGATE ||</span><br><span class="line">         ch &gt; Character.MAX_LOW_SURROGATE))</span><br><span class="line">    &#123;</span><br><span class="line">        int off = 0;</span><br><span class="line">        int next = 0;</span><br><span class="line">        boolean limited = limit &gt; 0;</span><br><span class="line">        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        while ((next = indexOf(ch, off)) != -1) &#123;</span><br><span class="line">            if (!limited || list.size() &lt; limit - 1) &#123;</span><br><span class="line">                list.add(substring(off, next));</span><br><span class="line">                off = next + 1;</span><br><span class="line">            &#125; else &#123;    // last one</span><br><span class="line">                //assert (list.size() == limit - 1);</span><br><span class="line">                list.add(substring(off, value.length));</span><br><span class="line">                off = value.length;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // If no match was found, return this</span><br><span class="line">        if (off == 0)</span><br><span class="line">            return new String[]&#123;this&#125;;</span><br><span class="line"></span><br><span class="line">        // Add remaining segment</span><br><span class="line">        if (!limited || list.size() &lt; limit)</span><br><span class="line">            list.add(substring(off, value.length));</span><br><span class="line"></span><br><span class="line">        // Construct result</span><br><span class="line">        int resultSize = list.size();</span><br><span class="line">        if (limit == 0) &#123;</span><br><span class="line">            while (resultSize &gt; 0 &amp;&amp; list.get(resultSize - 1).length() == 0) &#123;</span><br><span class="line">                resultSize--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] result = new String[resultSize];</span><br><span class="line">        return list.subList(0, resultSize).toArray(result);</span><br><span class="line">    &#125;</span><br><span class="line">    return Pattern.compile(regex).split(this, limit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String[] split(String regex) &#123;</span><br><span class="line">    return split(regex, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是可以根据正则切割。</p><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public static String join(CharSequence delimiter, CharSequence... elements) &#123;</span><br><span class="line">    Objects.requireNonNull(delimiter);</span><br><span class="line">    Objects.requireNonNull(elements);</span><br><span class="line">    // Number of elements not likely worth Arrays.stream overhead.</span><br><span class="line">    StringJoiner joiner = new StringJoiner(delimiter);</span><br><span class="line">    for (CharSequence cs: elements) &#123;</span><br><span class="line">        joiner.add(cs);</span><br><span class="line">    &#125;</span><br><span class="line">    return joiner.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public StringJoiner(CharSequence delimiter,</span><br><span class="line">                    CharSequence prefix,</span><br><span class="line">                    CharSequence suffix) &#123;</span><br><span class="line">    Objects.requireNonNull(prefix, &quot;The prefix must not be null&quot;);</span><br><span class="line">    Objects.requireNonNull(delimiter, &quot;The delimiter must not be null&quot;);</span><br><span class="line">    Objects.requireNonNull(suffix, &quot;The suffix must not be null&quot;);</span><br><span class="line">    // make defensive copies of arguments</span><br><span class="line">    this.prefix = prefix.toString();</span><br><span class="line">    this.delimiter = delimiter.toString();</span><br><span class="line">    this.suffix = suffix.toString();</span><br><span class="line">    this.emptyValue = this.prefix + this.suffix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public StringJoiner add(CharSequence newElement) &#123;</span><br><span class="line">    prepareBuilder().append(newElement);</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static String join(CharSequence delimiter,</span><br><span class="line">        Iterable&lt;? extends CharSequence&gt; elements) &#123;</span><br><span class="line">    Objects.requireNonNull(delimiter);</span><br><span class="line">    Objects.requireNonNull(elements);</span><br><span class="line">    StringJoiner joiner = new StringJoiner(delimiter);</span><br><span class="line">    for (CharSequence cs: elements) &#123;</span><br><span class="line">        joiner.add(cs);</span><br><span class="line">    &#125;</span><br><span class="line">    return joiner.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@since 1.8才有的这个方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jie</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">String c = <span class="string">"丁"</span>;</span><br><span class="line">String d = <span class="string">"杰"</span>;</span><br><span class="line">System.out.println(String.join(<span class="string">","</span>, c, d, <span class="string">"是大帅哥"</span>));<span class="comment">// 丁,杰,是大帅哥</span></span><br><span class="line">System.out.println(<span class="string">"dingjie@123.com"</span>.replaceFirst(<span class="string">"\\w+"</span>, <span class="string">"jefflike"</span>));<span class="comment">//jefflike@123.com</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个join是一个静态的方法，实现的功能类似于python的join效果。将字符串Sequence放到StringJoiner中，StringJoiner实现这个效果。</p><h4 id="toLowerCase与toUpperCase"><a href="#toLowerCase与toUpperCase" class="headerlink" title="toLowerCase与toUpperCase"></a>toLowerCase与toUpperCase</h4><p>Java在实现这两个方法的过程上花了很大的篇幅，主要是考虑到实现的过程中保证线程安全。</p><h4 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public String trim() &#123;</span><br><span class="line">    int len = value.length;</span><br><span class="line">    int st = 0;</span><br><span class="line">    char[] val = value;    /* avoid getfield opcode */</span><br><span class="line"></span><br><span class="line">    while ((st &lt; len) &amp;&amp; (val[st] &lt;= &apos; &apos;)) &#123;</span><br><span class="line">    //找出前面空串的长度</span><br><span class="line">    &#125;</span><br><span class="line">        st++;</span><br><span class="line">    &#125;</span><br><span class="line">    while ((st &lt; len) &amp;&amp; (val[len - 1] &lt;= &apos; &apos;)) &#123;</span><br><span class="line">    //找出后面空串的长度</span><br><span class="line">    &#125;</span><br><span class="line">        len--;</span><br><span class="line">    &#125;</span><br><span class="line">    // 通过字串截除有效的长度</span><br><span class="line">    return ((st &gt; 0) || (len &lt; value.length)) ? substring(st, len) : this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="toCharArray"><a href="#toCharArray" class="headerlink" title="toCharArray"></a>toCharArray</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public char[] toCharArray() &#123;</span><br><span class="line">    // Cannot use Arrays.copyOf because of class initialization order issues</span><br><span class="line">    char result[] = new char[value.length];</span><br><span class="line">    System.arraycopy(value, 0, result, 0, value.length);</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为底层就是String的字符数组，所以直接copy过来返回就可以了。</p><h4 id="format"><a href="#format" class="headerlink" title="format"></a>format</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static String format(String format, Object... args) &#123;</span><br><span class="line">    return new Formatter().format(format, args).toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static String format(Locale l, String format, Object... args) &#123;</span><br><span class="line">    return new Formatter(l).format(format, args).toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态的format方法1.5以后有的，调用Formatter实例对象实现。</p><h4 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf"></a>valueOf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static String valueOf(Object obj) &#123;</span><br><span class="line">    return (obj == null) ? &quot;null&quot; : obj.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static String valueOf(char data[]) &#123;</span><br><span class="line">    return new String(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static String valueOf(char data[], int offset, int count) &#123;</span><br><span class="line">    return new String(data, offset, count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//可以看bollean的valueOf</span><br><span class="line">public static String valueOf(boolean b) &#123;</span><br><span class="line">    return b ? &quot;true&quot; : &quot;false&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于传入一个非null的对象，结果就是此对象的toString()方法。</p><h4 id="copyValueOf"><a href="#copyValueOf" class="headerlink" title="copyValueOf"></a>copyValueOf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static String copyValueOf(char data[], int offset, int count) &#123;</span><br><span class="line">    return new String(data, offset, count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static String copyValueOf(char data[]) &#123;</span><br><span class="line">    return new String(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 各种基本数据类型都可以作为此方法的参数</span><br><span class="line">public static String valueOf(char c) &#123;</span><br><span class="line">    char data[] = &#123;c&#125;;</span><br><span class="line">    return new String(data, true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与上面的方法基本一致，只是返回的是一个新的字符串对象。</p><h4 id="intern"><a href="#intern" class="headerlink" title="intern"></a>intern</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public native String intern();</span><br></pre></td></tr></table></figure><p>这个方法的功能是将堆中的字符串数据作为常量存放到方法区的常量区，底层的代码实现不是用Java实现的，所以修饰符是native。</p><p>以上就是String的所有方法了，在实现String的代码过程中：</p><ol><li>String的底层都是使用字符数组完成各项操作；</li><li>大量使用注释，方便学习阅读各个方法的使用细节；</li><li>面向对象编程，大量使用重载和封装，减少代码冗余；</li><li>大量封装代码，减少代码复用；</li><li>在代码实现的细节上，首先会进行特殊值判断，null，length的特殊值，临界值等；</li><li>字符串常量存储在字符串常量池，目的是为了共享，字符串非常量对象存储在堆中。</li><li>关于常量所在区域：常量与常量的拼接结果在常量池，只要其中有一个是变量，结果就在堆中，如果拼接的结果调用intern()方法，就在常量池中。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = &quot;123&quot;;// 字符串常量</span><br><span class="line">str1 = new String(&quot;123&quot;); // 非字符串常量，存储在堆中</span><br></pre></td></tr></table></figure></li></ol><p>非常浅显的整理了一下String的源码，有些代码写得很精妙，但是还无法彻底领会，随着后面深入理解Java还会再次修改这里面的一些内容。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继续接着上一篇博客内容继续讲，看到源码的1925行，里面很多一部分都是注释，大部分的方法介绍的都很全面，基本上读完注释，使用&lt;br&gt;起来没什么难度。这说明了，写代码多写注释确实是一个很好的习惯。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>String类型源码解析(二)</title>
    <link href="http://yoursite.com/2018/06/04/Java-String%E7%B1%BB%E5%9E%8B-%E4%BA%8C/"/>
    <id>http://yoursite.com/2018/06/04/Java-String类型-二/</id>
    <published>2018-06-04T10:37:48.000Z</published>
    <updated>2018-06-11T12:52:04.986Z</updated>
    
    <content type="html"><![CDATA[<p>本篇继续介绍String类的源码，从常用的类方法开始介绍。<a id="more"></a></p><h4 id="String的长度"><a href="#String的长度" class="headerlink" title="String的长度"></a>String的长度</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public int length() &#123;</span><br><span class="line">    return value.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为字符串的底层是由字符数组存放的就是char[] value，所以这个字符数组的长度就是有效的String对象的长度。</p><h4 id="String是否为空"><a href="#String是否为空" class="headerlink" title="String是否为空"></a>String是否为空</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean isEmpty() &#123;</span><br><span class="line">    return value.length == 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，判断字符串对象是否为空就是判断底层字符数组是否长度为0.</p><h4 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a>charAt()</h4><p>取出字符串中索引为index的字符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public char charAt(int index) &#123;</span><br><span class="line">    if ((index &lt; 0) || (index &gt;= value.length)) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(index);</span><br><span class="line">    &#125;// 不在合理返回会抛出异常</span><br><span class="line">    return value[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同理，返回的就是字符数组的相应索引的值。</p><h4 id="codePointAt"><a href="#codePointAt" class="headerlink" title="codePointAt()"></a>codePointAt()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public int codePointAt(int index) &#123;</span><br><span class="line">    if ((index &lt; 0) || (index &gt;= value.length)) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(index);</span><br><span class="line">    &#125;</span><br><span class="line">    return Character.codePointAtImpl(value, index, value.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(new String(new char[]&#123;&apos;\u1234&apos;,&apos;\u4e01&apos;, &apos;\u6607&apos;&#125;, 0, 1).codePointAt(0));//4660</span><br><span class="line">System.out.println(new String(new char[]&#123;&apos;\u4e01&apos;, &apos;\u6607&apos;&#125;, 0, 1).codePointAt(0));//19969</span><br><span class="line">System.out.println(new String(new char[]&#123;&apos;j&apos;, &apos;e&apos;, &apos;f&apos;, &apos;f&apos;, &apos;l&apos;, &apos;i&apos;, &apos;k&apos;, &apos;e&apos;&#125;, 4, 4).codePointAt(1));//105</span><br><span class="line">      System.out.println(new String(new char[]&#123;&apos;j&apos;, &apos;e&apos;, &apos;f&apos;, &apos;f&apos;, &apos;l&apos;, &apos;i&apos;, &apos;k&apos;, &apos;e&apos;&#125;, 4, 4).codePointAt(2));//107</span><br><span class="line">      System.out.println(new String(new char[]&#123;&apos;j&apos;, &apos;e&apos;, &apos;f&apos;, &apos;f&apos;, &apos;l&apos;, &apos;i&apos;, &apos;k&apos;, &apos;e&apos;&#125;, 4, 4).codePointAt(3));//102</span><br></pre></td></tr></table></figure><p>index索引的char转化为十进制的值（其实就是Unicode编码值，体现为十进制数字），底层是字符的codePointAtImpl方法实现的。</p><h4 id="codePointBefore"><a href="#codePointBefore" class="headerlink" title="codePointBefore"></a>codePointBefore</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public int codePointBefore(int index) &#123;</span><br><span class="line">    int i = index - 1;</span><br><span class="line">    if ((i &lt; 0) || (i &gt;= value.length)) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(index);</span><br><span class="line">    &#125;</span><br><span class="line">    return Character.codePointBeforeImpl(value, index, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(new String(new char[]&#123;&apos;j&apos;, &apos;e&apos;, &apos;f&apos;, &apos;f&apos;, &apos;l&apos;, &apos;i&apos;, &apos;k&apos;, &apos;e&apos;&#125;, 4, 4).codePointBefore(1));//108</span><br><span class="line">System.out.println(new String(new char[]&#123;&apos;j&apos;, &apos;e&apos;, &apos;f&apos;, &apos;f&apos;, &apos;l&apos;, &apos;i&apos;, &apos;k&apos;, &apos;e&apos;&#125;, 4, 4).codePointBefore(2));//105</span><br><span class="line">System.out.println(new String(new char[]&#123;&apos;j&apos;, &apos;e&apos;, &apos;f&apos;, &apos;f&apos;, &apos;l&apos;, &apos;i&apos;, &apos;k&apos;, &apos;e&apos;&#125;, 4, 4).codePointBefore(3));//107</span><br></pre></td></tr></table></figure><p>作用是：index索引前一个字符转化为十进制的值。实现方式与上面完全一致。完全可以调用上面的方法，传入index-1实现。</p><h4 id="codePointCount"><a href="#codePointCount" class="headerlink" title="codePointCount()"></a>codePointCount()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public int codePointCount(int beginIndex, int endIndex) &#123;</span><br><span class="line">    if (beginIndex &lt; 0 || endIndex &gt; value.length || beginIndex &gt; endIndex) &#123;</span><br><span class="line">        throw new IndexOutOfBoundsException();</span><br><span class="line">    &#125;</span><br><span class="line">    return Character.codePointCountImpl(value, beginIndex, endIndex - beginIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(new String(new char[]&#123;&apos;j&apos;, &apos;e&apos;, &apos;f&apos;, &apos;f&apos;, &apos;l&apos;, &apos;i&apos;, &apos;k&apos;, &apos;e&apos;&#125;).codePointCount(1,7));//6</span><br></pre></td></tr></table></figure><p>统计区间中的字符数，半闭半开区间。</p><h4 id="offsetByCodePoints"><a href="#offsetByCodePoints" class="headerlink" title="offsetByCodePoints"></a>offsetByCodePoints</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public int offsetByCodePoints(int index, int codePointOffset) &#123;</span><br><span class="line">    if (index &lt; 0 || index &gt; value.length) &#123;</span><br><span class="line">        throw new IndexOutOfBoundsException();</span><br><span class="line">    &#125;</span><br><span class="line">    return Character.offsetByCodePointsImpl(value, 0, value.length,</span><br><span class="line">            index, codePointOffset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>个人觉得这个方法貌似没什么用，value从index到codePointOffset的长度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(new String(new char[]&#123;&apos;j&apos;, &apos;e&apos;, &apos;f&apos;, &apos;f&apos;, &apos;l&apos;, &apos;i&apos;, &apos;k&apos;, &apos;e&apos;&#125;).offsetByCodePoints(1,7));//8</span><br><span class="line">System.out.println(new String(new char[]&#123;&apos;j&apos;, &apos;e&apos;, &apos;f&apos;, &apos;f&apos;, &apos;l&apos;, &apos;i&apos;, &apos;k&apos;, &apos;e&apos;&#125;).offsetByCodePoints(1,1));//2</span><br></pre></td></tr></table></figure></p><h4 id="getChars"><a href="#getChars" class="headerlink" title="getChars"></a>getChars</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void getChars(char dst[], int dstBegin) &#123;</span><br><span class="line">    System.arraycopy(value, 0, dst, dstBegin, value.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin) &#123;</span><br><span class="line">    if (srcBegin &lt; 0) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(srcBegin);</span><br><span class="line">    &#125;</span><br><span class="line">    if (srcEnd &gt; value.length) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(srcEnd);</span><br><span class="line">    &#125;</span><br><span class="line">    if (srcBegin &gt; srcEnd) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(srcEnd - srcBegin);</span><br><span class="line">    &#125;</span><br><span class="line">    System.arraycopy(value, srcBegin, dst, dstBegin, srcEnd - srcBegin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暂时不知道会用在哪里，没有返回值，但是会从原字符串切一段。</p><h4 id="getBytes"><a href="#getBytes" class="headerlink" title="getBytes()"></a>getBytes()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Deprecated</span><br><span class="line">public void getBytes(int srcBegin, int srcEnd, byte dst[], int dstBegin) &#123;</span><br><span class="line">    if (srcBegin &lt; 0) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(srcBegin);</span><br><span class="line">    &#125;</span><br><span class="line">    if (srcEnd &gt; value.length) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(srcEnd);</span><br><span class="line">    &#125;</span><br><span class="line">    if (srcBegin &gt; srcEnd) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(srcEnd - srcBegin);</span><br><span class="line">    &#125;</span><br><span class="line">    Objects.requireNonNull(dst);</span><br><span class="line"></span><br><span class="line">    int j = dstBegin;</span><br><span class="line">    int n = srcEnd;</span><br><span class="line">    int i = srcBegin;</span><br><span class="line">    char[] val = value;   /* avoid getfield opcode */</span><br><span class="line"></span><br><span class="line">    while (i &lt; n) &#123;</span><br><span class="line">        dst[j++] = (byte)val[i++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的无返回值的getBytes()已经不使用的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public byte[] getBytes(String charsetName)</span><br><span class="line">        throws UnsupportedEncodingException &#123;</span><br><span class="line">    if (charsetName == null) throw new NullPointerException();</span><br><span class="line">    return StringCoding.encode(charsetName, value, 0, value.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将整段字符串的每个字节按照相应的编码转换成二进制存放到byte[]。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">byte</span>[] str = <span class="string">"丁杰"</span>.getBytes(<span class="string">"utf-8"</span>);<span class="comment">//utf8每个汉字是三个字节，</span></span><br><span class="line">System.out.println(str[<span class="number">0</span>]);<span class="comment">//-28</span></span><br><span class="line">System.out.println(str[<span class="number">1</span>]);<span class="comment">//-72</span></span><br><span class="line">System.out.println(str[<span class="number">2</span>]);<span class="comment">//-127</span></span><br><span class="line">System.out.println(str[<span class="number">3</span>]);<span class="comment">//-26</span></span><br><span class="line">System.out.println(str[<span class="number">4</span>]);<span class="comment">//-99</span></span><br><span class="line">System.out.println(str[<span class="number">5</span>]);<span class="comment">//-80</span></span><br><span class="line">System.out.println(str[<span class="number">6</span>]);<span class="comment">//异常</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(UnsupportedEncodingException e)&#123;</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals(Object anObject) &#123;</span><br><span class="line">    if (this == anObject) &#123;// 首先，比较的两者都是同一个对象，那么返回ture</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    if (anObject instanceof String) &#123;// 如果传进来进行比较的也是String类型的对象</span><br><span class="line">        String anotherString = (String)anObject;//强制类型转换</span><br><span class="line">        int n = value.length;</span><br><span class="line">        if (n == anotherString.value.length) &#123;//首先两者的字符的长度一定是相等的</span><br><span class="line">            char v1[] = value;</span><br><span class="line">            char v2[] = anotherString.value;</span><br><span class="line">            int i = 0;</span><br><span class="line">            while (n-- != 0) &#123;//长度等于零的时候停止循环，整个遍历的过程只要出现两者的字符不相等情况就返回false停止循环</span><br><span class="line">                if (v1[i] != v2[i])</span><br><span class="line">                    return false;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>String继承了超级父类Object，所以他也有equals方法，并且String重写了父类的equals方法。先进行了一系列的操作，然后遍历底层的两个<br>字符数组，判断两者的字符是否完全一致，只有两者完全一致的情况下才会返回true。</p><h4 id="contentEquals"><a href="#contentEquals" class="headerlink" title="contentEquals"></a>contentEquals</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public boolean contentEquals(StringBuffer sb) &#123;</span><br><span class="line">        return contentEquals((CharSequence)sb);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">public boolean contentEquals(CharSequence cs) &#123;</span><br><span class="line">    // Argument is a StringBuffer, StringBuilder</span><br><span class="line">    if (cs instanceof AbstractStringBuilder) &#123;</span><br><span class="line">        if (cs instanceof StringBuffer) &#123;</span><br><span class="line">            synchronized(cs) &#123;</span><br><span class="line">               return nonSyncContentEquals((AbstractStringBuilder)cs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return nonSyncContentEquals((AbstractStringBuilder)cs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // Argument is a String</span><br><span class="line">    if (cs instanceof String) &#123;</span><br><span class="line">        return equals(cs);</span><br><span class="line">    &#125;</span><br><span class="line">    // Argument is a generic CharSequence</span><br><span class="line">    char v1[] = value;</span><br><span class="line">    int n = v1.length;</span><br><span class="line">    if (n != cs.length()) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        if (v1[i] != cs.charAt(i)) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配合下面的方法，判断出String与StringBuffer对象内容完全相等。</p><h4 id="nonSyncContentEquals"><a href="#nonSyncContentEquals" class="headerlink" title="nonSyncContentEquals"></a>nonSyncContentEquals</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private boolean nonSyncContentEquals(AbstractStringBuilder sb) &#123;</span><br><span class="line">    char v1[] = value;</span><br><span class="line">    char v2[] = sb.getValue();</span><br><span class="line">    int n = v1.length;</span><br><span class="line">    if (n != sb.length()) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        if (v1[i] != v2[i]) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断字符串与AbstractStringBuilder对象的值（内容也是字符串类似的）是否完全相等。也是遍历比较的方式。</p><h4 id="equalsIgnoreCase"><a href="#equalsIgnoreCase" class="headerlink" title="equalsIgnoreCase"></a>equalsIgnoreCase</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">public boolean equalsIgnoreCase(String anotherString) &#123;</span><br><span class="line">    return (this == anotherString) ? true</span><br><span class="line">            : (anotherString != null)</span><br><span class="line">            &amp;&amp; (anotherString.value.length == value.length)</span><br><span class="line">            &amp;&amp; regionMatches(true, 0, anotherString, 0, value.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean regionMatches(boolean ignoreCase, int toffset,</span><br><span class="line">        String other, int ooffset, int len) &#123;</span><br><span class="line">    char ta[] = value;</span><br><span class="line">    int to = toffset;</span><br><span class="line">    char pa[] = other.value;</span><br><span class="line">    int po = ooffset;</span><br><span class="line">    // Note: toffset, ooffset, or len might be near -1&gt;&gt;&gt;1.</span><br><span class="line">    if ((ooffset &lt; 0) || (toffset &lt; 0)</span><br><span class="line">            || (toffset &gt; (long)value.length - len)</span><br><span class="line">            || (ooffset &gt; (long)other.value.length - len)) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    while (len-- &gt; 0) &#123;</span><br><span class="line">        char c1 = ta[to++];</span><br><span class="line">        char c2 = pa[po++];</span><br><span class="line">        if (c1 == c2) &#123;//两个都一样继续</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        if (ignoreCase) &#123;</span><br><span class="line">            // If characters don&apos;t match but case may be ignored,</span><br><span class="line">            // try converting both characters to uppercase.</span><br><span class="line">            // If the results match, then the comparison scan should</span><br><span class="line">            // continue.</span><br><span class="line">            char u1 = Character.toUpperCase(c1);// 开启了大小写忽略，两个字符不一样会进行比较</span><br><span class="line">            char u2 = Character.toUpperCase(c2);</span><br><span class="line">            if (u1 == u2) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            // Unfortunately, conversion to uppercase does not work properly</span><br><span class="line">            // for the Georgian alphabet, which has strange rules about case</span><br><span class="line">            // conversion.  So we need to make one last check before</span><br><span class="line">            // exiting.</span><br><span class="line">            if (Character.toLowerCase(u1) == Character.toLowerCase(u2)) &#123;</span><br><span class="line">                continue;// 好像是为了重新验证（last check before exiting）一下，转为小写是不是能走到这个分支。</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;//出现不匹配就false</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较并忽略大小写。返回的是一个三元表达式，比较的两个字符串是同一个对象会返回true，否则则要判断两者的内容了，对象不能是null，<br>长度要相等，并且每一个字符还要匹配（regionMatches）。</p><h4 id="startsWith"><a href="#startsWith" class="headerlink" title="startsWith"></a>startsWith</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public boolean startsWith(String prefix, int toffset) &#123;// 字符串prefix用于查找</span><br><span class="line">    char ta[] = value;//原字符串的字符数组</span><br><span class="line">    int to = toffset;</span><br><span class="line">    char pa[] = prefix.value;开始的字符串的字符数组</span><br><span class="line">    int po = 0;//从索引0开始比较</span><br><span class="line">    int pc = prefix.value.length;//字符串prefix长度</span><br><span class="line">    // Note: toffset might be near -1&gt;&gt;&gt;1.</span><br><span class="line">    if ((toffset &lt; 0) || (toffset &gt; value.length - pc)) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    while (--pc &gt;= 0) &#123;// 逐位比较</span><br><span class="line">        if (ta[to++] != pa[po++]) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean startsWith(String prefix) &#123;// 是不是某个字符串开头</span><br><span class="line">    return startsWith(prefix, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="endsWith"><a href="#endsWith" class="headerlink" title="endsWith"></a>endsWith</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public boolean endsWith(String suffix) &#123;</span><br><span class="line">// 调用的还是startsWith的那个方法</span><br><span class="line">    return startsWith(suffix, value.length - suffix.value.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public int hashCode() &#123;</span><br><span class="line">    int h = hash;// 默认的hash是0</span><br><span class="line">    if (h == 0 &amp;&amp; value.length &gt; 0) &#123;//初始的hash并且str是有值的</span><br><span class="line">        char val[] = value;</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; value.length; i++) &#123;// 计算hash值</span><br><span class="line">            h = 31 * h + val[i];</span><br><span class="line">        &#125;</span><br><span class="line">        hash = h;</span><br><span class="line">    &#125;</span><br><span class="line">    return h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将hash的字符串的char数组逐个遍历hash = 31 * hash + val[i]，就实现了hash的计算。</p><h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public int indexOf(int ch) &#123;//调用下面的方法</span><br><span class="line">    return indexOf(ch, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int indexOf(int ch, int fromIndex) &#123;</span><br><span class="line">    final int max = value.length;//最长遍历长度</span><br><span class="line">    if (fromIndex &lt; 0) &#123;// 范围不对的fromIndex会被默认为0或者不存在</span><br><span class="line">        fromIndex = 0;</span><br><span class="line">    &#125; else if (fromIndex &gt;= max) &#123;</span><br><span class="line">        // Note: fromIndex might be near -1&gt;&gt;&gt;1.</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (ch &lt; Character.MIN_SUPPLEMENTARY_CODE_POINT) &#123;// 0x010000即65535，也就是有效输入</span><br><span class="line">        // handle most cases here (ch is a BMP code point or a</span><br><span class="line">        // negative value (invalid code point))</span><br><span class="line">        final char[] value = this.value;//从前往后找到第一个相同char的下标</span><br><span class="line">        for (int i = fromIndex; i &lt; max; i++) &#123;</span><br><span class="line">            if (value[i] == ch) &#123;</span><br><span class="line">                return i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;//找不到就返回-1</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return indexOfSupplementary(ch, fromIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Handles (rare) calls of indexOf with a supplementary(追加的) character</span><br><span class="line">private int indexOfSupplementary(int ch, int fromIndex) &#123;</span><br><span class="line">    if (Character.isValidCodePoint(ch)) &#123;</span><br><span class="line">        final char[] value = this.value;</span><br><span class="line">        final char hi = Character.highSurrogate(ch);</span><br><span class="line">        final char lo = Character.lowSurrogate(ch);</span><br><span class="line">        final int max = value.length - 1;</span><br><span class="line">        for (int i = fromIndex; i &lt; max; i++) &#123;</span><br><span class="line">            if (value[i] == hi &amp;&amp; value[i + 1] == lo) &#123;</span><br><span class="line">                return i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public int lastIndexOf(int ch) &#123;</span><br><span class="line">    return lastIndexOf(ch, value.length - 1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int lastIndexOf(int ch, int fromIndex) &#123;</span><br><span class="line">    if (ch &lt; Character.MIN_SUPPLEMENTARY_CODE_POINT) &#123;</span><br><span class="line">        // handle most cases here (ch is a BMP code point or a</span><br><span class="line">        // negative value (invalid code point))</span><br><span class="line">        final char[] value = this.value;</span><br><span class="line">        int i = Math.min(fromIndex, value.length - 1);//等于遍历时从大到小，从后遍历到前面</span><br><span class="line">        for (; i &gt;= 0; i--) &#123;</span><br><span class="line">            if (value[i] == ch) &#123;</span><br><span class="line">                return i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return lastIndexOfSupplementary(ch, fromIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private int lastIndexOfSupplementary(int ch, int fromIndex) &#123;</span><br><span class="line">    if (Character.isValidCodePoint(ch)) &#123;</span><br><span class="line">        final char[] value = this.value;</span><br><span class="line">        char hi = Character.highSurrogate(ch);</span><br><span class="line">        char lo = Character.lowSurrogate(ch);</span><br><span class="line">        int i = Math.min(fromIndex, value.length - 2);</span><br><span class="line">        for (; i &gt;= 0; i--) &#123;</span><br><span class="line">            if (value[i] == hi &amp;&amp; value[i + 1] == lo) &#123;</span><br><span class="line">                return i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lastIndexOf与IndexOf的实现基本上差不多，lastIndexOf的实现就是从后往前找到第一个匹配的并返回索引。两者的差别就是遍历，一个<br>从零往后++,另一个从后往前从length往前–。</p><p>重载indexOf方法，传入一个字符串对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">public int indexOf(String str) &#123;</span><br><span class="line">    return indexOf(str, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int indexOf(String str, int fromIndex) &#123;</span><br><span class="line">    return indexOf(value, 0, value.length,</span><br><span class="line">            str.value, 0, str.value.length, fromIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static int indexOf(char[] source, int sourceOffset, int sourceCount,</span><br><span class="line">        String target, int fromIndex) &#123;</span><br><span class="line">    return indexOf(source, sourceOffset, sourceCount,</span><br><span class="line">                   target.value, 0, target.value.length,</span><br><span class="line">                   fromIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 传入一个字符串，到了这里，参数的意义分别是source是原string的字符数组，sourceOffset，sourceCount是这个字符数组从0到str的总长度</span><br><span class="line">// target是查找的数组的字符数组，targetOffset，targetCount是它从0到总长度，fromIndex是查找的起始的位置。</span><br><span class="line">static int indexOf(char[] source, int sourceOffset, int sourceCount,</span><br><span class="line">        char[] target, int targetOffset, int targetCount,</span><br><span class="line">        int fromIndex) &#123;</span><br><span class="line">    // 排除特殊值</span><br><span class="line">    if (fromIndex &gt;= sourceCount) &#123;</span><br><span class="line">        return (targetCount == 0 ? sourceCount : -1);</span><br><span class="line">    &#125;</span><br><span class="line">    if (fromIndex &lt; 0) &#123;</span><br><span class="line">        fromIndex = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    if (targetCount == 0) &#123;</span><br><span class="line">        return fromIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    char first = target[targetOffset];</span><br><span class="line">    int max = sourceOffset + (sourceCount - targetCount);//执行循环的次数</span><br><span class="line"></span><br><span class="line">    for (int i = sourceOffset + fromIndex; i &lt;= max; i++) &#123;</span><br><span class="line">        /* Look for first character. */</span><br><span class="line">        if (source[i] != first) &#123;</span><br><span class="line">            while (++i &lt;= max &amp;&amp; source[i] != first);//一直找到两个str首字符相同再比较</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* Found first character, now look at the rest of v2 */</span><br><span class="line">        if (i &lt;= max) &#123;//i要是&gt;max查找的str的长度肯定就比i后面的str部分长，没有必要比较了</span><br><span class="line">            int j = i + 1;</span><br><span class="line">            int end = j + targetCount - 1;</span><br><span class="line">            // 两个str要是不相等中途就break了，j的长度&lt;end</span><br><span class="line">            for (int k = targetOffset + 1; j &lt; end &amp;&amp; source[j]</span><br><span class="line">                    == target[k]; j++, k++);</span><br><span class="line"></span><br><span class="line">            //j的长度&lt;end，进不了这个判断的分支</span><br><span class="line">            if (j == end) &#123;</span><br><span class="line">                /* Found whole string. */</span><br><span class="line">                return i - sourceOffset;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">public int lastIndexOf(String str) &#123;</span><br><span class="line">    return lastIndexOf(str, value.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int lastIndexOf(String str, int fromIndex) &#123;</span><br><span class="line">    return lastIndexOf(value, 0, value.length,</span><br><span class="line">            str.value, 0, str.value.length, fromIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static int lastIndexOf(char[] source, int sourceOffset, int sourceCount,</span><br><span class="line">        String target, int fromIndex) &#123;</span><br><span class="line">    return lastIndexOf(source, sourceOffset, sourceCount,</span><br><span class="line">                   target.value, 0, target.value.length,</span><br><span class="line">                   fromIndex);</span><br><span class="line">&#125;</span><br><span class="line">static int lastIndexOf(char[] source, int sourceOffset, int sourceCount,</span><br><span class="line">        char[] target, int targetOffset, int targetCount,</span><br><span class="line">        int fromIndex) &#123;</span><br><span class="line">    /*</span><br><span class="line">     * Check arguments; return immediately where possible. For</span><br><span class="line">     * consistency, don&apos;t check for null str.</span><br><span class="line">     */</span><br><span class="line">    int rightIndex = sourceCount - targetCount;</span><br><span class="line">    if (fromIndex &lt; 0) &#123;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    if (fromIndex &gt; rightIndex) &#123;</span><br><span class="line">        fromIndex = rightIndex;</span><br><span class="line">    &#125;</span><br><span class="line">    /* Empty string always matches. */</span><br><span class="line">    if (targetCount == 0) &#123;</span><br><span class="line">        return fromIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int strLastIndex = targetOffset + targetCount - 1;</span><br><span class="line">    char strLastChar = target[strLastIndex];</span><br><span class="line">    int min = sourceOffset + targetCount - 1;</span><br><span class="line">    int i = min + fromIndex;</span><br><span class="line"></span><br><span class="line">startSearchForLastChar:// 这个语法用于循环的跳转，类似于goto</span><br><span class="line">    while (true) &#123;</span><br><span class="line">        while (i &gt;= min &amp;&amp; source[i] != strLastChar) &#123;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        if (i &lt; min) &#123;</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        int j = i - 1;</span><br><span class="line">        int start = j - (targetCount - 1);</span><br><span class="line">        int k = strLastIndex - 1;</span><br><span class="line"></span><br><span class="line">        while (j &gt; start) &#123;</span><br><span class="line">            if (source[j--] != target[k--]) &#123;</span><br><span class="line">                i--;</span><br><span class="line">                continue startSearchForLastChar;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return start - sourceOffset + 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>last的实现也是类似于从右到左的实现了indexOf。</p><p>看了这么多的方法，可以得到一个结论，String在底层的实现都是字符数组的操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇继续介绍String类的源码，从常用的类方法开始介绍。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>String类型源码解析（一）</title>
    <link href="http://yoursite.com/2018/06/03/Java-String%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/06/03/Java-String类型/</id>
    <published>2018-06-03T13:48:17.000Z</published>
    <updated>2018-06-11T15:05:57.872Z</updated>
    
    <content type="html"><![CDATA[<p>要讲Java的String类型，我们需要结合他的代码来看，根据源码的解读可以更好的理解Java底层实现的具体细节，所以这次的博客篇幅会比较的长，所以我会分成几个部分来写，希望通过源码的解读，学习到优秀的Java代码该如何实现。</p><p>本篇博客介绍String类的基本属性和众多的构造器，构造器的重载，体现出Java的多态性。</p><h3 id="java-lang-String简介"><a href="#java-lang-String简介" class="headerlink" title="java.lang.String简介"></a>java.lang.String简介</h3><p>1.8版本String<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* Copyright (c) 1994, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line">* ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span><br></pre></td></tr></table></figure></p><p>String包声明在java.lang下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br></pre></td></tr></table></figure></p><p>String包简介：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* @author  Lee Boynton//作者们</span><br><span class="line">* @author  Arthur van Hoff</span><br><span class="line">* @author  Martin Buchholz</span><br><span class="line">* @author  Ulf Zibis</span><br><span class="line">* @see     java.lang.Object#toString()// 另请参阅</span><br><span class="line">* @see     java.lang.StringBuffer</span><br><span class="line">* @see     java.lang.StringBuilder</span><br><span class="line">* @see     java.nio.charset.Charset</span><br><span class="line">* @since   JDK1.0//版本号</span><br></pre></td></tr></table></figure></p><h3 id="String类声明属性"><a href="#String类声明属性" class="headerlink" title="String类声明属性"></a>String类声明属性</h3><h4 id="String类声明"><a href="#String类声明" class="headerlink" title="String类声明"></a>String类声明</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>final表示String类是不可被继承的，String实现了Serializable（可序列化）接口，Comparable（可比较）接口，CharSequence（字符序列）接口。</p><h4 id="value属性"><a href="#value属性" class="headerlink" title="value属性"></a>value属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/** The value is used for character storage. */</span><br><span class="line">private final char value[];</span><br></pre></td></tr></table></figure><p>The value is used for character storage.就是说这个声明的value数组用于存储字符，这个value非常的重要，String的底层实现都靠它来是实现。</p><p>并且声明的char类型的value数组使用final修饰，说明底层存储String对象是将String中的每一个字符存放到一个<code>不可变</code>的char类型的数组中。</p><h4 id="hash属性"><a href="#hash属性" class="headerlink" title="hash属性"></a>hash属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/** Cache the hash code for the string */</span><br><span class="line">private int hash; // Default to 0</span><br></pre></td></tr></table></figure><p>默认缓存一个String的hash值，空列表（空字符串）的hash值默认是成员变量的初始默认值，这里是int类型，所以是0.</p><h4 id="serialVersionUID属性"><a href="#serialVersionUID属性" class="headerlink" title="serialVersionUID属性"></a>serialVersionUID属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/** use serialVersionUID from JDK 1.0.2 for interoperability */</span><br><span class="line">private static final long serialVersionUID = -6849794470754667710L;</span><br></pre></td></tr></table></figure><p>定义了一个静态的serialVersionUID常量。作为IO时对象存入文件时使用。</p><h3 id="String构造器们"><a href="#String构造器们" class="headerlink" title="String构造器们"></a>String构造器们</h3><h4 id="无参构造器"><a href="#无参构造器" class="headerlink" title="无参构造器"></a>无参构造器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Initializes a newly created &#123;@code String&#125; object so that it represents</span><br><span class="line"> * an empty character sequence.  Note that use of this constructor is</span><br><span class="line"> * unnecessary since Strings are immutable.</span><br><span class="line"> */</span><br><span class="line">public String() &#123;</span><br><span class="line">    this.value = &quot;&quot;.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个构造器：无参构造器<br>使用String的无参构造器生成的对象默认是一个空字符串。我们可以使用代码验证一下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> String());<span class="comment">// 调用字符串的无参构造器，会生成一个空字符串对象</span></span><br><span class="line">System.out.println(<span class="number">1</span>+<span class="keyword">new</span> String()+<span class="number">2</span>);<span class="comment">//12 这里生成的是一个字符串拼接的结果</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="传入String对象构造器"><a href="#传入String对象构造器" class="headerlink" title="传入String对象构造器"></a>传入String对象构造器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Initializes a newly created &#123;@code String&#125; object so that it represents</span><br><span class="line"> * the same sequence of characters as the argument; in other words, the</span><br><span class="line"> * newly created string is a copy of the argument string. Unless an</span><br><span class="line"> * explicit(明确的) copy of &#123;@code original&#125; is needed, use of this constructor is</span><br><span class="line"> * unnecessary since Strings are immutable(不可变的).</span><br><span class="line"> *</span><br><span class="line"> * @param  original</span><br><span class="line"> *         A &#123;@code String&#125;</span><br><span class="line"> */</span><br><span class="line">public String(String original) &#123;</span><br><span class="line">    this.value = original.value;</span><br><span class="line">    this.hash = original.hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个构造器：传入String对象<br>String的有参构造器中可以传入一个字符串类型的对象，此构造器初始化字符串类型的value数组与hash值。in other words, the newly created string is a copy of the argument string.意思是换句话说，新创建的字符串复制了参数的字符串。</p><h4 id="传入字符数组构造器"><a href="#传入字符数组构造器" class="headerlink" title="传入字符数组构造器"></a>传入字符数组构造器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Allocates a new &#123;@code String&#125; so that it represents the sequence of</span><br><span class="line"> * characters currently contained in the character array argument. The</span><br><span class="line"> * contents of the character array are copied; subsequent modification of</span><br><span class="line"> * the character array does not affect the newly created string.</span><br><span class="line"> *</span><br><span class="line"> * @param  value</span><br><span class="line"> *         The initial value of the string</span><br><span class="line"> */</span><br><span class="line">public String(char value[]) &#123;</span><br><span class="line">    this.value = Arrays.copyOf(value, value.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三个构造器：传入一个字符数组<br>很明显你还可以传入一个字符数组，当然你得到的还是一个新的字符串，字符数组的值赋给了String的value数组了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'j'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'f'</span>&#125;));<span class="comment">//jeff</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="传入下标字符数组构造器"><a href="#传入下标字符数组构造器" class="headerlink" title="传入下标字符数组构造器"></a>传入下标字符数组构造器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public String(char value[], int offset, int count) &#123;</span><br><span class="line">    if (offset &lt; 0) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(offset);</span><br><span class="line">    &#125;</span><br><span class="line">    if (count &lt;= 0) &#123;</span><br><span class="line">        if (count &lt; 0) &#123;</span><br><span class="line">            throw new StringIndexOutOfBoundsException(count);</span><br><span class="line">        &#125;</span><br><span class="line">        if (offset &lt;= value.length) &#123;</span><br><span class="line">            this.value = &quot;&quot;.value;//count=0，返回一个空串</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // Note: offset or count might be near -1&gt;&gt;&gt;1.</span><br><span class="line">    if (offset &gt; value.length - count) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(offset + count);</span><br><span class="line">    &#125;//offset+count&gt;len,此时会报错</span><br><span class="line">    this.value = Arrays.copyOfRange(value, offset, offset+count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四个构造器：<br>传入一个字符数组的起始下标与传入的个数。这种传入街截取下表索引的方式，一般的判断方式是：判断这两者都不能小于0，count=0则返回一个空串。offset+count超过总长也会报错。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'j'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'f'</span>, <span class="string">'l'</span>, <span class="string">'i'</span>, <span class="string">'k'</span>, <span class="string">'e'</span>&#125;, <span class="number">4</span>, <span class="number">4</span>));<span class="comment">//like</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'j'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'f'</span>, <span class="string">'l'</span>, <span class="string">'i'</span>, <span class="string">'k'</span>, <span class="string">'e'</span>&#125;, <span class="number">4</span>, <span class="number">0</span>));<span class="comment">//还是一个空串</span></span><br><span class="line"><span class="comment">// System.out.println(new String(new char[]&#123;'j', 'e', 'f', 'f', 'l', 'i', 'k', 'e'&#125;, 4, 5));//java.lang.StringIndexOutOfBoundsException: String index out of range: 9</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="传入Unicode数组的构造器"><a href="#传入Unicode数组的构造器" class="headerlink" title="传入Unicode数组的构造器"></a>传入Unicode数组的构造器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public String(int[] codePoints, int offset, int count) &#123;</span><br><span class="line">    if (offset &lt; 0) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(offset);</span><br><span class="line">    &#125;</span><br><span class="line">    if (count &lt;= 0) &#123;</span><br><span class="line">        if (count &lt; 0) &#123;</span><br><span class="line">            throw new StringIndexOutOfBoundsException(count);</span><br><span class="line">        &#125;</span><br><span class="line">        if (offset &lt;= codePoints.length) &#123;</span><br><span class="line">            this.value = &quot;&quot;.value;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // Note: offset or count might be near -1&gt;&gt;&gt;1.</span><br><span class="line">    if (offset &gt; codePoints.length - count) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(offset + count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    final int end = offset + count; // 到这里end的值已经不可能大于这个传入数组的总长了，上面进行了一系列的判断已经排除超出总长的可能性了</span><br><span class="line"></span><br><span class="line">    // Pass 1: Compute precise size of char[]</span><br><span class="line">    int n = count;</span><br><span class="line">    for (int i = offset; i &lt; end; i++) &#123;//遍历codePoints</span><br><span class="line">        int c = codePoints[i];</span><br><span class="line">        if (Character.isBmpCodePoint(c))//Determines whether the specified character，这个功能貌似是判断这个字符是不是一个specified的字符</span><br><span class="line">            continue;</span><br><span class="line">        else if (Character.isValidCodePoint(c))//whether the specified code point is a valid，这个字符是不是合法</span><br><span class="line">            n++;</span><br><span class="line">        else throw new IllegalArgumentException(Integer.toString(c));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Pass 2: Allocate and fill in char[] 填充这个char[]</span><br><span class="line">    final char[] v = new char[n];</span><br><span class="line"></span><br><span class="line">    for (int i = offset, j = 0; i &lt; end; i++, j++) &#123;</span><br><span class="line">        int c = codePoints[i];</span><br><span class="line">        if (Character.isBmpCodePoint(c))</span><br><span class="line">            v[j] = (char)c;</span><br><span class="line">        else</span><br><span class="line">            Character.toSurrogates(c, v, j++);//c是当前遍历到的字符，v是当前数组里所有的数值组成的数组，这个方法类似于将超长的非法的字符，转换成一个可以存储的字符</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.value = v;//将字符存到数组中，用于生成新的字符串</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第五个构造器：<br>参数int[] codePoints，Array that is the source of Unicode code points。传入的构造器实参可以是一个Unicode的数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(new String(new char[]&#123;&apos;\u4e01&apos;, &apos;\u6607&apos;&#125;, 0, 1));//丁</span><br></pre></td></tr></table></figure><h4 id="废弃了的构造器"><a href="#废弃了的构造器" class="headerlink" title="废弃了的构造器"></a>废弃了的构造器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Deprecated</span><br><span class="line">public String(byte ascii[], int hibyte, int offset, int count) &#123;</span><br><span class="line">    checkBounds(ascii, offset, count);</span><br><span class="line">    char value[] = new char[count];</span><br><span class="line"></span><br><span class="line">    if (hibyte == 0) &#123;</span><br><span class="line">        for (int i = count; i-- &gt; 0;) &#123;</span><br><span class="line">            value[i] = (char)(ascii[i + offset] &amp; 0xff);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        hibyte &lt;&lt;= 8;</span><br><span class="line">        for (int i = count; i-- &gt; 0;) &#123;</span><br><span class="line">            value[i] = (char)(hibyte | (ascii[i + offset] &amp; 0xff));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    this.value = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Deprecated</span><br><span class="line">public String(byte ascii[], int hibyte) &#123;</span><br><span class="line">    this(ascii, hibyte, 0, ascii.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个构造器被声明为过时的希望不被再使用了。</p><h4 id="传入字节数组及索引的构造器"><a href="#传入字节数组及索引的构造器" class="headerlink" title="传入字节数组及索引的构造器"></a>传入字节数组及索引的构造器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public String(byte bytes[], int offset, int length, String charsetName)//传入字符编码charset</span><br><span class="line">        throws UnsupportedEncodingException &#123;</span><br><span class="line">    if (charsetName == null)// 还必须要传入一个charset</span><br><span class="line">        throw new NullPointerException(&quot;charsetName&quot;);</span><br><span class="line">    checkBounds(bytes, offset, length);//调用底下的检查，传入的数据是否合理</span><br><span class="line">    this.value = StringCoding.decode(charsetName, bytes, offset, length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 判断传进来的参数与数组的关系</span><br><span class="line">private static void checkBounds(byte[] bytes, int offset, int length) &#123;</span><br><span class="line">    if (length &lt; 0)</span><br><span class="line">        throw new StringIndexOutOfBoundsException(length);</span><br><span class="line">    if (offset &lt; 0)</span><br><span class="line">        throw new StringIndexOutOfBoundsException(offset);</span><br><span class="line">    if (offset &gt; bytes.length - length)</span><br><span class="line">        throw new StringIndexOutOfBoundsException(offset + length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第八个构造器：<br>直接传进来一个byte的数组，起始和长度（类似于count）位置，最后还设置一个字符编码的格式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public String(byte bytes[], int offset, int length) &#123;</span><br><span class="line">    checkBounds(bytes, offset, length);</span><br><span class="line">    this.value = StringCoding.decode(bytes, offset, length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>传入参数不为null就调用的这个构造器。</p><h4 id="传入字节数组的构造器"><a href="#传入字节数组的构造器" class="headerlink" title="传入字节数组的构造器"></a>传入字节数组的构造器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public String(byte bytes[], String charsetName)</span><br><span class="line">        throws UnsupportedEncodingException &#123;</span><br><span class="line">    this(bytes, 0, bytes.length, charsetName);//调用上面的构造器</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此构造器实际上就是调用了上面的构造器。并传入整个数组不进行切片。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> * @since  1.6</span><br><span class="line">public String(byte bytes[], Charset charset) &#123;</span><br><span class="line">    this(bytes, 0, bytes.length, charset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面构造器1.6改写后的构造器，只是字符集条件不是String而是Charset类型。</p><h4 id="接收StringBuffer作为参数的构造器"><a href="#接收StringBuffer作为参数的构造器" class="headerlink" title="接收StringBuffer作为参数的构造器"></a>接收StringBuffer作为参数的构造器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public String(StringBuffer buffer) &#123;</span><br><span class="line">    synchronized(buffer) &#123;</span><br><span class="line">        this.value = Arrays.copyOf(buffer.getValue(), buffer.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接收StringBuilder作为参数的构造器"><a href="#接收StringBuilder作为参数的构造器" class="headerlink" title="接收StringBuilder作为参数的构造器"></a>接收StringBuilder作为参数的构造器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public String(StringBuilder builder) &#123;</span><br><span class="line">    this.value = Arrays.copyOf(builder.getValue(), builder.length());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结语：</p><ol><li>String类中有十几种构造器方法，构造器之间的重载，体现出Java的多态性。</li><li>构造器里可以传哪些东西：空参；String对象；字符数组；字符数组+offset+count；Unicode code points+offset+count；bytes数组+offset+count+charset；StringBuffer对象；StringBuilder对象。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;要讲Java的String类型，我们需要结合他的代码来看，根据源码的解读可以更好的理解Java底层实现的具体细节，所以这次的博客篇幅会比较的长，所以我会分成几个部分来写，希望通过源码的解读，学习到优秀的Java代码该如何实现。&lt;/p&gt;
&lt;p&gt;本篇博客介绍String类的基本
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java包装类</title>
    <link href="http://yoursite.com/2018/05/30/Java%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    <id>http://yoursite.com/2018/05/30/Java包装类/</id>
    <published>2018-05-30T12:44:21.000Z</published>
    <updated>2018-06-21T09:56:18.981Z</updated>
    
    <content type="html"><![CDATA[<h3 id="包装类的由来"><a href="#包装类的由来" class="headerlink" title="包装类的由来"></a>包装类的由来</h3><p>Java发明时正遇上C语言盛行的时候，因此Java保留/延续/借鉴了C语言中八种基本数据类型。但是Java是一门面向对象的语言，而八种基本数据类型不属于面向对象的范畴，<a id="more"></a>但是基本数据类型有它的优势：（1）长度确定（2）计算效率高。所以Java还是选择保留了基本数据类型。所以Java和python不同的是，Java里并不是“一切皆对象”的。<br>Java绝大部分的特性是为对象而设计的，例如：泛型，集合等，这些特性是不支持基本数据类型的。为了解决这样的矛盾，Java为八种基本数据类型设计了对应的包装类型。</p><h4 id="基本数据类型与其对应的包装类"><a href="#基本数据类型与其对应的包装类" class="headerlink" title="基本数据类型与其对应的包装类"></a>基本数据类型与其对应的包装类</h4><p><img src="http://p94ypeu3q.bkt.clouddn.com/包装类.png" alt="包装类"></p><p>这些包装类型定义在java.lang包下，所以我们可以直接调用。</p><h3 id="装箱与拆箱"><a href="#装箱与拆箱" class="headerlink" title="装箱与拆箱"></a>装箱与拆箱</h3><p>装箱就是把基本数据类型的数据装箱为包装类的对象。</p><ul><li>Integer num = new Integer(int的变量或值);<br>拆箱反过来把包装类型的对象，拆箱为基本数据类型的数据。</li><li>int m = Integer的对象.intValue();<br>JDK1.5之前，只能用刚才的形式进行手动装箱和手动拆箱。<br>JDK1.5之后，开始支持自动装箱与自动拆箱.<br>JDK1.5之前的手动装箱拆箱的操作：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1、创建一个包装类的对象</span></span><br><span class="line">        Integer i = <span class="keyword">new</span> Integer(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、手动装箱操作</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//需要把变量a的值存储到集合，或传给引用数据类型的形参时，那么就需要把a变成包装类对象</span></span><br><span class="line">        Integer num = <span class="keyword">new</span> Integer(a);</span><br><span class="line">        </span><br><span class="line">        Integer n1 = <span class="keyword">new</span> Integer(<span class="number">10</span>);</span><br><span class="line">        Integer n2 = <span class="keyword">new</span> Integer(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 手动拆箱</span></span><br><span class="line">        <span class="comment">// 求和，对象不能直接相加,拆箱成基本数据类型</span></span><br><span class="line">        <span class="keyword">int</span> m1 = n1.intValue();</span><br><span class="line">        <span class="keyword">int</span> m2 = n2.intValue();</span><br><span class="line">        System.out.println(m1 + m2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>JDK1.5之后，自动拆箱，装箱<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//自动装箱，自动拆箱</span></span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">        Integer bNum = b;<span class="comment">//自动装箱，等价于 Integer bNum = new Integer(b);</span></span><br><span class="line"></span><br><span class="line">        Integer cNum = <span class="keyword">new</span> Integer(<span class="number">23</span>);</span><br><span class="line">        <span class="keyword">int</span> c = cNum;<span class="comment">//自动拆箱，等价于  int c = cNum.intValue();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5、演示错误</span></span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">12</span>;<span class="comment">//整型的值是可以赋值给double型的变量，自动类型转换</span></span><br><span class="line"><span class="comment">//Double dNUm = 12;//错误的  int类型的值和变量只能自动装箱为Integer</span></span><br><span class="line"><span class="comment">//Double dNUm = 12.0F;//错误的，12.0F只能自动装箱为Float</span></span><br><span class="line">        Double dNum = <span class="number">12.0</span>;<span class="comment">//可以</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意：装箱与拆箱的操作，只能与自己对应的基本数据类型和包装类进行，即没有变量提升一说。</p><h4 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h4><h5 id="字符串转成包装类对象"><a href="#字符串转成包装类对象" class="headerlink" title="字符串转成包装类对象"></a>字符串转成包装类对象</h5><p>各个包装类除了Character类型，其他7中类型都有1个构造方法，其参数是字符串类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer t2=new Integer(&quot;500&quot;);//参数是字符串，字符串的值是必须对应的数值</span><br><span class="line">Integer t3=new Integer(&quot;abc&quot;);// java.lang.NumberFormatException: For input string: &quot;abc&quot;</span><br></pre></td></tr></table></figure></p><p>除此之外包装类的valueOf方法也可以做到。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer i=Integer.valueOf(&quot;500&quot;);</span><br></pre></td></tr></table></figure></p><h5 id="字符串转成基本数据类型"><a href="#字符串转成基本数据类型" class="headerlink" title="字符串转成基本数据类型"></a>字符串转成基本数据类型</h5><p>通过包装类的parseXxx(String s)静态方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int i=Integer.parseInt(&quot;500&quot;);</span><br><span class="line">int i = Integer.valueOf(str1);//隐含了自动拆箱</span><br><span class="line">int j = new Integer(str1);//隐含了自动拆箱</span><br></pre></td></tr></table></figure></p><h3 id="缓存的常量对象"><a href="#缓存的常量对象" class="headerlink" title="缓存的常量对象"></a>缓存的常量对象</h3><p>在python中也存在着一个维持的小数池，对于-128到127的值，引用的是同一个对象，按道理说，每new一个包装类的对象，那他就会在堆中创建一个新的包装类对象，但是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 在堆中创建了两个Integer包装类对象，那么他们的地址肯定不同，比较一定是false</span></span><br><span class="line">        Integer i1 = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        Integer i2 = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        System.out.println(i1 == i2);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.比较的是基本数据类型的大小，不是比较内存地址了，大小相等</span></span><br><span class="line">        <span class="keyword">int</span> i3 = <span class="number">128</span>;</span><br><span class="line">        <span class="keyword">int</span> i4 = <span class="number">128</span>;</span><br><span class="line">        System.out.println(i3 == i4);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 不过是基本数据类型进行了自动装箱，本质上还是创建了两个包装类的对象，地址不同</span></span><br><span class="line">        Integer i5 = <span class="number">128</span>;</span><br><span class="line">        Integer i6 = <span class="number">128</span>;</span><br><span class="line">        System.out.println(i5 == i6);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 小于128的整型在方法区（暂且这么说）有一个常量池，都指向的是这个常量池对象，所以是同一个对象</span></span><br><span class="line">        <span class="keyword">int</span> i7 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i8 = <span class="number">1</span>;</span><br><span class="line">        System.out.println(i7 == i8);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 由于浮点数的存储机制不同，没有那么大的空间可以存常量，也不精确，所以覅浮点型是没有常量池的</span></span><br><span class="line">        Double d1 = <span class="number">2.0</span>;</span><br><span class="line">        Double d2 = <span class="number">2.0</span>;</span><br><span class="line">        System.out.println(d1 == d2);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        Boolean b1 = <span class="keyword">true</span>;</span><br><span class="line">        Boolean b2 = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(b1 == b2);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        Character c1 = <span class="string">'a'</span>;</span><br><span class="line">        Character c2 = <span class="string">'a'</span>;</span><br><span class="line">        System.out.println(c1 == c2);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 中文字符也是没有常量池的，字数太多了</span></span><br><span class="line">        Character c3 = <span class="string">'中'</span>;</span><br><span class="line">        Character c4 = <span class="string">'中'</span>;</span><br><span class="line">        System.out.println(c3 == c4);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>包装类对象可能存储缓存的常量对象：</p><ul><li>Byte,Short,Integer,Long：-128~127</li><li>float，double：不缓存</li><li>Character：0~127</li><li>Boolean：true,false<br>注意：常量池和对象的地址比较是相对于包装类来说的，基本数据类型与包装了类的比较不是比较的地址，比较的是熟知的大小。<br>例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void ces() &#123;</span><br><span class="line">Integer i1 = 128;</span><br><span class="line">Integer i2 = 128;</span><br><span class="line"></span><br><span class="line">int i3 = 128;</span><br><span class="line">int i4 = 128;</span><br><span class="line"></span><br><span class="line">System.out.println(i1 == i2);// false</span><br><span class="line">System.out.println(i3 == i4);// true</span><br><span class="line">System.out.println(i1 == i3);// 判断的是值相等 true</span><br><span class="line">System.out.println(new Integer(10) == 10);// true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>i1与i3的比较是int与Integer的比较，两者比较的是值是否相等。</p><p>附：<br>包装类还提供了处理 类型时非常有用的其他一些常量：<br>(1)Integer</p><ul><li>Integer.MAX_VALUE</li><li>Integer.MIN_VALUE<br>(2)Double</li><li>Double.MAX_VALUE</li><li>Double.MIN_VALUE等</li></ul><p>类型转换：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// String:"1", Integer对象:1，与int:1三者之间的转换关系</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. Integer转换为String的三种方式</span></span><br><span class="line">        <span class="comment">// 1.1将Integer转换为String</span></span><br><span class="line">        Integer int1 = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        Integer int2 = <span class="keyword">null</span>;</span><br><span class="line">        String str1 = Integer.toString(int1);</span><br><span class="line">        <span class="comment">// String str11 = Integer.toString(int2);// 当Integer对象为空时,空指针异常</span></span><br><span class="line"></span><br><span class="line">        System.out.println(str1 <span class="keyword">instanceof</span> String);<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.2将Integer转换为String</span></span><br><span class="line">        String str2 = int1.toString();</span><br><span class="line"><span class="comment">//        String str21 = int2.toString(); // 同样是空指针</span></span><br><span class="line">        System.out.println(str2 <span class="keyword">instanceof</span> String);<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.3将Integer转换为String</span></span><br><span class="line">        String str3 = String.valueOf(int1);</span><br><span class="line">        String str31 = String.valueOf(int2);</span><br><span class="line">        String str32 = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(str2 <span class="keyword">instanceof</span> String);<span class="comment">// true</span></span><br><span class="line">        System.out.println(str31 <span class="keyword">instanceof</span> String);<span class="comment">// true</span></span><br><span class="line">        System.out.println(str32 <span class="keyword">instanceof</span> String);<span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. String转换成Integer</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.1</span></span><br><span class="line">        String s2 = <span class="string">"2"</span>;</span><br><span class="line">        Integer i2 = Integer.valueOf(s2);</span><br><span class="line">        System.out.println(i2 <span class="keyword">instanceof</span> Integer);<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.2</span></span><br><span class="line">        Integer i3 = <span class="keyword">new</span> Integer(s2);</span><br><span class="line">        System.out.println(i3 <span class="keyword">instanceof</span> Integer);<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. String转换成int</span></span><br><span class="line">        <span class="comment">// 3.1</span></span><br><span class="line">        String s3 = <span class="string">"3"</span>;</span><br><span class="line">        <span class="keyword">int</span> i4 = Integer.parseInt(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.2 这两种给隐藏了自动拆箱的过程</span></span><br><span class="line">        <span class="keyword">int</span> i5 = <span class="keyword">new</span> Integer(s3);</span><br><span class="line">        <span class="keyword">int</span> i6 = Integer.valueOf(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. int转换成String</span></span><br><span class="line">        <span class="comment">// 4.1</span></span><br><span class="line">        String s4 = <span class="number">5</span> + <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. int与Integer之间的转换就是拆装箱的操作</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.1 手动装箱</span></span><br><span class="line">        Integer i7 = <span class="keyword">new</span> Integer(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.2 自动装箱</span></span><br><span class="line">        Integer i8 = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.3 手动拆箱</span></span><br><span class="line">        <span class="keyword">int</span> i9 = i7.intValue();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.4 自动拆箱</span></span><br><span class="line">        <span class="keyword">int</span> int10 = i8;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 总结： 1. int,integer与String之间的转换方式非常的丰富；</span></span><br><span class="line"><span class="comment">        * 2. 在使用类型方法的时候记住不要是null对象调用，即注意空指针异常；</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;包装类的由来&quot;&gt;&lt;a href=&quot;#包装类的由来&quot; class=&quot;headerlink&quot; title=&quot;包装类的由来&quot;&gt;&lt;/a&gt;包装类的由来&lt;/h3&gt;&lt;p&gt;Java发明时正遇上C语言盛行的时候，因此Java保留/延续/借鉴了C语言中八种基本数据类型。但是Java是一门面向对象的语言，而八种基本数据类型不属于面向对象的范畴，
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java异常处理</title>
    <link href="http://yoursite.com/2018/05/30/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2018/05/30/Java异常处理/</id>
    <published>2018-05-30T07:15:25.000Z</published>
    <updated>2018-06-11T14:38:18.793Z</updated>
    
    <content type="html"><![CDATA[<p>异常处理机制的目的是为了当程序发生异常时，使得程序不崩溃继续运行，同时通过提示用户等方式解决。</p><p>注意：语法错误不属于异常，这种情况编译不通过，无法运行；逻辑错误不属于异常，这种情况属于BUG，必须修正；异常本身是指不可预知的非正常的情况。在Java中异常也被封装成对象操作。不同的异常对象中封装了相应的错误信息。Java是采用面向对象的方式来处理异常的。</p><p>Java的异常处理机制的过程，原理：Java程序当某一句代码发生异常时，JVM会在该句代码的位置暂停下来，然后会根据异常的情况，创建一个相应的异常对象，这个对象会包含异常的类型、错误的信息等，并把异常对象提交给JRE。JVM会在这句代码的外围搜索有没有异常的处理的代码（例如：try…catch），如果有对应的catch可以捕获这个异常的对象，那么就相当于这个异常被处理了。程序继续从try..catch下面继续运行。如果没有对应的catch可以捕获它，那么当前代码的方法就会把这个异常对象，抛给上级（调用者），上级继续按照刚才的逻辑，先找是否有catch，如果有就捕获，从catch后继续运行，如果没有，继续往上级抛异常直到main都没有能够catch它，那么程序就崩溃了。</p><h3 id="异常的超级父类"><a href="#异常的超级父类" class="headerlink" title="异常的超级父类"></a>异常的超级父类</h3><p>异常的超级父类是java.lang.Throwable。Throwable类是Java语言中所有错误或异常的超类。只有当对象是此类（或其子类之一）的实例时，才能通过 Java 虚拟机或者 Java throw 语句抛出。只有此类或其子类之一才可以是 catch 子句中的参数类型。 </p><h3 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h3><h4 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h4><p>重大错误：此类错误，不建议用try..catch等代码处理的，而是应该停下来，重新修正代码。</p><p>比较常见的有：VirtualMachineError(OutOfMemoryError堆内存溢出, StackOverflowError栈内存溢出)</p><p>OOM错误<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个内存特别大的数组，此时数组所占内存的长度就大于内存会报超出内存的错误</span></span><br><span class="line">        <span class="comment">// Exception in thread "main" java.lang.OutOfMemoryError: Requested array size exceeds VM limit</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[Integer.MAX_VALUE];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>栈溢出错误<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Exception in thread "main" java.lang.StackOverflowError</span></span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h4><p>异常，它指出了合理的应用程序想要捕获的条件。</p><p>异常也分为两种：</p><p>(1) 受检异常，也称为编译时异常</p><p>即在编译时必须throws或者try..catch处理，否则编译不通过。</p><p>(2) 非受检异常，也称为运行时异常</p><p>编译时不提示，运行过程中可能发生的异常，例如：NullPointerException、ArrayIndexOutOfBoundsException，ClassCastException等。</p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>异常处理的两个动作：抓（try…catch），抛（throws）。</p><h4 id="try…catch"><a href="#try…catch" class="headerlink" title="try…catch"></a>try…catch</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">  可能发生异常的代码</span><br><span class="line">&#125;catch(异常的类型1   异常名e)&#123;</span><br><span class="line">  抓住该异常后处理的代码</span><br><span class="line">&#125;catch(异常的类型2   异常名e)&#123;</span><br><span class="line">   抓住该异常后处理的代码</span><br><span class="line">&#125;</span><br><span class="line"> ...</span><br><span class="line">finally&#123;</span><br><span class="line">无论是否发生异常，都要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(1) 如果try中没有异常，那么catch中的不会执行;</p><p>(2) 如果try中有异常，在发生异常的那句代码停下来，JVM会自动new一个异常的对象，抛出来，从上到下找对应的catch，如果类型匹配，就进入到catch中，如果所有catch的类都不匹配，就相当于没有抓住异常，默认抛出上一级。其中catch的关系应该是一层大于一层的，否则父类在前，子类在后，那么父类总会把子类的异常处理掉，那么默认子类异常毫无意义。</p><p>(3) finally块中的代码是不管try中是否发生异常，而且不管异常是否被catch，都要执行的代码。</p><p>注意：当异常处理的代码执行结束以后，是不会回到try语句块去执行尚未执行的代码的。只会执行try…catch…finally后面的代码。</p><p>关于finally不论什么情况都会在最后执行，相关练习：<br>练习1：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = test(<span class="number">4</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(a&lt;<span class="number">0</span> || b&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                result = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            result = a/b;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            result = a + b;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            result ++;</span><br><span class="line"><span class="keyword">return</span> result;<span class="comment">// 3</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一般函数在return后就结束了，但是在这里即使try中没有发生异常，并且执行到return，但是依然要执行完finally的内容才可以return，reuturn的是finally返回的result值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = test(<span class="number">4</span>,<span class="number">0</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(a&lt;<span class="number">0</span> || b&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                result = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            result = a/b;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            result = a + b;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            result ++;</span><br><span class="line"><span class="keyword">return</span> result;<span class="comment">// 5</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，在catch中有return但是实际的return的结果还是会返回finally的result结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = test(<span class="number">4</span>,<span class="number">0</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(a&lt;<span class="number">0</span> || b&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                result = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            result = a/b;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            result = a + b;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            result ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果finally中没有return的值，那么返回的result要看有没有异常被捕获了。即使如此finnaly的值还是被执行了的，只是在执行++之前，return的值已经在catch中返回了catch中的result的值了。</p><h4 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h4><p>与try…catch不同，try…catch相当于捕获到异常自己就处理了，类比一些编程学习人员，遇到问题自己就解决了。而throws则是发现问题即时上报，相应的一部分人在学习编程时，只要一遇到任何问题，第一时间就抛出问题，不假思索的在学习群，社区或是论坛发出问题。一般的底层的也就是小白可以拥有throws的权利，但是到了最上层的大佬（main）他必须要使用try…catch方法解决问题。大佬也解决不了的问题，那一定是大问题，系统就崩了。</p><p>throws的语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 abstract 返回值类型  方法名（【形参列表】）【throws 异常列表】;</span><br><span class="line"></span><br><span class="line">【修饰符】 返回值类型  方法名（【形参列表】）【throws 异常列表】&#123;</span><br><span class="line">方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中RuntimeException及其子类可以不写【throws 异常列表】。其他类需要写【throws 异常列表】，异常列表可以是多个，顺序没有影响。</p><p>注意：在方法重写的时候，子类的重写的方法throws异常的类型 &lt;= 父类被重写的方法throws的异常类型。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> RuntimeException </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果子类的异常类型大于父类的异常类型，那么子类可能会抛出一个异常，这个异常的类型大于父类的异常的类型，父类则无法接受此异常，就是类型转换异常了。</p><h4 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h4><p>除了jvm会抛异常以外，程序员也可以在代码中手动抛异常。抛异常的工具就是throw。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThrow</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"请输入被除数："</span>);</span><br><span class="line"><span class="keyword">int</span> a = input.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"请输入除数："</span>);</span><br><span class="line"><span class="keyword">int</span> b = input.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"除数不能为0"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">//e.printStackTrace();//标准的异常信息打印形式，包含异常类型、异常的错误信息，堆栈跟踪信息等，底层其实用的是System.err打印</span></span><br><span class="line">System.out.println(e);<span class="comment">//把异常对象当做普通对象打印，只包含异常类型、异常的错误信息。</span></span><br><span class="line">System.err.println(e);<span class="comment">//把异常对象红色打印，包含异常的类型和错误信息</span></span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out和System.err两个线程负责的，因此谁先出来，不一定。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="自定义Exception"><a href="#自定义Exception" class="headerlink" title="自定义Exception"></a>自定义Exception</h3><p>Java核心类库中无法涵盖所有的异常情况。某些异常情况，我也想要通过类型去说明问题，那么这个时候就可以自定义异常。</p><p>（1）必须继承Throwable或它的子类，我们写的一般是继承Exception或RuntimeException比较多。</p><p>（2）一般自定义异常需要实现java.io.Serializble接口（IO用），因为异常对象可能被记录日志中。</p><p>（3）自定义异常类型保留两个构造器：无参构造，另一个是为父类的message赋值的构造器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"用户名："</span>);</span><br><span class="line">String user = input.next();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"密码："</span>);</span><br><span class="line">String pwd = input.next();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">boolean</span> flag = login(user,pwd);</span><br><span class="line">System.out.println(<span class="string">"登录成功"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(<span class="string">"登录失败，原因是："</span> + e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String user, String pwd)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"jefflike"</span>.equals(user) &amp;&amp; <span class="string">"123"</span>.equals(pwd)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//用户名不存在，用户名和密码错误，服务器的问题等</span></span><br><span class="line"><span class="comment">//return false;</span></span><br><span class="line"><span class="comment">//用throw语句代替return 语句</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="string">"jefflike"</span>.equals(user))&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotExistException(<span class="string">"用户名不存在"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UsernameOrPasswordErrorException(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsernameNotExistException</span>  <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UsernameNotExistException</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UsernameNotExistException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsernameOrPasswordErrorException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UsernameOrPasswordErrorException</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UsernameOrPasswordErrorException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>要避免使用异常处理代替错误处理，这样会降低程序的清晰性，并且效率低下。</li><li>不要进行小粒度的异常处理——应该将整个任务包装在一个try语句块中。</li><li>异常往往在高层处理。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;异常处理机制的目的是为了当程序发生异常时，使得程序不崩溃继续运行，同时通过提示用户等方式解决。&lt;/p&gt;
&lt;p&gt;注意：语法错误不属于异常，这种情况编译不通过，无法运行；逻辑错误不属于异常，这种情况属于BUG，必须修正；异常本身是指不可预知的非正常的情况。在Java中异常也被封
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java注解</title>
    <link href="http://yoursite.com/2018/05/29/Java%E6%B3%A8%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/05/29/Java注解/</id>
    <published>2018-05-29T10:26:55.000Z</published>
    <updated>2018-06-11T14:36:15.620Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇博客提到了Java的枚举类型，Java的枚举类型从本质上实现是Java的类，所以可以看作是一个特殊的Java类。本篇博客要说的是Java里的注解（Annotation），此处说的注解与我们之前所说的单行注释，多行注释不是一类对象，单行注释，多行注释是编程人员将代码结构进行注释方便日后代码维护所添加的对机器无用的代码块，而Annotation会在代码中起到非常重要的作用，同时它可以被其他的程序读取，下面我们来详细的介绍。</p><h3 id="注解三要素"><a href="#注解三要素" class="headerlink" title="注解三要素"></a>注解三要素</h3><ol><li>声明（一般是框架或者核心类库等声明了注解，我们自己也可以自定义声明注解）；</li><li>使用注解（在程序的相应位置，按照一定的格式声明注解）；</li><li>读取注解（读取注解的程序一般声明注解的人写好的，我们不需要重复操作）。<h3 id="最基本的三个注解"><a href="#最基本的三个注解" class="headerlink" title="最基本的三个注解"></a>最基本的三个注解</h3>一、 @Override</li></ol><ul><li>声明：系统预定义的，JRE核心类库已经声明好了。在java.lang.Override中；</li><li>使用：在重写的方法上加注解，表示这个方法是重写的方法，并且检查重写的格式是否正确；</li><li>读取它：javac.exe读取它。</li></ul><p>作用：编译时会对这个方法进行格式检查，看这个方法是否复合重写的要求。</p><p>二、@SuppressWarnings</p><ul><li>声明：系统预定义的，JRE核心类库已经声明好了。在java.lang.SuppressWarnings中；</li><li>使用：在相应位置表示抑制xx警告；</li><li>读取：javac.exe读取它。</li></ul><p>三、@Deprecated</p><ul><li>声明：系统预定义的，JRE核心类库已经声明好了。在java.lang.Deprecated中；</li><li>使用：在相应位置使用，表示这个类、方法、属性（看使用的位置在哪）已经过时了，不再建议程序员使用它，以弹出警告的方式告知程序员这个xx已经过时了。</li><li>读取：javac.exe读取它。</li></ul><p>注意：已过时的一般来说，就是设计有问题，或者有重大bug，不建议程序员使用的。</p><h3 id="文档注解"><a href="#文档注解" class="headerlink" title="文档注解"></a>文档注解</h3><ul><li>声明：JRE核心类库已经声明好了。</li><li>使用：<br>通用：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 作者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>    另请参阅</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>  从xx版本开始</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 当前版本</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><p>方法上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 这是一个求两个整数的商的方法</span><br><span class="line"> * @param a int 被除数</span><br><span class="line"> * @param b int 除数</span><br><span class="line"> * @return int 返回a/b的商，只保留整数部分</span><br><span class="line"> * @throws ArithmeticException 当b=0时，会报算术异常</span><br><span class="line"> */</span><br><span class="line">public static int divide(int a, int b)throws ArithmeticException&#123;</span><br><span class="line">    return a/b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>读取：javadoc.exe读取。</p><h4 id="跟踪代码依赖性，替代原来-xml配置文件"><a href="#跟踪代码依赖性，替代原来-xml配置文件" class="headerlink" title="跟踪代码依赖性，替代原来.xml配置文件"></a>跟踪代码依赖性，替代原来.xml配置文件</h4><p>跟踪代码依赖性，实现替代配置文件功能，类似flask装饰器指向路由的使用，后续框架部分详细介绍。</p><h3 id="JUnit框架的注解"><a href="#JUnit框架的注解" class="headerlink" title="JUnit框架的注解"></a>JUnit框架的注解</h3><p>注意：使用JUnit测试的类必须是public的。JUnit4常见的注解和要求：这些方法都必须是public，无参，无返回值。</p></li><li><p>@Test </p></li></ul><p>声明：不是JRE提供的，而是有JUnit框架提供的；</p><p>使用：使用的方法必须是公共的、无参、void、非静态的；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Test(timeout=1000)：设置超时时间，如果测试时间超过了你定义的timeout，测试失败</span><br><span class="line">  @Test(expected)： 申明出会发生的异常，比如 @Test（expected = Exception.class）</span><br></pre></td></tr></table></figure></p><ul><li>@BeforeClass</li></ul><p>标记在静态方法上。因为这个方法只执行一次。在类初始化时执行。</p><ul><li>@AfterClass</li></ul><p>标记在静态方法上。因为这个方法只执行一次。在所有方法完成后执行。</p><ul><li>@Before</li></ul><p>标记在非静态方法上。在@Test方法前面执行，而且是在每一个@Test方法前面都执行。</p><ul><li>@After</li></ul><p>标记在非静态方法上。在@Test方法后面执行，而且是在每一个@Test方法后面都执行。</p><ul><li>@Ignore</li></ul><p>标记在本次不参与测试的方法上。这个注解的含义就是“某些方法尚未完成，暂不参与此次测试”。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJUnit</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"helloworld"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">sum += i;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"sum = "</span> + sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@BeforeClass</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bc</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在所有测试方法之前运行，而且一个类只运行一次"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@AfterClass</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ac</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在所有测试方法之后运行，而且一个类只运行一次"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"每一个测试方法之前运行"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@After</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"每一个测试方法之后运行"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Ignore</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">c</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"不参与测试"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">TestJUnit t = <span class="keyword">new</span> TestJUnit();</span><br><span class="line">t.test();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><p>注解三步走，声明，使用，读取，生成一个我们自己的注解也需要编写这三部分。</p><p>声明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 @interface 注解名&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><p> 给注解加的注解叫元注解，简称为注解的注解。用来注解我们自定义的注解的一些基本信息的。一共有四个。</p><ul><li><p>@Target：目标位置，用来指明某个注解将来可以加在哪些位置。这个目标位置存放在ElementType枚举类型的常量对象中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ElementType &#123;</span><br><span class="line">    <span class="comment">/** Class, interface (including annotation type), or enum declaration */</span></span><br><span class="line">    TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Field declaration (includes enum constants) */</span></span><br><span class="line">    FIELD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Method declaration */</span></span><br><span class="line">    METHOD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Formal parameter declaration */</span></span><br><span class="line">    PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Constructor declaration */</span></span><br><span class="line">    CONSTRUCTOR,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Local variable declaration */</span></span><br><span class="line">    LOCAL_VARIABLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Annotation type declaration */</span></span><br><span class="line">    ANNOTATION_TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Package declaration */</span></span><br><span class="line">    PACKAGE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Type parameter declaration</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Use of a type</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_USE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：TYPE（类型上，例如：类、接口等），FIELD（属性上），METHOD（方法上）等。</p></li><li><p>@Retention：生命周期，用来指明某个注解被使用后，可以保留到什么阶段。<br>三个阶段：RetentionPolicy枚举类型的三个常量对象：<br>SOURCE：源代码阶段  –&gt; CLASS：字节码阶段–&gt;RUNTIME：运行时阶段(只有这个阶段的注解，才能被反射代码读取到).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 源代码 ---&gt;.class --&gt;Class ---&gt; 运行时</span><br><span class="line">*    SOURCE     CLASS     RUNTIME</span><br><span class="line">*   javac.exe   类加载器          反射</span><br></pre></td></tr></table></figure></li><li><p>@Inherited：该注解是否可以被子类继承。</p></li><li>@Documented：该注解是否可以被javadoc.exe文档读取到API中。默认情况下,javadoc是不包括注解的，但如果声明注解时指定了 @Documented,则它会被 javadoc 之类的工具处理。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDefineAnnotation</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//读取一个注解，我们自定义注解只能在运行时读取它，读取注解需要用到反射</span></span><br><span class="line">Class&lt;MyClass&gt; clazz = MyClass.class;</span><br><span class="line">MyAnnotation my = clazz.getAnnotation(MyAnnotation.class);</span><br><span class="line">System.out.println(my);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用一个注解</span></span><br><span class="line"><span class="meta">@MyAnnotation</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line"><span class="meta">@MyAnnotation</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义注解，声明一个注解</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="注解的配置参数"><a href="#注解的配置参数" class="headerlink" title="注解的配置参数"></a>注解的配置参数</h4><p>在注解中往往还需要传入参数。<br>声明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 @interface 注解名&#123;</span><br><span class="line">数据类型   配置参数名() 【default 默认值】;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>赋值:</p><ul><li>（1）如果一个注解声明了配置参数，而且没有默认值，那么在使用注解时必须手动给它赋值,赋值的标准格式：( 参数名 = 参数值);</li><li>（2）如果一个注解它的配置参数只有一个，而且参数名是value，那么可以在赋值的时候省略value=;</li><li><p>（3）配置参数的类型只能是八种基本数据类型、String类型、Class类型、enum类型、Annotation类型、以上所有类型的数组.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDefineAnnotation2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3、读取注解</span></span><br><span class="line">        Class&lt;YourClass&gt; c = YourClass.class;</span><br><span class="line">        YourAnnotation y = c.getAnnotation(YourAnnotation.class);</span><br><span class="line">        String value = y.value();</span><br><span class="line">        System.out.println(value);</span><br><span class="line"></span><br><span class="line">        Class&lt;OtherClass&gt; c2 = OtherClass.class;</span><br><span class="line">        YourAnnotation y2 = c2.getAnnotation(YourAnnotation.class);</span><br><span class="line">        String value2 = y2.value();</span><br><span class="line">        System.out.println(value2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2、使用</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@YourAnnotation</span>(<span class="string">"dingjie"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YourClass</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里因为@YourAnnotation的配置参数有默认值，可以不赋值</span></span><br><span class="line"><span class="meta">@YourAnnotation</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OtherClass</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、声明</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@interface</span> YourAnnotation&#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "jefflike"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇博客提到了Java的枚举类型，Java的枚举类型从本质上实现是Java的类，所以可以看作是一个特殊的Java类。本篇博客要说的是Java里的注解（Annotation），此处说的注解与我们之前所说的单行注释，多行注释不是一类对象，单行注释，多行注释是编程人员将代码结构
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>匿名内部类和局部内部类扩展</title>
    <link href="http://yoursite.com/2018/05/28/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB%E5%92%8C%E5%B1%80%E9%83%A8%E5%86%85%E9%83%A8%E7%B1%BB%E5%8F%AA%E8%83%BD%E8%AE%BF%E9%97%AEfinal%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2018/05/28/为什么匿名内部类和局部内部类只能访问final变量/</id>
    <published>2018-05-28T09:43:04.000Z</published>
    <updated>2018-06-11T03:29:52.117Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么匿名内部类和局部内部类只能访问final变量"><a href="#为什么匿名内部类和局部内部类只能访问final变量" class="headerlink" title="为什么匿名内部类和局部内部类只能访问final变量"></a>为什么匿名内部类和局部内部类只能访问final变量</h2><p>前面我们提到了Java里的内部类，也提到了关于局部内部类与匿名类，可以访问到所在方法的局部常量，并且在JDK8.0版本以后，即使你在方法中并没有声明变量为final，默认编译的时候也是final类型的，即你不可以改变此方法中被局部内部类引用了的变量（就是变量）。在这里就简单的说一说为什么Java会这样设定。</p><p>局部内部类或匿名内部类的对象可以被外部方法作为返回值，返回到方法外使用，那么如果这样的话，就会出现矛盾。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Change c = method();</span><br><span class="line"><span class="comment">//这里method()已经结束，按理说局部a早就失效，那么下面调用change()，打印出a的值就矛盾了，即change()访问了一个不存在的变量，这是不允许的。</span></span><br><span class="line">c.change();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Change <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span> <span class="keyword">implements</span> <span class="title">Change</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"a="</span>+a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Change in = <span class="keyword">new</span> Inner();</span><br><span class="line"><span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Change</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果说这里的a是一个变量，那么这里就已经产生矛盾了。</p><p>要理解这一点，我们需要知道局部内部类和匿名内部类访问局部变量的机制。</p><p>在java中，类是封装的，内部类也不例外。我们知道，非静态内部类能够访问外部类成员是因为它持有外部类对象的引用 Outer.this，就像子类对象能够访问父类成员是持有父类对象引用super一样。局部内部类也和一般内部类一样，只持有了Outer.this，能够访问外部类成员，但是它又是如何访问到局部变量的呢？</p><p>实际上java是将局部变量作为参数传给了局部内部类的构造函数，而将其作为内部类的成员属性封装在了类中。我们看到的内部类访问局。部变量实际上只是访问了自己的成员属性而已，这和类的封装性是一致的。那么上面的代码实际上是这样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Change c = method();</span><br><span class="line">c.change();</span><br><span class="line">        <span class="comment">//change()访问的就不是method()的局部变量a，</span></span><br><span class="line">       <span class="comment">//而是Inner内部类的成员变量a，只是它的值是method()的局部变量a的副本</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Change <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span> <span class="keyword">implements</span> <span class="title">Change</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实际上内部做了这样的操作，内部类的a只是方法中的copy，是内部类的私有变量，所以自己可以访问得到</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> a;</span><br><span class="line">Inner(<span class="keyword">int</span> a)&#123;</span><br><span class="line"><span class="keyword">this</span>.a =a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 调用的也是内部私有变量a，copy的a不是方法里面的变量a</span></span><br><span class="line">System.out.println(<span class="string">"a="</span> + <span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Change in = <span class="keyword">new</span> Inner(a);<span class="comment">//a=10</span></span><br><span class="line"><span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Change</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以，方法里的a改不改，和我内部类里面的a实际上没有关系。</p><p>那么，如果java不做这个自动添加final特性，而是将这两种a认作是两个变量（常量），那么我们的代码是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Change c = method();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Change <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span> <span class="keyword">implements</span> <span class="title">Change</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span></span>&#123;</span><br><span class="line">a = <span class="number">20</span>; <span class="comment">//如果这里可以修改a的值</span></span><br><span class="line">System.out.println(<span class="string">"a="</span> + a);<span class="comment">//20</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Change in = <span class="keyword">new</span> Inner();</span><br><span class="line">in.change();</span><br><span class="line">System.out.println(“a=”+a);<span class="comment">//从阅读角度，这里预期打印a=20，然而只会打印出a=10，会让人误解，因为在Inner的change()中修改的是Inner内部类对象的this.a，它是method的局部变量a的副本</span></span><br><span class="line"><span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Change</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一眼看下去，我们一定认为，内部类引用了方法里的a，这样代码的可读性太差了。</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>为了保证阅读与运行的一致性，只能规定局部变量a（和副本a）不能修改，这样阅读和运行就可保持一致。那么就只能限定a为final，即定义为常量。当然，不是常量，声明周期也结束了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么匿名内部类和局部内部类只能访问final变量&quot;&gt;&lt;a href=&quot;#为什么匿名内部类和局部内部类只能访问final变量&quot; class=&quot;headerlink&quot; title=&quot;为什么匿名内部类和局部内部类只能访问final变量&quot;&gt;&lt;/a&gt;为什么匿名内部类和局部
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java内部类</title>
    <link href="http://yoursite.com/2018/05/26/Java%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>http://yoursite.com/2018/05/26/Java内部类/</id>
    <published>2018-05-26T11:35:26.000Z</published>
    <updated>2018-06-10T16:41:27.844Z</updated>
    
    <content type="html"><![CDATA[<p>Java类的成员分为五类：属性，方法，构造器，代码块，和内部类。</p><h3 id="为什么使用内部类"><a href="#为什么使用内部类" class="headerlink" title="为什么使用内部类"></a>为什么使用内部类</h3><p>首先类指的是：具有相同特性的事物抽象出的一类抽象概念，而接口则是具有某种相同功能的事物的抽象出的概念。但是事物与事物之间的关系除了什么是什么的关系，还存在着什么有什么的关系，在python中是以组合的概念描述，在Java里，我们一般使用内部类的来表示，什么有什么的这种关系。<br>当然Java的面向对象也是有组合概念的，内部类不只是表达组合关系，而且在内部类中可以使用外部类的属性与方法。比如说，一个人的类，他有很多的器官，人的器官要使用人的血液，组织液等属性。人的器官使用人的心跳供血等方法，那么你可能会想，那么我们把器官抽象成一个属性，然后在外部类中给他创建方法不就可以使用器官类了吗。但是在实际的环境中，器官也可能是是一类抽象出来的类，它也是一个十分复杂的抽象概念，他是有细胞，组织等属性方法的类，不是一个外部类属性可以用一两个属性就能概括出来的概念。这时候我们需要使用到Java的内部类来描述器官这个抽象概念。</p><h3 id="内部类特征"><a href="#内部类特征" class="headerlink" title="内部类特征"></a>内部类特征</h3><ol><li>在一个类内部存在着一个独立的另一类事物，他也有自己的数据描述，行为特征，那么我们使用内部类来描述这个内部独立类事物；</li><li>内部类只为外部类服务，单独存在没有意义，而且可以访问到外部类的私有属性方法等，为外部类服务。<h3 id="内部类的分类"><a href="#内部类的分类" class="headerlink" title="内部类的分类"></a>内部类的分类</h3></li><li>成员内部类（类中方法外）<ul><li>静态成员内部类</li><li>非静态成员内部类</li></ul></li><li>局部内部类（方法体{},方法形参(),代码块{}中）<ul><li>局部内部类</li><li>匿名内部类</li></ul></li></ol><h3 id="静态成员内部类"><a href="#静态成员内部类" class="headerlink" title="静态成员内部类"></a>静态成员内部类</h3><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">外部类&#123;</span><br><span class="line">    [修饰符] static class 静态内部类名 [extends 父类名] [implements 接口名]&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h4><p>private，缺省，protected，public，static，abstract，final。<br>注意：修饰方法的时候，abstract与static不可以一起使用。（static不让继承，abstract必须继承的矛盾）</p><h4 id="成员"><a href="#成员" class="headerlink" title="成员"></a>成员</h4><p>属性，方法，构造器，代码块，内部类</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>1.静态内部类使用外部类的成员<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String outField = <span class="string">"外部类非静态属性"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String outStaticField = <span class="string">"外部类静态属性"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIn</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//System.out.println("outField=" + outField);//无法使用非静态的属性，Non-static field 'outField' cannot be referenced from a static context</span></span><br><span class="line">            System.out.println(<span class="string">"outStaticField="</span> + outStaticField);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"内部类的静态方法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过上面一段代码，我们可以类比的出，在内部静态类中使用外部类的属性时，只可以使用外部类的静态属性，方法与代码块。（静态只能访问静态，此时非静态还未生成）</p><p>2.外部类中使用静态内部类的成员<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String outField = <span class="string">"外部类非静态属性"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String outStaticField = <span class="string">"外部类静态属性"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"outStaticField="</span> + outStaticField);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"内部类的静态方法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.在外部类中使用内部类的属性与方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OutUseInt</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1. 使用内部类的静态属性与方法</span></span><br><span class="line">        Inner.methodIn();</span><br><span class="line">        <span class="comment">// 2. 使用内部类的非静态属性与方法</span></span><br><span class="line">        <span class="keyword">new</span> Inner().testIn();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//1. 使用内部类的静态属性与方法</span></span><br><span class="line">        Inner.methodIn();</span><br><span class="line">        <span class="comment">// 2. 使用内部类的非静态属性与方法</span></span><br><span class="line">        <span class="keyword">new</span> Inner().testIn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过上面的代码，我们可以看出来，在外部类使用内部类的静态与非静态属性方法时，与正常调用一个类的调用方式一致，一般要写在外部类的代码块或方法中。<br>使用类名调用静态属性方法，使用对象调用非静态属性与方法。</p><p>3.在外部类的外面使用静态内部类的成员<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 3.在外部类的外面调用内部类的静态属性方法</span></span><br><span class="line">        Outer.Inner.methodIn();</span><br><span class="line">        <span class="comment">// 创建内部类对象</span></span><br><span class="line">        Outer.Inner obj = <span class="keyword">new</span> Outer.Inner();</span><br><span class="line">        obj.testIn();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在主函数中（外部类的外面）调用内部类的静态方法与非静态方法，就是按照上述的方式。<br>关于内部类的类型声明时的数据类型名，是按照他生成的字节码来生成的，文件中生成的字节码为Outer$Inner.class。内部类的类型为Outer.Inner。</p><h3 id="非静态成员内部类"><a href="#非静态成员内部类" class="headerlink" title="非静态成员内部类"></a>非静态成员内部类</h3><h4 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">外部类&#123;</span><br><span class="line">[修饰符] class 非静态内部类名   [extends 父类] [implements 接口名]&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="权限修饰符-1"><a href="#权限修饰符-1" class="headerlink" title="权限修饰符"></a>权限修饰符</h4><p>private，缺省，protected，public，abstract，final。</p><p>非静态那么static就不可以使用了。</p><h4 id="成员-1"><a href="#成员-1" class="headerlink" title="成员"></a>成员</h4><p>在非静态内部类中不允许声明静态的成员（是因为加载的顺序的问题），除了静态的常量（常量的值在编译时已经确定了）。</p><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p>1.在非静态内部类中使用外部类的成员<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String outField = <span class="string">"外部类的非静态属性"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String outStaticField = <span class="string">"外部类的静态属性"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_VALUE = <span class="number">10000</span>;<span class="comment">//常量可以</span></span><br><span class="line"><span class="comment">//private static String inField;//非静态类中不能声明一个静态的属性或方法</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">// 1.非静态成员类中可以使用外部类的静态或非静态的属性与方法</span></span><br><span class="line">            System.out.println(<span class="string">"outField ="</span> + outField);</span><br><span class="line">            System.out.println(<span class="string">"outStaticField ="</span> + outStaticField);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>非静态成员内部类可以使用外部类的静态或非静态的属性与方法。</p><p>2.在外部类中使用非静态内部类的成员<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String outField = <span class="string">"外部类的非静态属性"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String outStaticField = <span class="string">"外部类的静态属性"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_VALUE = <span class="number">10000</span>;<span class="comment">//常量可以</span></span><br><span class="line"><span class="comment">//private static String inField;//非静态类中不能声明一个静态的属性或方法</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">// 1.非静态成员类中可以使用外部类的静态或非静态的属性与方法</span></span><br><span class="line">            System.out.println(<span class="string">"outField ="</span> + outField);</span><br><span class="line">            System.out.println(<span class="string">"outStaticField ="</span> + outStaticField);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此处不可以是一个静态的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Inner in = <span class="keyword">new</span> Inner();</span><br><span class="line">        in.testIn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为非静态成员内部类没有静态属性与方法，所以调用他的非静态的属性与方法时，都需要生成一个内部类的对象，在调用属性与方法，并且不可以在外部类的静态代码块或方法里调用一个非静态的属性。<br>3.在外部类的外面使用非静态内部类的成员<br>分为两种方法：首先传统方法，在后面可能不适用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.在外部类的外面调用内部非静态成员内部类</span></span><br><span class="line">        <span class="comment">// 先创建的是外部类的对象</span></span><br><span class="line">        Outer out = <span class="keyword">new</span> Outer();</span><br><span class="line">        <span class="comment">// 方法一：创建一个内部非静态成员类的对象</span></span><br><span class="line">        Outer.Inner in = out.new Inner();<span class="comment">//这种写法略微有点怪异了，一般也不使用这种方式。但是这么做是可以的</span></span><br><span class="line">        <span class="comment">//最后就是使用了</span></span><br><span class="line">        in.testIn();</span><br><span class="line">        <span class="comment">// 方法二：getInner方法</span></span><br><span class="line">        Outer.Inner in1 = out.getInner();</span><br><span class="line">        in1.testIn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String outField = <span class="string">"外部类的非静态属性"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String outStaticField = <span class="string">"外部类的静态属性"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_VALUE = <span class="number">10000</span>;<span class="comment">//常量可以</span></span><br><span class="line"><span class="comment">//private static String inField;//非静态类中不能声明一个静态的属性或方法</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">// 1.非静态成员类中可以使用外部类的静态或非静态的属性与方法</span></span><br><span class="line">            System.out.println(<span class="string">"outField ="</span> + outField);</span><br><span class="line">            System.out.println(<span class="string">"outStaticField ="</span> + outStaticField);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//2.在外部类中调用非静态成员内部类的属性与方法</span></span><br><span class="line">        Inner in = <span class="keyword">new</span> Inner();</span><br><span class="line">        in.testIn();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Inner <span class="title">getInner</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Inner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上就是两种方法，如何在外部类的外部调用一个内部成员非静态类的属性与方法。后面一种get获取内部类的方式更为通用。<br>注意：非静态内部类的字节码文件名：外部类$内部类.class，非静态内部类的全名称：外部类.非静态内部类。</p><h3 id="有名字的局部内部类"><a href="#有名字的局部内部类" class="headerlink" title="有名字的局部内部类"></a>有名字的局部内部类</h3><h4 id="声明-2"><a href="#声明-2" class="headerlink" title="声明"></a>声明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">外部类&#123;</span><br><span class="line">    方法&#123;</span><br><span class="line">        【修饰符】   class 局部内部类  [extends 父类] [implements 接口名]&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明在方法中，代码块中都可以，一般都在方法中。</p><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p>abstract,final。</p><p>注意：局部内部类与局部变量进行类比，他是没有权限修饰符的，同时也不会出现静态的属性，并且他也是没有static修饰的，static修饰类的成员。</p><h4 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h4><p>1.在局部内部类中使用外部类的成员<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String outField;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String outStaticField;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;<span class="comment">//局部变量</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"常量"</span>;<span class="comment">//常量</span></span><br><span class="line"><span class="comment">//private static String info;//局部内部类没有静态的属性方法</span></span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="comment">// 1. 有名字的局部内部类调用外部类的属性与方法</span></span><br><span class="line">                System.out.println(<span class="string">"outField = "</span> + outField);</span><br><span class="line">                System.out.println(<span class="string">"outStaticField = "</span> + outStaticField);</span><br><span class="line">                System.out.println(<span class="string">"a = "</span> + a);<span class="comment">//优先方法中局部变量的值，其次成员变量的值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此时不可以使用外部类的静态成员</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"常量"</span>;<span class="comment">//常量</span></span><br><span class="line">            </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIn</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//System.out.println("outField = " + outField);//方法是静态的，局部内部类则不能调用非静态的属性</span></span><br><span class="line">                System.out.println(<span class="string">"outStaticField = "</span> + outStaticField);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>限制：能不能使用外部类的非静态成员，看局部内部类所在的方法是否是静态的。局部内部类取类外的值优先取方法中的值，没有再取成员变量的值.</p><p>2.在外部类中使用局部内部类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String outField;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String outStaticField;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;<span class="comment">//局部变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Inner in = new Inner();//1.会报错，需要先声明后使用</span></span><br><span class="line"><span class="comment">//        in.testIn();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"常量"</span>;<span class="comment">//常量</span></span><br><span class="line"><span class="comment">//private static String info;//局部内部类没有静态的属性方法</span></span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="comment">// 1. 有名字的局部内部类调用外部类的属性与方法</span></span><br><span class="line">                System.out.println(<span class="string">"outField = "</span> + outField);</span><br><span class="line">                System.out.println(<span class="string">"outStaticField = "</span> + outStaticField);</span><br><span class="line">                System.out.println(<span class="string">"a = "</span> + a);<span class="comment">//使用外部类的局部变量</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Inner in = <span class="keyword">new</span> Inner();<span class="comment">//先声明后使用，有作用域</span></span><br><span class="line">        in.testIn();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInner</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//Inner in = new Inner();//2. 作用域隔离，注意作用=域</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"常量"</span>;<span class="comment">//常量</span></span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIn</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//System.out.println("outField = " + outField);//方法是静态的，局部内部类则不能调用非静态的属性</span></span><br><span class="line">                System.out.println(<span class="string">"outStaticField = "</span> + outStaticField);</span><br><span class="line"><span class="comment">//              System.out.println("a = " + a);//使用外部类的局部变量</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Inner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意：使用的方式类似于局部变量的使用，需要先定义再使用。注意内部类名称的作用域，错误的作用域是无法调用的。</p><p>3.在外部类的外面使用局部内部类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//A：使用Inner类型不可以</span></span><br><span class="line"><span class="comment">//Outer.Inner//错误的，没有这个字节码文件的生成</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//B：获取到Inner的对象，使用多态引用</span></span><br><span class="line">        Object obj = Outer.method();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意：在外部类的外面不可以使用局部内部类的类型；在外部类的外面可以获取到局部内部类的对象；</p><p>4.在局部内部类中可以使用所在方法/代码块的局部常量（final声明的）</p><ul><li>JDK1.8之前：必须手动加final</li><li>JDK1.8之后：编译器会默认自动给加上final，如果不可以加final，那么报错。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String outField;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String outStaticField;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;<span class="comment">//局部变量，实际上jdk8.0之后默认加了final，这是一个常量</span></span><br><span class="line">        <span class="comment">// a = 20; //不能修改这个值，修改了局部内部类就会报错了。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"常量"</span>;<span class="comment">//常量</span></span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"a = "</span> + a);<span class="comment">//使用所在方法/代码块的局部常量</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>注意：局部内部类的字节码文件名：外部类名+$编号+局部内部类名.class，我们无法直接表示出一个有名字局部内部类的类型和对象，所以需要我们在方法中返回一个局部内部类的对象用于使用。</p><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><h4 id="声明-3"><a href="#声明-3" class="headerlink" title="声明"></a>声明</h4><p>创建对象和声明类同时进行，一个匿名内部类只能有一个唯一的对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new 父类(【实参列表】)&#123;&#125;</span><br><span class="line"></span><br><span class="line">new 父接口()&#123;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li>不存在修饰符；</li><li>创建对象与声明类同时进行，而且一个匿名内部类只有一个对象；</li><li>匿名内部类和局部内部类是一样的，可以用所在方法的局部常量（final）修饰<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAnonymousInner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这个f1指向的是Father的子类的对象</span></span><br><span class="line">        <span class="comment">//多态引用</span></span><br><span class="line">        Father f1 = <span class="keyword">new</span> Father()&#123;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(f1.getClass());<span class="comment">// class 包名.TestAnonymousInner$1</span></span><br><span class="line"></span><br><span class="line">        Father f2 = <span class="keyword">new</span> Father()&#123;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(f2.getClass());<span class="comment">// class 包名.TestAnonymousInner$2</span></span><br><span class="line"></span><br><span class="line">        Father f3 = <span class="keyword">new</span> Father()&#123;</span><br><span class="line">            <span class="comment">//重写父类的方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"子类3重写父类的方法"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        f3.test();<span class="comment">// 子类3重写父类的方法</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"父类的测试方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这里的f1和f2与f3指向的是三个不同的匿名对象，并且匿名对象里可以重写父类的方法，如果父类是一个抽象类或者接口，那么子类匿名类必须要实现父类的抽象方法。</p><p>如果父类中只有一个有参构造器，那么子类匿名内部类则需要调用父类的有参构造器创建类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="comment">//只有一个有参构造</span></span><br><span class="line">    Father(String info)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"父类方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAnonymousInner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Father m = <span class="keyword">new</span> Father(<span class="string">"实参"</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h4><p>1.如果父类没有此方法，子类匿名内部类实现了这个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//多态引用，编译时按照父类编译</span></span><br><span class="line">Object obj = <span class="keyword">new</span> Object()&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"匿名内部类的测试方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//obj.test();//错误的,父类Object中没有test()</span></span><br><span class="line"><span class="comment">//对象.方法()</span></span><br><span class="line"><span class="comment">//匿名内部类的匿名对象</span></span><br><span class="line"><span class="keyword">new</span> Object()&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"匿名内部类的测试方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;.test();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.如果父类也有此方法，子类匿名内部类重写了这个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUse2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Fu f = <span class="keyword">new</span> Fu()&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"子类"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">f.test();<span class="comment">//子类</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"父类"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.匿名类作形参<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUse3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//method();//实参应该是MyInter类型的一个对象，因为接口不能直接创建对象，应该传它的实现类的对象</span></span><br><span class="line">method(<span class="keyword">new</span> MyInter()&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"MyInter实现类重写了test方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(MyInter my)</span></span>&#123;</span><br><span class="line">my.test();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInter</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="知识巩固"><a href="#知识巩固" class="headerlink" title="知识巩固"></a>知识巩固</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：这是一个外部类，里面声明了一个内部类，那么如果我想要继承内部类Inner那么，我们要怎么操作呢？</p><ol><li>继承的语法格式：class 子类名  extends  父类名{}</li><li>非静态内部类的全名称：   外部类名.内部类名</li><li>继承抽象类：必须重写抽象类的抽象方法</li><li>要调用非静态内部类的构造器，需要外部类的对象</li><li>子类继承父类时，一定在子类的构造器的首行，一定要调用父类的构造器<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInner</span> <span class="keyword">extends</span> <span class="title">Outer</span>.<span class="title">Inner</span></span>&#123;</span><br><span class="line"><span class="comment">/*MyInner()&#123;</span></span><br><span class="line"><span class="comment">new Outer().super();</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line">    MyInner(Outer out)&#123;</span><br><span class="line">        out.<span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写抽象类的抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>注意：最后两点容易被忽视，继承内部类的时候要调用非静态内部类的构造器，需要外部类的对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java类的成员分为五类：属性，方法，构造器，代码块，和内部类。&lt;/p&gt;
&lt;h3 id=&quot;为什么使用内部类&quot;&gt;&lt;a href=&quot;#为什么使用内部类&quot; class=&quot;headerlink&quot; title=&quot;为什么使用内部类&quot;&gt;&lt;/a&gt;为什么使用内部类&lt;/h3&gt;&lt;p&gt;首先类指的是
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Interface实现多继承</title>
    <link href="http://yoursite.com/2018/05/25/Interface%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2018/05/25/Interface实现多继承/</id>
    <published>2018-05-25T10:10:21.000Z</published>
    <updated>2018-06-10T16:34:26.045Z</updated>
    
    <content type="html"><![CDATA[<h3 id="接口的概念"><a href="#接口的概念" class="headerlink" title="接口的概念"></a>接口的概念</h3><p>在Java的面向对象里，类的继承关系是单继承的，与python的多继承不同，单继承的概念比较狭隘，在实际的环境里单继承的设计也不适用，Son不仅会继承father的属性，同时son也会继承mother的属性，而这种情况下，单继承就做不到让两个父类的属性都被子类继承了。<br>不仅如此，在类抽象父类的过程中，鸭子可以水中游，船也可以水中游，但是鸭子和船却不能很好的抽象出一个合理的父类来。</p><p>接口使得很多没有父子类关系的类型对象，可以通过某个接口（标准）的类型，实现统一管理。简单的来说，我认为Java设计出接口的概念是实现多继承的一种方式，同时也是实现鸭子类型的一种方式。</p><h3 id="接口的定义与继承"><a href="#接口的定义与继承" class="headerlink" title="接口的定义与继承"></a>接口的定义与继承</h3><p>接口和类是同一个级别的概念。可以理解为特殊的类，特殊的抽象类。调用的语法与声明class基本一致，只是将class关键字换成了interface。</p><p>定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] interface 接口名&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>继承：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] class 实现类   implements 父接口名&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[修饰符] class 实现类   implements 父接口名1，父接口名2，...&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[修饰符] class 实现类  extends 父类   implements 父接口名1，父接口名2，...&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="接口的特点"><a href="#接口的特点" class="headerlink" title="接口的特点"></a>接口的特点</h3><ol><li>接口不能直接实例化，即不能直接创建对象(与抽象类类似)，他也不存在构造器;</li><li><p>接口中的成员：</p><p> JDK1.8之前：接口中的成员只有三类：</p><ul><li>（1）公共的静态的常量：public static final，这几个修饰符可以省略</li><li>（2）公共的抽象的方法：public abstract，这两个修饰符可以省略</li><li>（3）公共的内部接口</li></ul></li><li>设计接口的目的就是用来被实现的。<ul><li>一个类实现了接口，就要求这个类必须重写（实现）接口的抽象方法，否则这个类也得是个抽象类。</li></ul></li><li>一个类可以同时实现很多个接口(类似于多继承)。</li><li>一个类可以同时继承父类，又实现接口们。如果继承和实现同时存在，继承优先级更高。</li><li>接口与实现类的对象之间构成多态引用。</li><li>接口可以继承接口，而且可以继承多个接口。</li></ol><h3 id="coding理解interface的作用"><a href="#coding理解interface的作用" class="headerlink" title="coding理解interface的作用"></a>coding理解interface的作用</h3><p>我现在想写一个可以为数组排序的一个工具类，但是不同类型的数组要怎么排序是一个问题，假设我有一个学生对象的数组，那么对于这个学生对象的数组排序，我是按照年龄排序还是按照学号排序，再或者我下一次放入一个全是整形的数组进行排序，那么我们如何让我的这个工具类都可以正常的运行呢？</p><p>定义一个接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 我们定义的这个接口定义了一个规范，实现我们的这个接口的类都必须实现自己的一套排序方式</span></span><br><span class="line"><span class="comment">* 并且大小顺序按照此规则来定</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SortAble</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 规定：当前对象this 和 指定对象obj比较大小时，</span></span><br><span class="line"><span class="comment">     * 当 this “大于” obj时，返回正整数</span></span><br><span class="line"><span class="comment">     * 当 this “小于” obj时，返回负整数</span></span><br><span class="line"><span class="comment">     * 当 this “等于” obj时，返回零</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object obj)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定义一个学生类，按照接口定义的要求实现比较的细节：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Sortable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Student [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现接口，标准的抽象方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="comment">//this的学生对象和obj的学生对象进行比较大小，按照学号比较</span></span><br><span class="line">Student other = (Student) obj;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.id &gt; other.id)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.id &lt; other.id)&#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现排序的细节：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArrays</span> </span>&#123;</span><br><span class="line"><span class="comment">//功能：为任意类型的数组进行从小到大排序</span></span><br><span class="line"><span class="comment">//参数：Object[]</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Object[] arr)</span></span>&#123;</span><br><span class="line"><span class="comment">//冒泡排序：从小到大</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length-i; j++) &#123;</span><br><span class="line"><span class="comment">//如果arr[j]和arr[j+1]两个对象符合Sortable标准</span></span><br><span class="line"><span class="comment">//那么，我们就可以把arr[j]转成Sortable类型</span></span><br><span class="line">Student s = (Student) arr[j];<span class="comment">//这两种转换都可以</span></span><br><span class="line"><span class="comment">//Sortable s = (Sortable) arr[j];</span></span><br><span class="line"><span class="comment">//if(arr[j] &gt; arr[j+1])&#123;//if(前面的元素 &gt; 后面的元素)&#123;</span></span><br><span class="line"><span class="keyword">if</span>(s.compare(arr[j+<span class="number">1</span>]) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">Object temp = arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后我们可以进行测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMyArrays</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student[] students = <span class="keyword">new</span> Student[<span class="number">3</span>];</span><br><span class="line">        students[<span class="number">0</span>] = <span class="keyword">new</span> Student(<span class="number">4</span>,<span class="string">"张三"</span>);</span><br><span class="line">        students[<span class="number">1</span>] = <span class="keyword">new</span> Student(<span class="number">1</span>,<span class="string">"李四"</span>);</span><br><span class="line">        students[<span class="number">2</span>] = <span class="keyword">new</span> Student(<span class="number">5</span>,<span class="string">"丁杰"</span>);</span><br><span class="line"></span><br><span class="line">        MyArrays.sort(students);</span><br><span class="line">        <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Student [id=1, name=李四]</span><br><span class="line">Student [id=4, name=张三]</span><br><span class="line">Student [id=5, name=丁杰]</span><br></pre></td></tr></table></figure></p><p>通过上面的例子我们可以的出结论，只要是我们实现了Sortable接口的类，它实例出的对象就可以进行排序输出了。</p><h3 id="JDK8后的接口特性"><a href="#JDK8后的接口特性" class="headerlink" title="JDK8后的接口特性"></a>JDK8后的接口特性</h3><p>接口成员除了公共的静态的常量：public static final，公共的抽象的方法：public abstract，公共内部接口以外又增加了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">interface MyInter&#123;</span><br><span class="line">//静态方法,通过接口名进行调用。</span><br><span class="line">public static void method()&#123;</span><br><span class="line">System.out.println(&quot;接口中允许有静态方法&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//默认方法,通过实现类的对象调用。子类可以不实现就直接调用，子类也可以进行重写</span><br><span class="line">public default void test()&#123;</span><br><span class="line">System.out.println(&quot;接口的默认方法&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//抽象方法</span><br><span class="line">public abstract void fangFa();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>默认方法：当接口的多个实现类关于某个抽象方法的实现是一样的，那么可以在接口中给出默认实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInterface</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyInter.method();</span><br><span class="line"></span><br><span class="line">MyImpl my = <span class="keyword">new</span> MyImpl();</span><br><span class="line">my.fangFa();</span><br><span class="line">my.test();</span><br><span class="line"></span><br><span class="line">OtherImpl other = <span class="keyword">new</span> OtherImpl();</span><br><span class="line">other.test();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInter</span></span>&#123;</span><br><span class="line"><span class="comment">//静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"接口中允许有静态方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认方法,</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"接口的默认方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fangFa</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyImpl</span> <span class="keyword">implements</span> <span class="title">MyInter</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fangFa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"实现类重写接口的抽象方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OtherImpl</span> <span class="keyword">implements</span> <span class="title">MyInter</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写接口中的默认方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"重写接口的默认方法......"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fangFa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"实现类重写接口的抽象方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">接口中允许有静态方法</span><br><span class="line">实现类重写接口的抽象方法</span><br><span class="line">接口的默认方法</span><br><span class="line">重写接口的默认方法......</span><br></pre></td></tr></table></figure></p><p>也就是说，如果你不重写父接口的默认方法，那么你就相当于继承了这个接口的此方法了。同时增加了静态方法，静态方法是不可以继承的这看起来有点奇怪，但是可能在某个时候会被我们使用到吧。</p><h3 id="继承类与接口时遇到的冲突"><a href="#继承类与接口时遇到的冲突" class="headerlink" title="继承类与接口时遇到的冲突"></a>继承类与接口时遇到的冲突</h3><h4 id="一个类同时实现的多个接口都有一个一样的默认方法"><a href="#一个类同时实现的多个接口都有一个一样的默认方法" class="headerlink" title="一个类同时实现的多个接口都有一个一样的默认方法"></a>一个类同时实现的多个接口都有一个一样的默认方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProblem1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MySub m = <span class="keyword">new</span> MySub();</span><br><span class="line">m.method();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"A接口的默认方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"B接口的默认方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现了A和B，A和B都有自己的默认方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySub</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public void method() &#123;</span></span><br><span class="line"><span class="comment">A.super.method();//保留A的方法实现</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public void method() &#123;</span></span><br><span class="line"><span class="comment">B.super.method();//保留B的方法实现</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public void method() &#123;</span></span><br><span class="line"><span class="comment">A.super.method();//保留A的方法实现</span></span><br><span class="line"><span class="comment">B.super.method();//也保留B的方法实现</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//选择C</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我选择其他"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承的父类与实现接口中的默认方法一样"><a href="#继承的父类与实现接口中的默认方法一样" class="headerlink" title="继承的父类与实现接口中的默认方法一样"></a>继承的父类与实现接口中的默认方法一样</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProblem2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Sub sub = <span class="keyword">new</span> Sub();</span><br><span class="line">sub.method();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">myInter</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"接口中的默认方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"父类和接口的默认方法一样的方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Father</span> <span class="keyword">implements</span> <span class="title">myInter</span></span>&#123;</span><br><span class="line"><span class="comment">//(1)默认保留的是父类</span></span><br><span class="line"><span class="comment">//(2)明确保留父类的</span></span><br><span class="line"><span class="comment">/*public void method()&#123;</span></span><br><span class="line"><span class="comment">super.method();</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(3)明确保留接口的</span></span><br><span class="line"><span class="comment">/*public void method()&#123;</span></span><br><span class="line"><span class="comment">myInter.super.method();</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(4)两者都不要，其他</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"其他"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;接口的概念&quot;&gt;&lt;a href=&quot;#接口的概念&quot; class=&quot;headerlink&quot; title=&quot;接口的概念&quot;&gt;&lt;/a&gt;接口的概念&lt;/h3&gt;&lt;p&gt;在Java的面向对象里，类的继承关系是单继承的，与python的多继承不同，单继承的概念比较狭隘，在实际的环境里单继
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java程序初始化的顺序（二）</title>
    <link href="http://yoursite.com/2018/05/23/Java%E7%A8%8B%E5%BA%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E9%A1%BA%E5%BA%8F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2018/05/23/Java程序初始化的顺序（二）/</id>
    <published>2018-05-23T15:42:54.000Z</published>
    <updated>2018-06-10T16:22:26.886Z</updated>
    
    <content type="html"><![CDATA[<p>之前的一篇博客里我写了关于在一个类中的程序初始化顺序，但是在Java的面向对象里，类之间还存在着继承的关系。所以关于程序的初始化顺序，我们可以再细划分为：父类静态变量，父类的静态代码块，父类构造器，父类非静态变量，父类非静态代码块，子类静态变量，子类静态代码块，子类构造器，子类非静态成员变量和子类非静态代码块。<br>本篇博客我们讨论的就是关于程序初始化的过程中，上述的成员在初始化加载先后顺序。<br><a id="more"></a><br>在此前我们讨论得出的结论：在一个类中，Java程序加载的顺序是：静态变量–&gt;静态代码块–&gt;非静态变量–&gt;非静态代码块–&gt;构造器.</p><p>父类的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">    <span class="comment">//父类与子类都在一个包中，这里我们就使用default修饰符</span></span><br><span class="line">    <span class="comment">//这是一个父类的静态变量,此时还是初始化的默认值null</span></span><br><span class="line">    <span class="keyword">static</span> String superStaticVariale;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块，给String赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        superStaticVariale = <span class="string">"父类静态代码块赋值成功"</span>;</span><br><span class="line">        System.out.println(<span class="string">"此时运行的是父类的静态代码块："</span>+superStaticVariale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造，覆盖静态代码块的值</span></span><br><span class="line">    SuperClass()&#123;</span><br><span class="line">        superStaticVariale = <span class="string">"父类构造器赋值成功"</span>;</span><br><span class="line">        System.out.println(<span class="string">"此时运行的是父类的构造器："</span>+superStaticVariale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个非静态变量</span></span><br><span class="line">    String superVariale;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        superVariale = <span class="string">"父类非静态代码块赋值"</span>;</span><br><span class="line">        System.out.println(<span class="string">"此时运行的是父类的非静态代码块："</span>+superVariale);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>子类的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> String subStaticVariale;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块，给String赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        subStaticVariale = <span class="string">"子类静态代码块赋值成功"</span>;</span><br><span class="line">        System.out.println(<span class="string">"此时运行的是子类的静态代码块："</span>+subStaticVariale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造，覆盖静态代码块的值</span></span><br><span class="line">    SubClass()&#123;</span><br><span class="line">        superStaticVariale = <span class="string">"子类构造器赋值成功"</span>;</span><br><span class="line">        System.out.println(<span class="string">"此时运行的是子类的构造器："</span>+superStaticVariale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个非静态变量</span></span><br><span class="line">    String subVariale;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        subVariale = <span class="string">"子类非静态代码块赋值"</span>;</span><br><span class="line">        System.out.println(<span class="string">"此时运行的是子类非静态代码块："</span>+subVariale);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SubClass s = <span class="keyword">new</span> SubClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">此时运行的是父类的静态代码块：父类静态代码块赋值成功</span><br><span class="line">此时运行的是子类的静态代码块：子类静态代码块赋值成功</span><br><span class="line">此时运行的是父类的非静态代码块：父类非静态代码块赋值</span><br><span class="line">此时运行的是父类的构造器：父类构造器赋值成功</span><br><span class="line">此时运行的是子类非静态代码块：子类非静态代码块赋值</span><br><span class="line">此时运行的是子类的构造器：子类构造器赋值成功</span><br></pre></td></tr></table></figure></p><p>很显然，在继承关系中，代码的加载顺序是：父类的静态变量–&gt;父类的静态代码块–&gt;子类静态变量–&gt;子类的静态代码块–&gt;父类非静态变量–&gt;父类的非静态代码块–&gt;父类的构造器–&gt;子类非静态变量–&gt;子类非静态代码块–&gt;子类构造器</p><p>进一步测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SubClass s = <span class="keyword">new</span> SubClass();</span><br><span class="line">        SubClass s1 = <span class="keyword">new</span> SubClass();</span><br><span class="line">        SubClass s2 = <span class="keyword">new</span> SubClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">此时运行的是父类的静态代码块：父类静态代码块赋值成功</span><br><span class="line">此时运行的是子类的静态代码块：子类静态代码块赋值成功</span><br><span class="line">此时运行的是父类的非静态代码块：父类非静态代码块赋值</span><br><span class="line">此时运行的是父类的构造器：父类构造器赋值成功</span><br><span class="line">此时运行的是子类非静态代码块：子类非静态代码块赋值</span><br><span class="line">此时运行的是子类的构造器：子类构造器赋值成功</span><br><span class="line">此时运行的是父类的非静态代码块：父类非静态代码块赋值</span><br><span class="line">此时运行的是父类的构造器：父类构造器赋值成功</span><br><span class="line">此时运行的是子类非静态代码块：子类非静态代码块赋值</span><br><span class="line">此时运行的是子类的构造器：子类构造器赋值成功</span><br><span class="line">此时运行的是父类的非静态代码块：父类非静态代码块赋值</span><br><span class="line">此时运行的是父类的构造器：父类构造器赋值成功</span><br><span class="line">此时运行的是子类非静态代码块：子类非静态代码块赋值</span><br><span class="line">此时运行的是子类的构造器：子类构造器赋值成功</span><br></pre></td></tr></table></figure></p><p>得出结论：<br>父类与子类的静态代码都只执行一次，然后非静态代码块与构造器是组合出现的。</p><p>简化一下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">C c= <span class="keyword">new</span> C();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    A()&#123;</span><br><span class="line">        System.out.println(<span class="string">"A的无参构造器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="comment">//    B(int a)&#123;</span></span><br><span class="line">    B()&#123;</span><br><span class="line">        System.out.println(<span class="string">"B的无参构造器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    C()&#123;</span><br><span class="line">        System.out.println(<span class="string">"C的无参构造器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A的无参构造器</span><br><span class="line">B的无参构造器</span><br><span class="line">C的无参构造器</span><br></pre></td></tr></table></figure></p><p>调用C的构造器生成C的实例对象会从最上级的父类的无参构造器开始逐层调用，那么我们的类都继承了一个超级父类Object，也就是在我们最初的错误代码中，我们调用Student的无参构造创建一个对象时，首先会调用这个对象的父类Object的无参构造器，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">name = <span class="string">"老大"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student()&#123;</span><br><span class="line">    <span class="keyword">this</span>(name);<span class="comment">//这样会报错</span></span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">System.out.println(<span class="string">"题目要求写一个无参的构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student(String name)&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>子类实例化默认调用父类的无参构造器，也就是如上this调用在super()之前（实际中这两者不会同时出现），name此时是非静态属性，此时会报错错误: 无法在调用超类型构造器之前引用name。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> String name;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">name = <span class="string">"老大"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student()&#123;</span><br><span class="line">    <span class="keyword">this</span>(name);</span><br><span class="line">System.out.println(<span class="string">"题目要求写一个无参的构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student(String name)&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当name是静态属性时，代码块是非静态时，编译通过，调用子类的无参构造器时this(name)，输出结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">null</span><br><span class="line">题目要求写一个无参的构造器</span><br></pre></td></tr></table></figure></p><p>此时的this()调用实参构造并没有赋值成功。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">name = <span class="string">"老大"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student()&#123;</span><br><span class="line">    <span class="keyword">this</span>(name);</span><br><span class="line">System.out.println(<span class="string">"题目要求写一个无参的构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student(String name)&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">老大</span><br><span class="line">题目要求写一个无参的构造器</span><br></pre></td></tr></table></figure></p><p>这样赋值成功。由此证明我们的结论是正确的，this()是在子类父类构造器之前进行的操作super(),当子类代码块是非静态时，子类非静态代码块会在执行父类构造器之后执行，所以this(name)时name还没有被赋值，所以打印是null。</p><p>结论：</p><ol><li>一个类中可以在无参构造器中调用此类的有参构造器（顺序反过来）；</li><li>在执行子类的无参构造器时会默认调用最高级父类无参构造，并逐级调用直至子类的无参构造；</li><li>Java程序的加载顺为父类的静态变量–&gt;父类的静态代码块–&gt;子类静态变量–&gt;子类的静态代码块–&gt;父类非静态变量–&gt;父类的非静态代码块–&gt;父类的构造器–&gt;子类非静态变量–&gt;子类非静态代码块–&gt;子类构造器，且静态变量或代码块无论构造器调用多少次，他只会执行一次，后面再调用构造器则会执行非静态属性及代码块构造器。</li></ol><p>最后关于为什么子类会调用父类的构造器，这个从设计着的角度来看是为了给从父类继承的属性初始化，子类需要知道父类是如何给属性初始化的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前的一篇博客里我写了关于在一个类中的程序初始化顺序，但是在Java的面向对象里，类之间还存在着继承的关系。所以关于程序的初始化顺序，我们可以再细划分为：父类静态变量，父类的静态代码块，父类构造器，父类非静态变量，父类非静态代码块，子类静态变量，子类静态代码块，子类构造器，子类非静态成员变量和子类非静态代码块。&lt;br&gt;本篇博客我们讨论的就是关于程序初始化的过程中，上述的成员在初始化加载先后顺序。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
</feed>
